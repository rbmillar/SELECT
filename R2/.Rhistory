V=c("n1","n2")
typeof(V)
class(V)
?typeof
?class
typeof(NULL)
is.null
?group_by_at
require(tidyverse)
?group_by_at
Catch
require(MuMIn) #For dredge
options(na.action = "na.fail") #For dredge
require(msm)
require(tidyverse)
#require(readxl)
require(dplyr)
require(ggplot2)
require(gridExtra)
require(ggpubr)
require(mgcv)
#remotes::install_local("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT",force=T)
require(SELECT)
require(scam) #Monotone splines
require(stringr) #For str_sub() to use -ve string posns
#FuncDir="T:/Russell_SSD/ACTIVE/Collaboration/CTU/"
#source(paste0(FuncDir,"SELECTDfFunctions.R"))
source(knitr::purl("FitFuncs.Rmd", quiet=TRUE))
source(knitr::purl("CatchSimulationFuncs.Rmd", quiet=TRUE))
source("permute.SELECT.R") #If using old SELECT pkg
psplit0=0.5
txt=8 #ggplot specification
#Pars=c(4,0.05); lenseq=46:65
Pars=c(4,0.3); lenseq=21:120
par(las=1)
plot(lenseq,dlnorm(lenseq,Pars[1],Pars[2]),type="l")
BHV.type="BHV"
phi0=0.5 #For H0:r(l)=phi0
nsims=1; nboots=400; Method=2;
do.grobs=T; GrobList=as.list(1:nsims)
lensOutList=as.list(1:nsims)
BootReject=matrix(F,nsims,2); colnames(BootReject)=c("constant","phi0")
do.perm=T; permPval=matrix(NA,nsims,2); permSignif=permPval
r=function(l) rlogist(l,beta=c(-9,0.2),lo=0.45,hi=0.55) #r=NULL
#r=function(l) rquad(l,k=5000)
for(i in 1:nsims) {
print(i)
Catch=SimTows(N=400,nTows=10,Pars,lenseq,p.sd=0.1,eps=0,rmu=r,type="BHV",b=b3) #rmu=rmu,type="PIT",b=b1)
BootOut=boot.SELECT(Catch,bootpreds,nboots,SetID="TowID",Freqs=c("n1","n2"),
method=Method)
Bnds=t( apply(BootOut,2,quant6,prob=c(0.025,0.975)) )
#Test H0:r(l)=phi0
lensOut=lenseq[Bnds[,1]>phi0 | Bnds[,2]<phi0]
lensOutList[[i]]=lensOut
if(length(lensOut)>0) BootReject[i,"phi0"]=T
if(max(Bnds[,1])>min(Bnds[,2])) BootReject[i,"constant"]=T
cat("Sim",i,"Bootstrap rejection:", BootReject[i,])
if(i>1) cat(".... Running boot propn=", apply(BootReject[1:i,],2,mean),"\n")
if(do.grobs) {
Tots=Catch %>% group_by(lgth) %>%
summarize(n1=sum(n1),n2=sum(n2),y=n2/(n1+n2)) %>% data.frame()
GrobList[[i]]=BootPlot(BootOut,lenseq,phi0,Data=Tots) }
if(do.perm) {
ObsStat=CR.devs(Catch)
permStats=permute.SELECT(Catch,CR.devs,400,SetID="TowID",Freqs=c("n1","n2"))
#permDiff=cbind(t(permStats),ObsStat)-ObsStat
permDiff=t(permStats)-ObsStat
permPval[i,]=apply( permDiff,1,function(x) mean(x>=0) )
cat("Permutational p-values",round(permPval[i,],3))
#permPval[i]=mean(c(permStat,ObsStat)>=ObsStat)
#permSignif=mean( permPval[1:i]<=0.05 )
if(i>1) {
permSignif=apply( permPval[1:i,],2,function(x) mean(x<=0.05))
cat(".....  Running perm propn",permSignif,"\n") }
#cat("Perm",ifelse(permPval[i]<=0.05,"Signif","Not signif"),". p=",permSignif,"\n")
} }
BootSignif=apply(BootReject,2,mean)
#SignifLength=sapply(lensOutList,function(x) length(x))
#sum(SignifLength)/(nsims*length(lenseq))
PermReject=permPval<=0.05
PermSignif=apply(PermReject,2,mean)
cat("\nBootstrap rejection rates of Hnull and H0.5 are",BootSignif)
cat("\nPermutation rejection rates of Hnull and H0.5 are",PermSignif)
Catch
Data=Catch %>% group_by(lgth) %>%
summarize(across(all_of(c("n1","n2")),sum)) %>% data.frame()
Data
Data=Catch %>% group_by(across("lgth")) %>%
summarize(across(all_of(c("n1","n2")),sum)) %>% data.frame()
Data
lvar="lgth"
Data=Catch %>% group_by(across(lvar)) %>%
summarize(across(all_of(c("n1","n2")),sum)) %>% data.frame()
?syms
syms("lgth")
var.names=c("lgth","n1","n2")
syms(var.names)
?!!
..af
?"!!"
warnings()
?warnings
avar="lgth"
Data=Catch %>% group_by(across(avar)) %>%
summarize(across(all_of(c("n1","n2")),sum)) %>% data.frame()
warnings()
bvar="lgth"
Data=Catch %>% group_by(across(all_of(bvar))) %>%
summarize(across(all_of(c("n1","n2")),sum)) %>% data.frame()
Data
var.names
var.names=c("lgth","n1","n2")
Data=Catch %>% group_by(across(all_of(var.names[1]))) %>%
summarize(across(all_of(var.names[2:3]),sum)) %>% data.frame()
Data
rm(Data)
##Also works
var.names=c("lgth","n1","n2")
Data=Catch %>% group_by(across(all_of(var.names[1]))) %>%
summarize(across(all_of(var.names[2:3]),sum)) %>% data.frame()
Data
ls
lm
CR.dev
CR.devs
block
gear
parse(a)
quote(a)
{{ a }}
as_string(a)
as_name(a)
as.name(a)
symbol(a)
quote(a)
enquo(a)
substitute(a)
deparse(a)
?substitute
a=5
deparse(a)
substitute(a)
##Now for something completely different
test=function(x) deparse(substitute(x))
test(var.names)
test=function(x) deparse(substitute(x))
test(var.names)
test2=function(x) deparse(x)
test2(var.names)
test1=function(x) deparse(substitute(x))
test1(var.names)
test2=function(x) deparse(x[1])
test2(var.names)
test1=function(x) deparse(substitute(x))
test1(var.names)
test1=function(x) deparse(substitute(x))
test1(var.names)
test1(c(lgth,n1,n2))
test2=function(x) deparse(x[1])
test2(c(lgth,n1,n2))
test2=function(x) substitute (x)
test2(c(lgth,n1,n2))
test1(lgth)
deparse(substitute(a)
dafdsa
selfisher
require(selfisher)
selfisher
quote(a)
parse("a")
parse(a)
?parse
parse(test="a")
parse(text="a")
?sym
knitr::opts_chunk$set(fig.height=3)
require(MuMIn) #For dredge
options(na.action = "na.fail") #For dredge
require(msm)
require(tidyverse)
#require(readxl)
require(dplyr)
require(ggplot2)
require(gridExtra)
require(ggpubr)
require(mgcv)
#remotes::install_local("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT",force=T)
require(SELECT)
require(scam) #Monotone splines
require(stringr) #For str_sub() to use -ve string posns
#FuncDir="T:/Russell_SSD/ACTIVE/Collaboration/CTU/"
#source(paste0(FuncDir,"SELECTDfFunctions.R"))
source(knitr::purl("CatchSimulationFuncs.Rmd", quiet=TRUE))
R2dir="T:\Russell_SSD\ACTIVE\CurrentWork\RPackages\SELECT\R2\"
source(knitr::purl("CatchSimulationFuncs.Rmd", quiet=TRUE))
R2dir="T:\Russell_SSD\ACTIVE\CurrentWork\RPackages\SELECT\"
source(knitr::purl("CatchSimulationFuncs.Rmd", quiet=TRUE))
R2dir="T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R2"
source(paste0(R2dir,"RelativeSelnFuncs2.R"))
2dir="T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R2/"
R2dir="T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R2/"
source(paste0(R2dir,"RelativeSelnFuncs2.R"))
source(paste0(R2dir,"BootstrapAndRandomize2.R"))
source(knitr::purl("FitFuncs2.Rmd", quiet=TRUE))
rm(list=ls())
source(knitr::purl("CatchSimulationFuncs.Rmd", quiet=TRUE))
R2dir="T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R2/"
source(paste0(R2dir,"RelativeSelnFuncs2.R"))
source(paste0(R2dir,"BootstrapAndRandomize2.R"))
source(knitr::purl("FitFuncs2.Rmd", quiet=TRUE))
psplit0=0.5
txt=8 #ggplot specification
#Pars=c(4,0.05); lenseq=46:65
Pars=c(4,0.3); lenseq=21:120
par(las=1)
plot(lenseq,dlnorm(lenseq,Pars[1],Pars[2]),type="l")
BHV.type="BHV"
phi0=0.5 #For H0:r(l)=phi0
nsims=1; nboots=400; Method=2;
do.grobs=T; GrobList=as.list(1:nsims)
lensOutList=as.list(1:nsims)
BootReject=matrix(F,nsims,2); colnames(BootReject)=c("constant","phi0")
do.perm=T; permPval=matrix(NA,nsims,2); permSignif=permPval
r=function(l) rlogist(l,beta=c(-9,0.2),lo=0.45,hi=0.55) #r=NULL
#r=function(l) rquad(l,k=5000)
for(i in 1:nsims) {
print(i)
Catch=SimTows(N=400,nTows=10,Pars,lenseq,p.sd=0.1,eps=0,rmu=r,type="BHV",b=b3) #rmu=rmu,type="PIT",b=b1)
BootOut=boot.SELECT(Catch,bootpreds,nboots,SetID="TowID",Freqs=c("n1","n2"),
method=Method)
Bnds=t( apply(BootOut,2,quant6,prob=c(0.025,0.975)) )
#Test H0:r(l)=phi0
lensOut=lenseq[Bnds[,1]>phi0 | Bnds[,2]<phi0]
lensOutList[[i]]=lensOut
if(length(lensOut)>0) BootReject[i,"phi0"]=T
if(max(Bnds[,1])>min(Bnds[,2])) BootReject[i,"constant"]=T
cat("Sim",i,"Bootstrap rejection:", BootReject[i,])
if(i>1) cat(".... Running boot propn=", apply(BootReject[1:i,],2,mean),"\n")
if(do.grobs) {
Tots=Catch %>% group_by(lgth) %>%
summarize(n1=sum(n1),n2=sum(n2),y=n2/(n1+n2)) %>% data.frame()
GrobList[[i]]=BootPlot(BootOut,lenseq,phi0,Data=Tots) }
if(do.perm) {
ObsStat=CR.devs(Catch)
permStats=permute.SELECT(Catch,CR.devs,400,SetID="TowID",Freqs=c("n1","n2"))
#permDiff=cbind(t(permStats),ObsStat)-ObsStat
permDiff=t(permStats)-ObsStat
permPval[i,]=apply( permDiff,1,function(x) mean(x>=0) )
cat("Permutational p-values",round(permPval[i,],3))
#permPval[i]=mean(c(permStat,ObsStat)>=ObsStat)
#permSignif=mean( permPval[1:i]<=0.05 )
if(i>1) {
permSignif=apply( permPval[1:i,],2,function(x) mean(x<=0.05))
cat(".....  Running perm propn",permSignif,"\n") }
#cat("Perm",ifelse(permPval[i]<=0.05,"Signif","Not signif"),". p=",permSignif,"\n")
} }
BootSignif=apply(BootReject,2,mean)
#SignifLength=sapply(lensOutList,function(x) length(x))
#sum(SignifLength)/(nsims*length(lenseq))
PermReject=permPval<=0.05
PermSignif=apply(PermReject,2,mean)
cat("\nBootstrap rejection rates of Hnull and H0.5 are",BootSignif)
cat("\nPermutation rejection rates of Hnull and H0.5 are",PermSignif)
bootpreds
head(Catch)
quant6
quant6=function(...) quantile(...,type=6)
bootpreds2=function(Catch,lenseq=21:120) {
Fit=fitGAM2(c("lgth","n1","n2"),Catch)
predict(Fit,newdata=data.frame(lgth=lenseq),type="response")
}
ls()
Vnames=c("lgth","n1","n2")
bootpreds2
Vnames=c("lgth","n1","n2")
BHV.type="BHV"
phi0=0.5 #For H0:r(l)=phi0
nsims=1; nboots=400; Method=2;
do.grobs=T; GrobList=as.list(1:nsims)
lensOutList=as.list(1:nsims)
BootReject=matrix(F,nsims,2); colnames(BootReject)=c("constant","phi0")
do.perm=T; permPval=matrix(NA,nsims,2); permSignif=permPval
r=function(l) rlogist(l,beta=c(-9,0.2),lo=0.45,hi=0.55) #r=NULL
#r=function(l) rquad(l,k=5000)
Catch=SimTows(N=400,nTows=10,Pars,lenseq,p.sd=0.1,eps=0,rmu=r,type="BHV",b=b3) #rmu=rmu,type="PIT",b=b1)
BootOut=boot.SELECT2(Vnames,Catch,bootpreds2,haul="TowID",nsim=2)
BootOut=bootSELECT2(Vnames,Catch,bootpreds2,haul="TowID",nsim=2)
FitGAM2(Vnames,Catch)
source(paste0(R2dir,"RelativeSelnFuncs2.R"))
FitGAM2(Vnames,Catch)
fitGAM2(Vnames,Catch)
fitGAM2(Vnames,Catch,useTots=F)
source(paste0(R2dir,"RelativeSelnFuncs2.R"))
fitGAM2(Vnames,Catch,useTots=F)
source(paste0(R2dir,"RelativeSelnFuncs2.R"))
fitGAM2(Vnames,Catch,useTots=F)
BootOut=bootSELECT2(Vnames,Catch,bootpreds2,haul="TowID",nsim=2)
source(paste0(R2dir,"BootstrapAndRandomize2.R"))
BootOut=bootSELECT2(Vnames,Catch,bootpreds2,haul="TowID",nsim=2)
Vnames=c("lgth","n1","n2")
BHV.type="BHV"
phi0=0.5 #For H0:r(l)=phi0
nsims=2; nboots=400; Method=2;
do.grobs=T; GrobList=as.list(1:nsims)
lensOutList=as.list(1:nsims)
BootReject=matrix(F,nsims,2); colnames(BootReject)=c("constant","phi0")
do.perm=T; permPval=matrix(NA,nsims,2); permSignif=permPval
r=function(l) rlogist(l,beta=c(-9,0.2),lo=0.45,hi=0.55) #r=NULL
#r=function(l) rquad(l,k=5000)
for(i in 1:nsims) {
print(i)
Catch=SimTows(N=400,nTows=10,Pars,lenseq,p.sd=0.1,eps=0,rmu=r,type="BHV",b=b3)
#rmu=rmu,type="PIT",b=b1)
fitGAM2(Vnames,Catch,useTots=F)
BootOut=bootSELECT2(Vnames,Catch,bootpreds2,haul="TowID",nsim=200)
Bnds=t( apply(BootOut,2,quant6,prob=c(0.025,0.975)) )
#Test H0:r(l)=phi0
lensOut=lenseq[Bnds[,1]>phi0 | Bnds[,2]<phi0]
lensOutList[[i]]=lensOut
if(length(lensOut)>0) BootReject[i,"phi0"]=T
if(max(Bnds[,1])>min(Bnds[,2])) BootReject[i,"constant"]=T
cat("Sim",i,"Bootstrap rejection:", BootReject[i,])
if(i>1) cat(".... Running boot propn=", apply(BootReject[1:i,],2,mean),"\n")
if(do.grobs) {
Tots=Catch %>% group_by(lgth) %>%
summarize(n1=sum(n1),n2=sum(n2),y=n2/(n1+n2)) %>% data.frame()
GrobList[[i]]=BootPlot(BootOut,lenseq,phi0,Data=Tots) }
if(do.perm) {
ObsStat=CR.devs(Catch)
permStats=permute.SELECT(Catch,CR.devs,400,SetID="TowID",Freqs=c("n1","n2"))
#permDiff=cbind(t(permStats),ObsStat)-ObsStat
permDiff=t(permStats)-ObsStat
permPval[i,]=apply( permDiff,1,function(x) mean(x>=0) )
cat("Permutational p-values",round(permPval[i,],3))
#permPval[i]=mean(c(permStat,ObsStat)>=ObsStat)
#permSignif=mean( permPval[1:i]<=0.05 )
if(i>1) {
permSignif=apply( permPval[1:i,],2,function(x) mean(x<=0.05))
cat(".....  Running perm propn",permSignif,"\n") }
#cat("Perm",ifelse(permPval[i]<=0.05,"Signif","Not signif"),". p=",permSignif,"\n")
} }
BootSignif=apply(BootReject,2,mean)
#SignifLength=sapply(lensOutList,function(x) length(x))
#sum(SignifLength)/(nsims*length(lenseq))
PermReject=permPval<=0.05
PermSignif=apply(PermReject,2,mean)
cat("\nBootstrap rejection rates of Hnull and H0.5 are",BootSignif)
cat("\nPermutation rejection rates of Hnull and H0.5 are",PermSignif)

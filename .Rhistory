setwd("S:/Russell_SSD/ACTIVE/Collaboration/AtlanticScallops/FishRes/Revision")
#Install selfisher from github - could take a few minutes and produces pages and pages of messages
#remotes::install_github("mebrooks/selfisher/selfisher", build_vignette = FALSE)
library(tidyverse)
library(selfisher) #Comment out if problems arise (only used for verification)
SelectLocn="https://www.stat.auckland.ac.nz/~millar/selectware/R/trawls"
#source(paste0(SelectLocn,"/TrawlFunctionsVersion2.0.R"))
source("TrawlFunctionsVersion2.0.R")
data<-read.csv("IndivScallopData.csv", header=T)
#xtabs(~Site+ring_type,data=data)
#Create unique tow number from 1 to 120 (Westpoint=1:60, Cape Tormentine=61:120)
data$tow=data$tow+ifelse(substr(data$Site,1,1)=="W",0,60)
#Convert shell height to mid-height bins of width bin.width.
bin.width=1; eps=1e-6 #eps used in case of rounding error in binning
wk=data$scallop_shell_height
data$height=bin.width*round(data$scallop_shell_height_mm/bin.width-0.5+eps)+bin.width/2
#Calculate height frequencies
df2<-aggregate(count~ring_type+height+tow, data=data, sum)
df2<-reshape(df2, idvar = c("tow","height"), timevar = "ring_type", direction = "wide")
df2[is.na(df2)]=0
names(df2)[3:7]
#[1] "count.14L"   "count.82.6R" "count.82.6S" "count.88.9R" "count.88.9S"
#Use more compact names, R for rubber rings, S for steel.
names(df2)[3:7]=c("ctrl","R83","S83","R89","S89")
df3=df2 %>% group_by(height) %>% summarise(ctrl=sum(ctrl),
R83=sum(R83),S83=sum(S83),
R89=sum(R89),S89=sum(S89))
df3=data.frame(df3)
names(df3)
#Drop heights below 20 mm
df3=df3[df3$height>20,]
df3
jpeg("CtrlSizeDistn.jpg",height=300)
hist(subset(data,subset=c(ring_type=="14L"))$height,breaks=100,
xlab="Shell height (mm)",main="",las=1)
dev.off()
#R83 fits
plotpts=20:125
#plotpts=df3$height #Use for wgt calcs
x0.83=c(-10,0.125,0.6) #Start values for a, b and p
#RL83=ttfit(df3[,c("height","R83","ctrl")],x0=x0.83,type="logit")
#RL83
RR83=ttfit(df3[,c("height","R83","ctrl")],x0=x0.83,type="rich",
details=T,plotlens=plotpts) #Preferred
RR83[c("l","lens","sr")]
#Using selfisher - gives identical result to ttfit
selfRR83=selfisher(R83/(R83+ctrl)~height,total=R83+ctrl,psplit=T,link="Richards",
data=data.frame(df3))
#predict(selfRR83,newdata=data.frame(height=plotpts,R83=1,ctrl=1),type="selection")
summary(selfRR83)[c("logLik","retention","SR")]
#R89 fits are unstable, so fix psplit at RR83 value
#RL89=ttfit(df3[,c("height","R89","ctrl")],x0=x0.89,type="logit",psplit=RR83$p[1])
x0.89=c(-10,0.11,0.6); d.89=5
RR89=ttfit(df3[,c("height","R89","ctrl")],x0=x0.89,type="rich", psplit=RR83$p[1],
delta.pen=0.0001,details=T,plotlens=plotpts)
RR89[c("l","lens","sr")] #Will use bootstrap to get standard errors
#selfisher can't be used as it doesn't permit a user-provided psplit
#S83 fits
#SL83=ttfit(df3[,c("height","S83","ctrl")],x0=x0.83,type="logit")
#SL83
SR83=ttfit(df3[,c("height","S83","ctrl")],x0=x0.83,type="rich",
details=T,plotlens=plotpts) #Preferred
SR83[c("l","lens","sr")]
#Using selfisher  - gives identical result to ttfit
selfSR83=selfisher(S83/(S83+ctrl)~height,total=S83+ctrl,psplit=T,link="Richards",
data=data.frame(df3))
summary(selfSR83)[c("logLik","retention","SR")]
#S89 fits are unstable, so fix psplit at S83 value
#SL89=ttfit(df3[,c("height","S89","ctrl")],x0=x0.89,type="logit",psplit=SR83$p[1])
SR89=ttfit(df3[,c("height","S89","ctrl")],x0=x0.89,type="rich",psplit=SR83$p[1],
delta.pen=0.0001,details=T,plotlens=plotpts)
SR89[c("l","lens","sr")]
#selfisher can't be used as it doesn't permit a user-provided psplit
pdf("DredgeSelectivities.pdf",width=5)
par(mfrow=c(2,1))
plot(plotpts,RR83$r,las=1,type="l",lty=2,
xlab="Scallop height (mm)",ylab="Retention probability")
lines(plotpts,RR89$r,type="l",lty=4)
abline(h=(1:3)/4,lty=3)
title("Rubber washers")
legend(20,1,legend=c("82.6 mm","88.9 mm"),lty=c(2,4),cex=0.6)
plot(plotpts,SR83$r,las=1,type="l",lty=2,
xlab="Scallop height (mm)",ylab="Retention probability")
lines(plotpts,SR89$r,type="l",lty=4)
abline(h=(1:3)/4,lty=3)
title("Steel washers")
legend(20,1,legend=c("82.6 mm","88.9 mm"),lty=c(2,4),cex=0.6)
dev.off()
df3$wgt=exp(-7.8932+2.2604*log(df3$height)) #From Parsons & Davidson 2004
#First rerun fits with plotlens equal to actual height bins
Wgts=matrix(NA,5,3);
rownames(Wgts)=c("ctrl","R83","R89","S83","S89");
colnames(Wgts)=c("midsize","large","all")
#From ctrl
mid=(df3$height>80 & df3$height<90); big=df3$height>90; all=df3$height>80
cat("\n Total wgt in ctrl above 80mm was",sum((df3$ctrl*df3$wgt)[all]),"\n")
Wgts[1,1]=sum((df3$ctrl*df3$wgt)[mid]);
Wgts[1,2]=sum((df3$ctrl*df3$wgt)[big])
Wgts[2,1]=sum((RR83$r*df3$ctrl*df3$wgt)[mid]);
Wgts[2,2]=sum((RR83$r*df3$ctrl*df3$wgt)[big]);
Wgts[3,1]=sum((RR89$r*df3$ctrl*df3$wgt)[mid]);
Wgts[3,2]=sum((RR89$r*df3$ctrl*df3$wgt)[big]);
Wgts[4,1]=sum((SR83$r*df3$ctrl*df3$wgt)[mid]);
Wgts[4,2]=sum((SR83$r*df3$ctrl*df3$wgt)[big]);
Wgts[5,1]=sum((SR89$r*df3$ctrl*df3$wgt)[mid]);
Wgts[5,2]=sum((SR89$r*df3$ctrl*df3$wgt)[big]);
Wgts[,3]=Wgts[,1]+Wgts[,2]
round(Wgts/1000,2)
round(1-Wgts%*%diag(1/Wgts[2,]),3)
MeatWgts=Wgts
df3$wgt=exp(-7.8932+2.2604*log(df3$height)) #From Parsons & Davidson 2004
#First rerun fits with plotlens equal to actual height bins
Wgts=matrix(NA,5,3);
rownames(Wgts)=c("ctrl","R83","R89","S83","S89");
colnames(Wgts)=c("midsize","large","all")
#From ctrl
mid=(df3$height>80 & df3$height<90); big=df3$height>90; all=df3$height>80
cat("\n Total wgt in ctrl above 80mm was",sum((df3$ctrl*df3$wgt)[all]),"\n")
Wgts[1,1]=sum((df3$ctrl*df3$wgt)[mid]);
Wgts[1,2]=sum((df3$ctrl*df3$wgt)[big])
Wgts[2,1]=sum((RR83$r*df3$ctrl*df3$wgt)[mid]);
Wgts[2,2]=sum((RR83$r*df3$ctrl*df3$wgt)[big]);
Wgts[3,1]=sum((RR89$r*df3$ctrl*df3$wgt)[mid]);
Wgts[3,2]=sum((RR89$r*df3$ctrl*df3$wgt)[big]);
Wgts[4,1]=sum((SR83$r*df3$ctrl*df3$wgt)[mid]);
Wgts[4,2]=sum((SR83$r*df3$ctrl*df3$wgt)[big]);
Wgts[5,1]=sum((SR89$r*df3$ctrl*df3$wgt)[mid]);
Wgts[5,2]=sum((SR89$r*df3$ctrl*df3$wgt)[big]);
Wgts[,3]=Wgts[,1]+Wgts[,2]
round(Wgts/1000,2)
round(1-Wgts%*%diag(1/Wgts[2,]),3)
MeatWgts=Wgts
head(df3)
Wgts
RR83$r
RR83
plotpts
ls()
richhood()
richhood
head(df3)
cchood
source('S:/Russell_SSD/ACTIVE/Collaboration/AtlanticScallops/FishRes/Revision/TrawlfunctionsVersion2.0.R')
Wgts[2,1]=sum((rselect(RR83$x,df3$height)*df3$ctrl*df3$wgt)[mid]);
rselect(RR83$x,df3$height)[1:100]
rselect(RR83$x,df3$height)[1:120]
rselect(RR83$x,df3$height)[1:220]
rselect(RR83$x,df3$height)[1:2200]
rselect(RR83$x,df3$height)[1:200]
df3$height[1:200]
dim(df3)
rselect(RR83$x,df3$height)
ls()
plotpts
df3$wgt=exp(-7.8932+2.2604*log(df3$height)) #From Parsons & Davidson 2004
#First rerun fits with plotlens equal to actual height bins
Wgts=matrix(NA,5,3);
rownames(Wgts)=c("ctrl","R83","R89","S83","S89");
colnames(Wgts)=c("midsize","large","all")
#From ctrl
mid=(df3$height>80 & df3$height<90); big=df3$height>90; all=df3$height>80
cat("\n Total wgt in ctrl above 80mm was",sum((df3$ctrl*df3$wgt)[all]),"\n")
Wgts[1,1]=sum((df3$ctrl*df3$wgt)[mid]);
Wgts[1,2]=sum((df3$ctrl*df3$wgt)[big])
Wgts[2,1]=sum((rselect(RR83$x,df3$height)*df3$ctrl*df3$wgt)[mid]);
Wgts[2,2]=sum((rselect(RR83$x,df3$height)*df3$ctrl*df3$wgt)[big]);
Wgts[3,1]=sum((rselect(RR89$x,df3$height)*df3$ctrl*df3$wgt)[mid]);
Wgts[3,2]=sum((rselect(RR89$x,df3$height)*df3$ctrl*df3$wgt)[big]);
Wgts[4,1]=sum((rselect(SR83$x,df3$height)*df3$ctrl*df3$wgt)[mid]);
Wgts[4,2]=sum((rselect(SR83$x,df3$height)*df3$ctrl*df3$wgt)[big]);
Wgts[5,1]=sum((rselect(SR89$x,df3$height)*df3$ctrl*df3$wgt)[mid]);
Wgts[5,2]=sum((rselect(SR89$x,df3$height)*df3$ctrl*df3$wgt)[big]);
Wgts[,3]=Wgts[,1]+Wgts[,2]
round(Wgts/1000,2)
round(1-Wgts%*%diag(1/Wgts[2,]),3)
MeatWgts=Wgts
head(df3,30)
df3$wgt=2e-3*(df3$height-30)^2.2604
#df3$wgt=1 #To count individuals
#First rerun fits with plotlens equal to actual height bins
Wgts=matrix(NA,5,3);
rownames(Wgts)=c("ctrl","R83","R89","S83","S89");
colnames(Wgts)=c("midsize","large","all")
#From ctrl
mid=(df3$height>45 & df3$height<90); big=df3$height>90; all=df3$height>45
cat("\n Total wgt in ctrl above 80mm was",sum((df3$ctrl*df3$wgt)[all]),"\n")
Wgts[1,1]=sum((df3$ctrl*df3$wgt)[mid]);
Wgts[1,2]=sum((df3$ctrl*df3$wgt)[big])
Wgts[2,1]=sum((RR83$r*df3$ctrl*df3$wgt)[mid]);
Wgts[2,2]=sum((RR83$r*df3$ctrl*df3$wgt)[big]);
#Assume egg wgt power is same as for wgt
#Approx fit to egg numbers vs height in Langton&Robinson 1987
df3$wgt=2e-3*(df3$height-30)^2.2604
#df3$wgt=1 #To count individuals
#First rerun fits with plotlens equal to actual height bins
Wgts=matrix(NA,5,3);
rownames(Wgts)=c("ctrl","R83","R89","S83","S89");
colnames(Wgts)=c("midsize","large","all")
#From ctrl
mid=(df3$height>45 & df3$height<90); big=df3$height>90; all=df3$height>45
cat("\n Total wgt in ctrl above 80mm was",sum((df3$ctrl*df3$wgt)[all]),"\n")
Wgts[1,1]=sum((df3$ctrl*df3$wgt)[mid]);
Wgts[1,2]=sum((df3$ctrl*df3$wgt)[big])
Wgts[2,1]=sum((rselect(RR83$x,df3$height)*df3$ctrl*df3$wgt)[mid]);
Wgts[2,2]=sum((rselect(RR83$x,df3$height)*df3$ctrl*df3$wgt)[big]);
Wgts[3,1]=sum((rselect(RR89$x,df3$height)*df3$ctrl*df3$wgt)[mid]);
Wgts[3,2]=sum((rselect(RR89$x,df3$height)*df3$ctrl*df3$wgt)[big]);
Wgts[4,1]=sum((rselect(SR83$x,df3$height)*df3$ctrl*df3$wgt)[mid]);
Wgts[4,2]=sum((rselect(SR83$x,df3$height)*df3$ctrl*df3$wgt)[big]);
Wgts[5,1]=sum((rselect(SR89$x,df3$height)*df3$ctrl*df3$wgt)[mid]);
Wgts[5,2]=sum((rselect(SR89$x,df3$height)*df3$ctrl*df3$wgt)[big]);
Wgts[,3]=Wgts[,1]+Wgts[,2]
round(Wgts/1000,2)
round(1-Wgts%*%diag(1/Wgts[2,]),3) #Relative decrease compared to R83
EggWgts=Wgts
IndexList=list() #List of vectors with row numbers for each tow
uniqTows=unique(df2$tow)
nTows=length(uniqTows)
for(i in 1:nTows) IndexList[[i]]=which(df2$tow %in% uniqTows[i])
BootIndexList=function(IndexList)
unlist(IndexList[sample(1:length(IndexList),replace=T)])
#The bootstrap
nboot=1000
LensR83=matrix(NA,nrow=nboot,ncol=3); colnames(LensR83)=c("L25","L50","L75")
LensR89=LensS83=LensS89=LensR83
deltaPen=0.01 #Small smoothness penalty to give stability to delta parameter
for(i in 1:nboot) {
if(i %% 100 ==0) cat("\n Starting bootstrap",i,"\n")
df2.boot=df2[BootIndexList(IndexList),]
df3.boot=df2.boot %>% group_by(height) %>% summarise(ctrl=sum(ctrl),
R83=sum(R83),S83=sum(S83),
R89=sum(R89),S89=sum(S89))
df3.boot=data.frame(df3.boot)
df3.boot=df3.boot[-(1:2),]
for(k in 2:6) df3.boot[,k]=rpois(nrow(df3.boot),df3.boot[,k])
RR83.b=try( ttfit(df3.boot[,c("height","R83","ctrl")],x0=x0.83,type="rich",
delta.pen=deltaPen,plots=F,verbose=F) )
if(class(RR83.b) != "try-error") LensR83[i,]=RR83.b$lens[,1]
RR89.b=try( ttfit(df3.boot[,c("height","R89","ctrl")],x0=x0.89,type="rich",                                            psplit=RR83.b$p[1],delta.pen=deltaPen,plots=F,verbose=F) )
if(class(RR89.b) != "try-error") LensR89[i,]=RR89.b$lens[,1]
SR83.b=try( ttfit(df3.boot[,c("height","S83","ctrl")],x0=x0.83,type="rich",
delta.pen=deltaPen,plots=F,verbose=F) )
if(class(SR83.b) != "try-error") LensS83[i,]=SR83.b$lens[,1]
SR89.b=try( ttfit(df3.boot[,c("height","S89","ctrl")],x0=x0.89,type="rich",                                             psplit=SR83.b$p[1],delta.pen=deltaPen,plots=F,verbose=F) )
if(class(SR89.b) != "try-error") LensS89[i,]=SR89.b$lens[,1]
}
warnings()
#Assume egg wgt power is same as for wgt
#Approx fit to egg numbers vs height in Langton&Robinson 1987
df3$wgt=2e-3*(df3$height-30)^2.2604
#df3$wgt=1 #To count individuals
#First rerun fits with plotlens equal to actual height bins
Wgts=matrix(NA,5,3);
rownames(Wgts)=c("ctrl","R83","R89","S83","S89");
colnames(Wgts)=c("midsize","large","all")
#From ctrl
mid=(df3$height>45 & df3$height<90); big=df3$height>90; all=df3$height>45
cat("\n Total wgt in ctrl above 80mm was",sum((df3$ctrl*df3$wgt)[all]),"\n")
Wgts[1,1]=sum((df3$ctrl*df3$wgt)[mid]);
Wgts[1,2]=sum((df3$ctrl*df3$wgt)[big])
Wgts[2,1]=sum((rselect(RR83$x,df3$height)*df3$ctrl*df3$wgt)[mid]);
Wgts[2,2]=sum((rselect(RR83$x,df3$height)*df3$ctrl*df3$wgt)[big]);
Wgts[3,1]=sum((rselect(RR89$x,df3$height)*df3$ctrl*df3$wgt)[mid]);
Wgts[3,2]=sum((rselect(RR89$x,df3$height)*df3$ctrl*df3$wgt)[big]);
Wgts[4,1]=sum((rselect(SR83$x,df3$height)*df3$ctrl*df3$wgt)[mid]);
Wgts[4,2]=sum((rselect(SR83$x,df3$height)*df3$ctrl*df3$wgt)[big]);
Wgts[5,1]=sum((rselect(SR89$x,df3$height)*df3$ctrl*df3$wgt)[mid]);
Wgts[5,2]=sum((rselect(SR89$x,df3$height)*df3$ctrl*df3$wgt)[big]);
Wgts[,3]=Wgts[,1]+Wgts[,2]
round(Wgts/1000,2)
round(1-Wgts%*%diag(1/Wgts[2,]),3) #Relative decrease compared to R83
EggWgts=Wgts
df3$wgt=exp(-7.8932+2.2604*log(df3$height)) #From Parsons & Davidson 2004
#First rerun fits with plotlens equal to actual height bins
Wgts=matrix(NA,5,3);
rownames(Wgts)=c("ctrl","R83","R89","S83","S89");
colnames(Wgts)=c("midsize","large","all")
#From ctrl
mid=(df3$height>80 & df3$height<90); big=df3$height>90; all=df3$height>80
cat("\n Total wgt in ctrl above 80mm was",sum((df3$ctrl*df3$wgt)[all]),"\n")
Wgts[1,1]=sum((df3$ctrl*df3$wgt)[mid]);
Wgts[1,2]=sum((df3$ctrl*df3$wgt)[big])
Wgts[2,1]=sum((rselect(RR83$x,df3$height)*df3$ctrl*df3$wgt)[mid]);
Wgts[2,2]=sum((rselect(RR83$x,df3$height)*df3$ctrl*df3$wgt)[big]);
Wgts[3,1]=sum((rselect(RR89$x,df3$height)*df3$ctrl*df3$wgt)[mid]);
Wgts[3,2]=sum((rselect(RR89$x,df3$height)*df3$ctrl*df3$wgt)[big]);
Wgts[4,1]=sum((rselect(SR83$x,df3$height)*df3$ctrl*df3$wgt)[mid]);
Wgts[4,2]=sum((rselect(SR83$x,df3$height)*df3$ctrl*df3$wgt)[big]);
Wgts[5,1]=sum((rselect(SR89$x,df3$height)*df3$ctrl*df3$wgt)[mid]);
Wgts[5,2]=sum((rselect(SR89$x,df3$height)*df3$ctrl*df3$wgt)[big]);
Wgts[,3]=Wgts[,1]+Wgts[,2]
round(Wgts/1000,2)
round(1-Wgts%*%diag(1/Wgts[2,]),3) #Relative decrease compared to R83
MeatWgts=Wgts
pdf("DredgeSelectivities.pdf",width=5)
par(mfrow=c(2,1))
plot(plotpts,RR83$r,las=1,type="l",lty=2,
xlab="Scallop height (mm)",ylab="Retention probability")
lines(plotpts,RR89$r,type="l",lty=4)
abline(h=(1:3)/4,lty=3)
title("Rubber washers")
legend(20,1,legend=c("82.6 mm","88.9 mm"),lty=c(2,4),cex=0.6)
plot(plotpts,SR83$r,las=1,type="l",lty=2,
xlab="Scallop height (mm)",ylab="Retention probability")
lines(plotpts,SR89$r,type="l",lty=4)
abline(h=(1:3)/4,lty=3)
title("Steel washers")
legend(20,1,legend=c("82.6 mm","88.9 mm"),lty=c(2,4),cex=0.6)
dev.off()
#S83 fits
#SL83=ttfit(df3[,c("height","S83","ctrl")],x0=x0.83,type="logit")
#SL83
SR83=ttfit(df3[,c("height","S83","ctrl")],x0=x0.83,type="rich",
details=T,plotlens=plotpts) #Preferred
SR83[c("l","lens","sr")]
#Using selfisher  - gives identical result to ttfit
selfSR83=selfisher(S83/(S83+ctrl)~height,total=S83+ctrl,psplit=T,link="Richards",
data=data.frame(df3))
summary(selfSR83)[c("logLik","retention","SR")]
#S89 fits are unstable, so fix psplit at S83 value
#SL89=ttfit(df3[,c("height","S89","ctrl")],x0=x0.89,type="logit",psplit=SR83$p[1])
SR89=ttfit(df3[,c("height","S89","ctrl")],x0=x0.89,type="rich",psplit=SR83$p[1],
delta.pen=0.0001,details=T,plotlens=plotpts)
SR89[c("l","lens","sr")]
#selfisher can't be used as it doesn't permit a user-provided psplit
#R83 fits
plotpts=20:125
#plotpts=df3$height #Use for wgt calcs
x0.83=c(-10,0.125,0.6) #Start values for a, b and p
#RL83=ttfit(df3[,c("height","R83","ctrl")],x0=x0.83,type="logit")
#RL83
RR83=ttfit(df3[,c("height","R83","ctrl")],x0=x0.83,type="rich",
details=T,plotlens=plotpts) #Preferred
RR83[c("l","lens","sr")]
#Using selfisher - gives identical result to ttfit
selfRR83=selfisher(R83/(R83+ctrl)~height,total=R83+ctrl,psplit=T,link="Richards",
data=data.frame(df3))
#predict(selfRR83,newdata=data.frame(height=plotpts,R83=1,ctrl=1),type="selection")
summary(selfRR83)[c("logLik","retention","SR")]
#R89 fits are unstable, so fix psplit at RR83 value
#RL89=ttfit(df3[,c("height","R89","ctrl")],x0=x0.89,type="logit",psplit=RR83$p[1])
x0.89=c(-10,0.11,0.6); d.89=5
RR89=ttfit(df3[,c("height","R89","ctrl")],x0=x0.89,type="rich", psplit=RR83$p[1],
delta.pen=0.0001,details=T,plotlens=plotpts)
RR89[c("l","lens","sr")] #Will use bootstrap to get standard errors
#selfisher can't be used as it doesn't permit a user-provided psplit
source('S:/Russell_SSD/ACTIVE/Collaboration/AtlanticScallops/FishRes/Revision/TrawlfunctionsVersion2.0.R')
source('S:/Russell_SSD/ACTIVE/Collaboration/AtlanticScallops/FishRes/Revision/TrawlfunctionsVersion2.0.R')
#Install selfisher from github - could take a few minutes and produces pages and pages of messages
#remotes::install_github("mebrooks/selfisher/selfisher", build_vignette = FALSE)
library(tidyverse)
library(selfisher) #Comment out if problems arise (only used for verification)
remotes::install_github("mebrooks/selfisher/selfisher", build_vignette = FALSE)
ls()
devtools::install("S:\Russell_SSD\ACTIVE\CurrentWork\RPackages\SELECT")
devtools::install("S:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT")
library(SELECT)
?select
?tidyverse
ls()
ttfit
library(SELECT)
ttfit
library(tidyverse)
data<-read.csv("IndivScallopData.csv", header=T)
#xtabs(~Site+ring_type,data=data)
#Create unique tow number from 1 to 120 (Westpoint=1:60, Cape Tormentine=61:120)
data$tow=data$tow+ifelse(substr(data$Site,1,1)=="W",0,60)
#Convert shell height to mid-height bins of width bin.width.
bin.width=1; eps=1e-6 #eps used in case of rounding error in binning
wk=data$scallop_shell_height
data$height=bin.width*round(data$scallop_shell_height_mm/bin.width-0.5+eps)+bin.width/2
#Calculate height frequencies
df2<-aggregate(count~ring_type+height+tow, data=data, sum)
df2<-reshape(df2, idvar = c("tow","height"), timevar = "ring_type", direction = "wide")
df2[is.na(df2)]=0
names(df2)[3:7]
#[1] "count.14L"   "count.82.6R" "count.82.6S" "count.88.9R" "count.88.9S"
#Use more compact names, R for rubber rings, S for steel.
names(df2)[3:7]=c("ctrl","R83","S83","R89","S89")
df3=df2 %>% group_by(height) %>% summarise(ctrl=sum(ctrl),
R83=sum(R83),S83=sum(S83),
R89=sum(R89),S89=sum(S89))
df3=data.frame(df3)
names(df3)
#Drop heights below 20 mm
df3=df3[df3$height>20,]
df3
jpeg("CtrlSizeDistn.jpg",height=300)
hist(subset(data,subset=c(ring_type=="14L"))$height,breaks=100,
xlab="Shell height (mm)",main="",las=1)
dev.off()
#R83 fits
plotpts=20:125
#plotpts=df3$height #Use for wgt calcs
x0.83=c(-10,0.125,0.6) #Start values for a, b and p
#RL83=ttfit(df3[,c("height","R83","ctrl")],x0=x0.83,type="logit")
#RL83
RR83=ttfit(df3[,c("height","R83","ctrl")],x0=x0.83,type="rich",
details=T,plotlens=plotpts) #Preferred
RR83[c("l","lens","sr")]
#Using selfisher - gives identical result to ttfit
selfRR83=selfisher(R83/(R83+ctrl)~height,total=R83+ctrl,psplit=T,link="Richards",
data=data.frame(df3))
library(selfisher) #Comment out if problems arise (only used for verification)
#R83 fits
plotpts=20:125
#plotpts=df3$height #Use for wgt calcs
x0.83=c(-10,0.125,0.6) #Start values for a, b and p
#RL83=ttfit(df3[,c("height","R83","ctrl")],x0=x0.83,type="logit")
#RL83
RR83=ttfit(df3[,c("height","R83","ctrl")],x0=x0.83,type="rich",
details=T,plotlens=plotpts) #Preferred
RR83[c("l","lens","sr")]
#Using selfisher - gives identical result to ttfit
selfRR83=selfisher(R83/(R83+ctrl)~height,total=R83+ctrl,psplit=T,link="Richards",
data=data.frame(df3))
#predict(selfRR83,newdata=data.frame(height=plotpts,R83=1,ctrl=1),type="selection")
summary(selfRR83)[c("logLik","retention","SR")]
#R89 fits are unstable, so fix psplit at RR83 value
#RL89=ttfit(df3[,c("height","R89","ctrl")],x0=x0.89,type="logit",psplit=RR83$p[1])
x0.89=c(-10,0.11,0.6); d.89=5
RR89=ttfit(df3[,c("height","R89","ctrl")],x0=x0.89,type="rich", psplit=RR83$p[1],
delta.pen=0.0001,details=T,plotlens=plotpts)
RR89[c("l","lens","sr")] #Will use bootstrap to get standard errors
#selfisher can't be used as it doesn't permit a user-provided psplit
#S83 fits
#SL83=ttfit(df3[,c("height","S83","ctrl")],x0=x0.83,type="logit")
#SL83
SR83=ttfit(df3[,c("height","S83","ctrl")],x0=x0.83,type="rich",
details=T,plotlens=plotpts) #Preferred
SR83[c("l","lens","sr")]
#Using selfisher  - gives identical result to ttfit
selfSR83=selfisher(S83/(S83+ctrl)~height,total=S83+ctrl,psplit=T,link="Richards",
data=data.frame(df3))
summary(selfSR83)[c("logLik","retention","SR")]
#S89 fits are unstable, so fix psplit at S83 value
#SL89=ttfit(df3[,c("height","S89","ctrl")],x0=x0.89,type="logit",psplit=SR83$p[1])
SR89=ttfit(df3[,c("height","S89","ctrl")],x0=x0.89,type="rich",psplit=SR83$p[1],
delta.pen=0.0001,details=T,plotlens=plotpts)
SR89[c("l","lens","sr")]
#selfisher can't be used as it doesn't permit a user-provided psplit
pdf("DredgeSelectivities.pdf",width=5)
par(mfrow=c(2,1))
plot(plotpts,RR83$r,las=1,type="l",lty=2,
xlab="Scallop height (mm)",ylab="Retention probability")
lines(plotpts,RR89$r,type="l",lty=4)
abline(h=(1:3)/4,lty=3)
title("Rubber washers")
legend(20,1,legend=c("82.6 mm","88.9 mm"),lty=c(2,4),cex=0.6)
plot(plotpts,SR83$r,las=1,type="l",lty=2,
xlab="Scallop height (mm)",ylab="Retention probability")
lines(plotpts,SR89$r,type="l",lty=4)
abline(h=(1:3)/4,lty=3)
title("Steel washers")
legend(20,1,legend=c("82.6 mm","88.9 mm"),lty=c(2,4),cex=0.6)
dev.off()
df3$wgt=exp(-7.8932+2.2604*log(df3$height)) #From Parsons & Davidson 2004
#First rerun fits with plotlens equal to actual height bins
Wgts=matrix(NA,5,3);
rownames(Wgts)=c("ctrl","R83","R89","S83","S89");
colnames(Wgts)=c("midsize","large","all")
#From ctrl
mid=(df3$height>80 & df3$height<90); big=df3$height>90; all=df3$height>80
cat("\n Total wgt in ctrl above 80mm was",sum((df3$ctrl*df3$wgt)[all]),"\n")
Wgts[1,1]=sum((df3$ctrl*df3$wgt)[mid]);
Wgts[1,2]=sum((df3$ctrl*df3$wgt)[big])
Wgts[2,1]=sum((rselect(RR83$x,df3$height)*df3$ctrl*df3$wgt)[mid]);
clark.df=read.table("Clark113_20min.dat",head=T)[,c(1,3,2)]
setwd("S:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R")
clark.df=read.table("Clark113_20min.dat",head=T)[,c(1,3,2)]
clark.df
dim(clark.df)
?save
Clark.df=read.table("Clark113_20min.dat",head=T)[,c(1,3,2)]
save(Clark.df,file="data/Clark.RData")
save(Clark.df,file="../data/Clark.RData")
Pope.df=read.table("haddock.dat",head=T)[,c(1,3,2)]
save(Pope.df,file="../data/Pope.RData")
dim(Pope.df)
Pope.df
setwd(paste0("S:/Russell_SSD/ACTIVE/CurrentWork/RPackages/",PkgName))
PkgName="SELECT"
setwd(paste0("S:/Russell_SSD/ACTIVE/CurrentWork/RPackages/",PkgName))
roxygen2::roxygenise() #or devtools::document()
roxygen2::roxygenise() #or devtools::document()
roxygen2::roxygenise() #or devtools::document()
roxygen2::roxygenise() #or devtools::document()
roxygen2::roxygenise() #or devtools::document()
roxygen2::roxygenise() #or devtools::document()
roxygen2::roxygenise() #or devtools::document()
load("S:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/data/Clark.RData")
ls()
roxygen2::roxygenise() #or devtools::document()
setwd("S:/Russell_SSD/ACTIVE/CurrentWork/RPackages")
setwd(paste0("S:/Russell_SSD/ACTIVE/CurrentWork/RPackages/",PkgName))
roxygen2::roxygenise() #or devtools::document()
getwd
getwd()
setwd("S:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R")
Clark=read.table("Clark113_20min.dat",head=T)[,c(1,3,2)]
save(Clark,file="../data/Clark.RData")
Pope=read.table("haddock.dat",head=T)[,c(1,3,2)]
save(Pope,file="../data/Pope.RData")
setwd(paste0("S:/Russell_SSD/ACTIVE/CurrentWork/RPackages/",PkgName))
roxygen2::roxygenise() #or devtools::document()
roxygen2::roxygenise() #or devtools::document()
exp(500)
exp(-500)
exp(-1000)
exp(1000)
roxygen2::roxygenise() #or devtools::document()

dir()
install.package("./FDR")
library(FDR)
library("./FDR")
install.packages("./FDR")
ls()
FDR
library(FDR)
usethis
glmmTMB
create_package
usethis::create_package("./BootstrapHauls")
usethis::use.package("data.table")
usethis::use_package("data.table")
?usethis
usethis::create_package("./SplineNCAP")
install.packages(c("backports", "bootstrap", "callr", "car", "carData", "cli", "clipr", "curl", "data.table", "devtools", "digest", "doParallel", "dplyr", "ellipsis", "foreach", "ggplot2", "gmm", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "iterators", "KernSmooth", "knitr", "later", "maptools", "markdown", "modelr", "MuMIn", "openssl", "openxlsx", "pillar", "pkgbuild", "pkgconfig", "plyr", "processx", "promises", "purrr", "quantreg", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "rgl", "rlang", "rmarkdown", "roxygen2", "rvest", "scales", "selectr", "shiny", "sp", "sys", "testthat", "tidyr", "tidyverse", "tinytex", "vctrs", "VGAM", "webshot", "whisker", "xfun", "xml2", "zip"))
?use_package
usethis::create_package("SplineCAP")
View(D)
install.packages("usethis")
library(usethis)
library(installr)
updateR()
PkgName="SELECT"
#Create package folder structure (and opens 2nd RStudio for the project)
#usethis::create_package(PkgName)
setwd(paste0("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/",PkgName))
#Add some details to the DESCRIPTION file: CAUTION, will overwrite
#usethis::use_description(fields=list(
#  `Authors@R` = 'person("Russell", "Millar", email = "r.millar@auckland.ac.nz",
#                 role = c("aut", "cre"),
#                 comment = c(ORCID = "0000-0002-1121-8721"))'
#  ) )
#Add dependencies, if any, to the DESCRIPTION file
usethis::use_package("tidyverse",type="imports")
usethis::use_package("MuMin",type="imports")
#Add dependencies, if any, to the DESCRIPTION file
usethis::use_package("tidyverse",type="imports")
usethis::use_package("MuMIn",type="imports")
roxygen2::roxygenise() #or devtools::document()
usethis::use_version()
remotes::install_github("rbmillar/SELECT")
#Functions
require(SELECT)
require(tidyverse)
require(mgcv)
require(MuMIn)
options(na.action="na.fail") #For dredge safety
#All four files are formatted as per 'RawDF' in Russell's code
#Set my directory and call in a file
##First experiment 1: just call in each species sequentially
Expt=1
Species=c("ESW","Stout")[2]
RawDf <- read.csv(paste0(Species,"ex",Expt,".csv"))
RawDf=RawDf[RawDf$lgth<28.5,]#zero catches
lenseq=sort(unique(RawDf$lgth))
head(RawDf)
###Set up the boot function and the r-squared function
bootPredn=function(data,var.names,q.names,k=4) {
SplineFit=SplineSELECT(data,var.names,q.names,k=k,quasi=Q)
predict(SplineFit,newdata=data.frame(lgth=lenseq),type="response") }
permRsq=function(data,var.names,q.names,k=4) {
SplineFit=SplineSELECT(data,var.names,q.names,k=k,quasi=Q)
summary(SplineFit)$r.sq }
polyPredn=function(data,var.names,q.names) {
PolyFit=PolySELECT(data,var.names,q.names,q.ODadjust=F,All=T)$avg.fit
#predict(PolyFit,newdata=data.frame(x=unique(Catch$lgth)),type="response")
predict(PolyFit,type="response")
}
###############
bootPredn
SplineSELECT
###Set up the boot function and the r-squared function
bootPredn=function(data,var.names,q.names,k=4) {
SplineFit=SplineSELECT(data,var.names,q.names,k=k)
predict(SplineFit,newdata=data.frame(lgth=lenseq),type="response") }
permRsq=function(data,var.names,q.names,k=4) {
SplineFit=SplineSELECT(data,var.names,q.names,k=k)
summary(SplineFit)$r.sq }
polyPredn=function(data,var.names,q.names) {
PolyFit=PolySELECT(data,var.names,q.names,q.ODadjust=F,All=T)$avg.fit
#predict(PolyFit,newdata=data.frame(x=unique(Catch$lgth)),type="response")
predict(PolyFit,type="response")
}
###############
#All four files are formatted as per 'RawDF' in Russell's code
Expt=1
Species=c("ESW","Stout")[1]
RawDf <- read.csv(paste0(Species,"ex",Expt,".csv"))
RawDf=RawDf[RawDf$lgth<28.5,]#zero catches
lenseq=sort(unique(RawDf$lgth))
head(RawDf)
##Format the data
Catch=SELECT.FORMAT(RawDf,by=c("TowID","Day","lgth","Gear"),
gear="Gear",freq="n",q.name="Q",paired=F)
#names(Catch)
if(Expt==1) { Vnames=c("lgth","n37mm","nT90"); qnames=c("Q37mm","QT90") }
if(Expt==2) { Vnames=c("lgth","n37mm","n46mm"); qnames=c("Q37mm","Q46mm") }
Tots=Raw2Tots(Catch,Vnames,qnames) #|> mutate(y=nT90/(nT90+n37mm))
Fit4=SplineSELECT(Catch,Vnames,qnames,k=4,quasi=F)
Fit5=SplineSELECT(Catch,Vnames,qnames,k=5,quasi=F)
Fit6=SplineSELECT(Catch,Vnames,qnames,k=6,quasi=F) #Overfits
Fitted=bootPredn(Catch,Vnames,qnames,k=4)
#Fitted=polyPredn(Catch,Vnames,qnames) #Very ugly using Herrmann defaults
plot(lenseq,Fitted,type="l",ylim=c(0,1))
abline(h=(1:3)/4,lty=3)
Fit4=SplineSELECT(Catch,Vnames,qnames,k=4,quasi=F)
Fit5=SplineSELECT(Catch,Vnames,qnames,k=5,quasi=F)
Fit6=SplineSELECT(Catch,Vnames,qnames,k=6,quasi=F) #Overfits
Fitted=bootPredn(Catch,Vnames,qnames,k=5)
#Fitted=polyPredn(Catch,Vnames,qnames) #Very ugly using Herrmann defaults
plot(lenseq,Fitted,type="l",ylim=c(0,1))
abline(h=(1:3)/4,lty=3)
Fit4=SplineSELECT(Catch,Vnames,qnames,k=4,quasi=F)
Fit5=SplineSELECT(Catch,Vnames,qnames,k=5,quasi=F)
Fit6=SplineSELECT(Catch,Vnames,qnames,k=6,quasi=F) #Overfits
Fitted=bootPredn(Catch,Vnames,qnames,k=4)
#Fitted=polyPredn(Catch,Vnames,qnames) #Very ugly using Herrmann defaults
plot(lenseq,Fitted,type="l",ylim=c(0,1))
abline(h=(1:3)/4,lty=3)
Fitted=bootPredn(Catch,Vnames,qnames,k=4,q.ODadjust=F)
###Set up the boot function and the r-squared function
bootPredn=function(data,var.names,q.names,k=4,q.ODadjust=T) {
SplineFit=SplineSELECT(data,var.names,q.names,k=k,q.ODadjust=q.ODadjust)
predict(SplineFit,newdata=data.frame(lgth=lenseq),type="response") }
permRsq=function(data,var.names,q.names,k=4) {
SplineFit=SplineSELECT(data,var.names,q.names,k=k)
summary(SplineFit)$r.sq }
polyPredn=function(data,var.names,q.names) {
PolyFit=PolySELECT(data,var.names,q.names,q.ODadjust=F,All=T)$avg.fit
#predict(PolyFit,newdata=data.frame(x=unique(Catch$lgth)),type="response")
predict(PolyFit,type="response")
}
###############
Fitted=bootPredn(Catch,Vnames,qnames,k=4,q.ODadjust=F)
#Fitted=polyPredn(Catch,Vnames,qnames) #Very ugly using Herrmann defaults
plot(lenseq,Fitted,type="l",ylim=c(0,1))
abline(h=(1:3)/4,lty=3)
Fit4=SplineSELECT(Catch,Vnames,qnames,k=4,quasi=F)
Fit5=SplineSELECT(Catch,Vnames,qnames,k=5,quasi=F)
Fit6=SplineSELECT(Catch,Vnames,qnames,k=6,quasi=F) #Overfits
Fitted=bootPredn(Catch,Vnames,qnames,k=4,q.ODadjust=T)
#Fitted=polyPredn(Catch,Vnames,qnames) #Very ugly using Herrmann defaults
plot(lenseq,Fitted,type="l",ylim=c(0,1))
abline(h=(1:3)/4,lty=3)
Fit4=SplineSELECT(Catch,Vnames,qnames,k=4,quasi=F)
Fit5=SplineSELECT(Catch,Vnames,qnames,k=5,quasi=F)
Fit6=SplineSELECT(Catch,Vnames,qnames,k=6,quasi=F) #Overfits
Fitted=bootPredn(Catch,Vnames,qnames) #,k=4,q.ODadjust=T)
#Fitted=polyPredn(Catch,Vnames,qnames) #Very ugly using Herrmann defaults
plot(lenseq,Fitted,type="l",ylim=c(0,1))
abline(h=(1:3)/4,lty=3)
##Bootstrap approach (no bootstrapping of day owing to unequal effort)
WHI.BootOut2=bootSELECT(Catch,Vnames,bootPredn,haul="TowID",nsim=1000,paired=F,
q.names=qnames,gear="Gear")
pdf("NewStout1.pdf")
BootPlot(WHI.BootOut2,lenseq,Fitted,Data=Tots)
pdf(paste0(Species,Expt,".pdf"),width=5,height=3.5)
BootPlot(BootOut,lenseq,Fitted,Data=Tots)
##Bootstrap approach (no bootstrapping of day owing to unequal effort)
BootOut=bootSELECT(Catch,Vnames,bootPredn,haul="TowID",nsim=1000,paired=F,
q.names=qnames,gear="Gear")
pdf(paste0(Species,Expt,".pdf"),width=5,height=3.5)
BootPlot(BootOut,lenseq,Fitted,Data=Tots)
Fitted
Tots=Raw2Tots(Catch,Vnames,qnames) |> mutate(y=nT90/(nT90+n37mm))
pdf(paste0(Species,Expt,".pdf"),width=5,height=3.5)
BootPlot(BootOut,lenseq,Fitted,Data=Tots)
dev.off()
#All four files are formatted as per 'RawDF' in Russell's code
Expt=1
Species=c("ESW","Stout")[2]
RawDf <- read.csv(paste0(Species,"ex",Expt,".csv"))
RawDf=RawDf[RawDf$lgth<28.5,]#zero catches
lenseq=sort(unique(RawDf$lgth))
head(RawDf)
##Format the data
Catch=SELECT.FORMAT(RawDf,by=c("TowID","Day","lgth","Gear"),
gear="Gear",freq="n",q.name="Q",paired=F)
#names(Catch)
if(Expt==1) { Vnames=c("lgth","n37mm","nT90"); qnames=c("Q37mm","QT90") }
if(Expt==2) { Vnames=c("lgth","n37mm","n46mm"); qnames=c("Q37mm","Q46mm") }
Tots=Raw2Tots(Catch,Vnames,qnames) |> mutate(y=nT90/(nT90+n37mm))
Fit4=SplineSELECT(Catch,Vnames,qnames,k=4,quasi=F)
Fit5=SplineSELECT(Catch,Vnames,qnames,k=5,quasi=F)
Fit6=SplineSELECT(Catch,Vnames,qnames,k=6,quasi=F) #Overfits
Fitted=bootPredn(Catch,Vnames,qnames) #,k=4,q.ODadjust=T)
#Fitted=polyPredn(Catch,Vnames,qnames) #Very ugly using Herrmann defaults
plot(lenseq,Fitted,type="l",ylim=c(0,1))
abline(h=(1:3)/4,lty=3)
##Bootstrap approach (no bootstrapping of day owing to unequal effort)
BootOut=bootSELECT(Catch,Vnames,bootPredn,haul="TowID",nsim=1000,paired=F,
q.names=qnames,gear="Gear")
pdf(paste0(Species,Expt,".pdf"),width=5,height=3.5)
BootPlot(BootOut,lenseq,Fitted,Data=Tots)
dev.off()
#All four files are formatted as per 'RawDF' in Russell's code
Expt=2
Species=c("ESW","Stout")[1]
RawDf <- read.csv(paste0(Species,"ex",Expt,".csv"))
RawDf=RawDf[RawDf$lgth<28.5,]#zero catches
lenseq=sort(unique(RawDf$lgth))
head(RawDf)
##Format the data
Catch=SELECT.FORMAT(RawDf,by=c("TowID","Day","lgth","Gear"),
gear="Gear",freq="n",q.name="Q",paired=F)
#names(Catch)
if(Expt==1) { Vnames=c("lgth","n37mm","nT90"); qnames=c("Q37mm","QT90") }
if(Expt==2) { Vnames=c("lgth","n37mm","n46mm"); qnames=c("Q37mm","Q46mm") }
Tots=Raw2Tots(Catch,Vnames,qnames) |> mutate(y=nT90/(nT90+n37mm))
#All four files are formatted as per 'RawDF' in Russell's code
Expt=2
Species=c("ESW","Stout")[1]
RawDf <- read.csv(paste0(Species,"ex",Expt,".csv"))
RawDf=RawDf[RawDf$lgth<28.5,]#zero catches
lenseq=sort(unique(RawDf$lgth))
head(RawDf)
##Format the data
Catch=SELECT.FORMAT(RawDf,by=c("TowID","Day","lgth","Gear"),
gear="Gear",freq="n",q.name="Q",paired=F)
#names(Catch)
if(Expt==1) {
Vnames=c("lgth","n37mm","nT90"); qnames=c("Q37mm","QT90")
Tots=Raw2Tots(Catch,Vnames,qnames) |> mutate(y=nT90/(nT90+n37mm))}
if(Expt==2) {
Vnames=c("lgth","n37mm","n46mm"); qnames=c("Q37mm","Q46mm")
Tots=Raw2Tots(Catch,Vnames,qnames) |> mutate(y=n46mm/(n46mm+n37mm))}}
#All four files are formatted as per 'RawDF' in Russell's code
Expt=2
Species=c("ESW","Stout")[1]
RawDf <- read.csv(paste0(Species,"ex",Expt,".csv"))
RawDf=RawDf[RawDf$lgth<28.5,]#zero catches
lenseq=sort(unique(RawDf$lgth))
head(RawDf)
##Format the data
Catch=SELECT.FORMAT(RawDf,by=c("TowID","Day","lgth","Gear"),
gear="Gear",freq="n",q.name="Q",paired=F)
#names(Catch)
if(Expt==1) {
Vnames=c("lgth","n37mm","nT90"); qnames=c("Q37mm","QT90")
Tots=Raw2Tots(Catch,Vnames,qnames) |> mutate(y=nT90/(nT90+n37mm))}
if(Expt==2) {
Vnames=c("lgth","n37mm","n46mm"); qnames=c("Q37mm","Q46mm")
Tots=Raw2Tots(Catch,Vnames,qnames) |> mutate(y=n46mm/(n46mm+n37mm))}
Fit4=SplineSELECT(Catch,Vnames,qnames,k=4,quasi=F)
Fit5=SplineSELECT(Catch,Vnames,qnames,k=5,quasi=F)
Fit6=SplineSELECT(Catch,Vnames,qnames,k=6,quasi=F) #Overfits
Fitted=bootPredn(Catch,Vnames,qnames) #,k=4,q.ODadjust=T)
#Fitted=polyPredn(Catch,Vnames,qnames) #Very ugly using Herrmann defaults
plot(lenseq,Fitted,type="l",ylim=c(0,1))
abline(h=(1:3)/4,lty=3)
##Bootstrap approach (no bootstrapping of day owing to unequal effort)
BootOut=bootSELECT(Catch,Vnames,bootPredn,haul="TowID",nsim=1000,paired=F,
q.names=qnames,gear="Gear")
pdf(paste0(Species,Expt,".pdf"),width=5,height=3.5)
BootPlot(BootOut,lenseq,Fitted,Data=Tots)
dev.off()
#All four files are formatted as per 'RawDF' in Russell's code
Expt=2
Species=c("ESW","Stout")[2]
RawDf <- read.csv(paste0(Species,"ex",Expt,".csv"))
RawDf=RawDf[RawDf$lgth<28.5,]#zero catches
lenseq=sort(unique(RawDf$lgth))
head(RawDf)
##Format the data
Catch=SELECT.FORMAT(RawDf,by=c("TowID","Day","lgth","Gear"),
gear="Gear",freq="n",q.name="Q",paired=F)
#names(Catch)
if(Expt==1) {
Vnames=c("lgth","n37mm","nT90"); qnames=c("Q37mm","QT90")
Tots=Raw2Tots(Catch,Vnames,qnames) |> mutate(y=nT90/(nT90+n37mm))}
if(Expt==2) {
Vnames=c("lgth","n37mm","n46mm"); qnames=c("Q37mm","Q46mm")
Tots=Raw2Tots(Catch,Vnames,qnames) |> mutate(y=n46mm/(n46mm+n37mm))}
Fit4=SplineSELECT(Catch,Vnames,qnames,k=4,quasi=F)
Fit5=SplineSELECT(Catch,Vnames,qnames,k=5,quasi=F)
Fit6=SplineSELECT(Catch,Vnames,qnames,k=6,quasi=F) #Overfits
Fitted=bootPredn(Catch,Vnames,qnames) #,k=4,q.ODadjust=T)
#Fitted=polyPredn(Catch,Vnames,qnames) #Very ugly using Herrmann defaults
plot(lenseq,Fitted,type="l",ylim=c(0,1))
abline(h=(1:3)/4,lty=3)
##Bootstrap approach (no bootstrapping of day owing to unequal effort)
BootOut=bootSELECT(Catch,Vnames,bootPredn,haul="TowID",nsim=1000,paired=F,
q.names=qnames,gear="Gear")
pdf(paste0(Species,Expt,".pdf"),width=5,height=3.5)
BootPlot(BootOut,lenseq,Fitted,Data=Tots)
dev.off()
#All four files are formatted as per 'RawDF' in Russell's code
Expt=1
Species=c("ESW","Stout")[1]
RawDf <- read.csv(paste0(Species,"ex",Expt,".csv"))
RawDf=RawDf[RawDf$lgth<28.5,]#zero catches
lenseq=sort(unique(RawDf$lgth))
head(RawDf)
##Format the data
Catch=SELECT.FORMAT(RawDf,by=c("TowID","Day","lgth","Gear"),
gear="Gear",freq="n",q.name="Q",paired=F)
#names(Catch)
if(Expt==1) {
Vnames=c("lgth","n37mm","nT90"); qnames=c("Q37mm","QT90")
Tots=Raw2Tots(Catch,Vnames,qnames) |> mutate(y=nT90/(nT90+n37mm))}
if(Expt==2) {
Vnames=c("lgth","n37mm","n46mm"); qnames=c("Q37mm","Q46mm")
Tots=Raw2Tots(Catch,Vnames,qnames) |> mutate(y=n46mm/(n46mm+n37mm))}
ObsRsq=permRsq(Catch,Vnames,qnames)
cat("\nThe observed r-square is",ObsRsq,"\n")
PermRsq1=permSELECT(Catch,Vnames,permRsq,haul="TowID",nsim=1000,paired=F,
gear="Gear",q.names=qnames,block="Day")
pval=mean(ObsRsq<=PermRsq1)
cat("\nThe p-value for length-independent catch share is",pval,"\n")
#All four files are formatted as per 'RawDF' in Russell's code
Expt=2
Species=c("ESW","Stout")[2]
RawDf <- read.csv(paste0(Species,"ex",Expt,".csv"))
RawDf=RawDf[RawDf$lgth<28.5,]#zero catches
lenseq=sort(unique(RawDf$lgth))
head(RawDf)
##Format the data
Catch=SELECT.FORMAT(RawDf,by=c("TowID","Day","lgth","Gear"),
gear="Gear",freq="n",q.name="Q",paired=F)
#names(Catch)
if(Expt==1) {
Vnames=c("lgth","n37mm","nT90"); qnames=c("Q37mm","QT90")
Tots=Raw2Tots(Catch,Vnames,qnames) |> mutate(y=nT90/(nT90+n37mm))}
if(Expt==2) {
Vnames=c("lgth","n37mm","n46mm"); qnames=c("Q37mm","Q46mm")
Tots=Raw2Tots(Catch,Vnames,qnames) |> mutate(y=n46mm/(n46mm+n37mm))}
ObsRsq=permRsq(Catch,Vnames,qnames)
cat("\nThe observed r-square is",ObsRsq,"\n")
PermRsq1=permSELECT(Catch,Vnames,permRsq,haul="TowID",nsim=1000,paired=F,
gear="Gear",q.names=qnames,block="Day")
pval=mean(ObsRsq<=PermRsq1)
cat("\nThe p-value for length-independent catch share is",pval,"\n")
Expt
Species
ObsRsq=permRsq(Catch,Vnames,qnames)
cat("\nThe observed r-square is",ObsRsq,"\n")
PermRsq1=permSELECT(Catch,Vnames,permRsq,haul="TowID",nsim=1000,paired=F,
gear="Gear",q.names=qnames,block="Day")
pval=mean(ObsRsq<=PermRsq1)
cat("\nThe p-value for length-independent catch share is",pval,"\n")
summary(Fit4)
summary(Fit4)$dispersion
Fit4=SplineSELECT(Catch,Vnames,qnames,k=4,quasi=T)
summary(Fit4)$dispersion
BootOut

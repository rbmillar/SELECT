#BootOut=bootSELECT(Fit,bootPredn,haul="TowID",nsim=nboots)
Bnds=t( apply(BootOut,2,quantile,prob=c(0.025,0.975),type=6) )
#Test H0:r(l)=phi0
lensOut=lenseq[Bnds[,1]>phi0 | Bnds[,2]<phi0]
lensOutList[[i]]=lensOut
if(length(lensOut)>0) BootReject[i,"phi0"]=T
if(max(Bnds[,1])>min(Bnds[,2])) BootReject[i,"constant"]=T
cat("Sim",i,"Bootstrap rejection:", BootReject[i,])
if(i>1) cat(".... Running boot propn=", apply(BootReject[1:i,],2,mean),"\n")
if(do.grobs) {
Tots=Catch %>% group_by(lgth) %>%
summarize(n1=sum(n1),n2=sum(n2),y=n2/(n1+n2)) %>% data.frame()
GrobList[[i]]=BootPlot(BootOut,lenseq,r(lenseq),Data=Tots) } }
if(do.perm) {
ObsStat=permLRT(Catch,Vnames)
PermOut=permSELECT(Catch,Vnames,permLRT,haul="TowID",nsim=nperms)
permPval[i,1]=calcPermP(ObsStat[1],PermOut[,1])
permPval[i,2]=calcPermP(ObsStat[2],PermOut[,2])
#permDiff=cbind(t(PermOut),ObsStat)-ObsStat
#permDiff=t(PermOut)-ObsStat
#permPval[i,]=apply( permDiff,1,function(x) mean(x>=0) )
cat("Permutational p-values",round(permPval[i,],3))
#permPval[i]=mean(c(PermOut,ObsStat)>=ObsStat)
#permSignif=mean( permPval[1:i]<=0.05 )
if(i>1) {
permSignif=apply( permPval[1:i,],2,function(x) mean(x<=0.05))
cat(".....  Running perm propn",permSignif,"\n") }
#cat("Perm",ifelse(permPval[i]<=0.05,"Signif","Not signif"),". p=",permSignif,"\n")
} }
BootSignif=apply(BootReject,2,mean)
SignifLength=sapply(lensOutList,function(x) length(x))
sum(SignifLength)/(nsims*length(lenseq))
PermReject=permPval<=0.05; colnames(PermReject)=c("constant","phi0")
PermSignif=apply(PermReject,2,mean)
cat("\nBootstrap rejection rates of Hnull and H0.5 are",BootSignif)
cat("\nPermutation rejection rates of Hnull and H0.5 are",PermSignif)
Type=2 #1 for Type I error or 2 for power analysis
Vnames=c("lgth","n1","n2")
BHV.type="BHV"; #BHV.type="PIT"
phi0=0.5
Method=2 #Spline
if(Type==1) { eps.var=0.05; p.sd=0.1; N=400; nTows=10;
r=function(l,phi0=0.5) rep(phi0,length(l))  }
if(Type!=1) {
eps.var=0; p.sd=0.1; N=1000; nTows=10; a=-4.5; b=0.1; lo=0.5; hi=0.6
r=function(l) rlogist(l,beta=c(a,b),lo=lo,hi=hi) }
#r=function(l) rquad(l,k=5000)
nsims=1; nboots=1000; nperms=1000
do.grobs=T; GrobList=as.list(1:nsims)
lensOutList=as.list(1:nsims)
do.boot=T
BootReject=matrix(F,nsims,2); colnames(BootReject)=c("constant","phi0")
do.perm=T; permPval=matrix(NA,nsims,2); permSignif=permPval
for(i in 1:nsims) {
print(i)
Catch=SimTows(N=N,nTows=nTows,Pars,lenseq,p.sd=p.sd,eps=eps.var,rmu=r,
type=BHV.type,b=b4)
#Fit=SplineSELECT(Catch,c("lgth","n1","n2"))
if(do.boot) {
BootOut=bootSELECT(Catch,Vnames,bootPredn,haul="TowID",nsim=nboots)
#BootOut=bootSELECT(Fit,bootPredn,haul="TowID",nsim=nboots)
Bnds=t( apply(BootOut,2,quantile,prob=c(0.025,0.975),type=6) )
#Test H0:r(l)=phi0
lensOut=lenseq[Bnds[,1]>phi0 | Bnds[,2]<phi0]
lensOutList[[i]]=lensOut
if(length(lensOut)>0) BootReject[i,"phi0"]=T
if(max(Bnds[,1])>min(Bnds[,2])) BootReject[i,"constant"]=T
cat("Sim",i,"Bootstrap rejection:", BootReject[i,])
if(i>1) cat(".... Running boot propn=", apply(BootReject[1:i,],2,mean),"\n")
if(do.grobs) {
Tots=Catch %>% group_by(lgth) %>%
summarize(n1=sum(n1),n2=sum(n2),y=n2/(n1+n2)) %>% data.frame()
GrobList[[i]]=BootPlot(BootOut,lenseq,r(lenseq),Data=Tots) } }
if(do.perm) {
ObsStat=permLRT(Catch,Vnames)
PermOut=permSELECT(Catch,Vnames,permLRT,haul="TowID",nsim=nperms)
permPval[i,1]=calcPermP(ObsStat[1],PermOut[,1])
permPval[i,2]=calcPermP(ObsStat[2],PermOut[,2])
#permDiff=cbind(t(PermOut),ObsStat)-ObsStat
#permDiff=t(PermOut)-ObsStat
#permPval[i,]=apply( permDiff,1,function(x) mean(x>=0) )
cat("Permutational p-values",round(permPval[i,],3))
#permPval[i]=mean(c(PermOut,ObsStat)>=ObsStat)
#permSignif=mean( permPval[1:i]<=0.05 )
if(i>1) {
permSignif=apply( permPval[1:i,],2,function(x) mean(x<=0.05))
cat(".....  Running perm propn",permSignif,"\n") }
#cat("Perm",ifelse(permPval[i]<=0.05,"Signif","Not signif"),". p=",permSignif,"\n")
} }
BootSignif=apply(BootReject,2,mean)
SignifLength=sapply(lensOutList,function(x) length(x))
sum(SignifLength)/(nsims*length(lenseq))
PermReject=permPval<=0.05; colnames(PermReject)=c("constant","phi0")
PermSignif=apply(PermReject,2,mean)
cat("\nBootstrap rejection rates of Hnull and H0.5 are",BootSignif)
cat("\nPermutation rejection rates of Hnull and H0.5 are",PermSignif)
Type=2 #1 for Type I error or 2 for power analysis
Vnames=c("lgth","n1","n2")
BHV.type="BHV"; #BHV.type="PIT"
phi0=0.5
Method=2 #Spline
if(Type==1) { eps.var=0.05; p.sd=0.1; N=400; nTows=10;
r=function(l,phi0=0.5) rep(phi0,length(l))  }
if(Type!=1) {
eps.var=0; p.sd=0.1; N=1000; nTows=10; a=-4.5; b=0.1; lo=0.5; hi=0.6
r=function(l) rlogist(l,beta=c(a,b),lo=lo,hi=hi) }
#r=function(l) rquad(l,k=5000)
nsims=1; nboots=1000; nperms=1000
do.grobs=T; GrobList=as.list(1:nsims)
lensOutList=as.list(1:nsims)
do.boot=T
BootReject=matrix(F,nsims,2); colnames(BootReject)=c("constant","phi0")
do.perm=T; permPval=matrix(NA,nsims,2); permSignif=permPval
for(i in 1:nsims) {
print(i)
Catch=SimTows(N=N,nTows=nTows,Pars,lenseq,p.sd=p.sd,eps=eps.var,rmu=r,
type=BHV.type,b=b4)
#Fit=SplineSELECT(Catch,c("lgth","n1","n2"))
if(do.boot) {
BootOut=bootSELECT(Catch,Vnames,bootPredn,haul="TowID",nsim=nboots)
#BootOut=bootSELECT(Fit,bootPredn,haul="TowID",nsim=nboots)
Bnds=t( apply(BootOut,2,quantile,prob=c(0.025,0.975),type=6) )
#Test H0:r(l)=phi0
lensOut=lenseq[Bnds[,1]>phi0 | Bnds[,2]<phi0]
lensOutList[[i]]=lensOut
if(length(lensOut)>0) BootReject[i,"phi0"]=T
if(max(Bnds[,1])>min(Bnds[,2])) BootReject[i,"constant"]=T
cat("Sim",i,"Bootstrap rejection:", BootReject[i,])
if(i>1) cat(".... Running boot propn=", apply(BootReject[1:i,],2,mean),"\n")
if(do.grobs) {
Tots=Catch %>% group_by(lgth) %>%
summarize(n1=sum(n1),n2=sum(n2),y=n2/(n1+n2)) %>% data.frame()
GrobList[[i]]=BootPlot(BootOut,lenseq,r(lenseq),Data=Tots) } }
if(do.perm) {
ObsStat=permLRT(Catch,Vnames)
PermOut=permSELECT(Catch,Vnames,permLRT,haul="TowID",nsim=nperms)
permPval[i,1]=calcPermP(ObsStat[1],PermOut[,1])
permPval[i,2]=calcPermP(ObsStat[2],PermOut[,2])
#permDiff=cbind(t(PermOut),ObsStat)-ObsStat
#permDiff=t(PermOut)-ObsStat
#permPval[i,]=apply( permDiff,1,function(x) mean(x>=0) )
cat("Permutational p-values",round(permPval[i,],3))
#permPval[i]=mean(c(PermOut,ObsStat)>=ObsStat)
#permSignif=mean( permPval[1:i]<=0.05 )
if(i>1) {
permSignif=apply( permPval[1:i,],2,function(x) mean(x<=0.05))
cat(".....  Running perm propn",permSignif,"\n") }
#cat("Perm",ifelse(permPval[i]<=0.05,"Signif","Not signif"),". p=",permSignif,"\n")
} }
BootSignif=apply(BootReject,2,mean)
SignifLength=sapply(lensOutList,function(x) length(x))
sum(SignifLength)/(nsims*length(lenseq))
PermReject=permPval<=0.05; colnames(PermReject)=c("constant","phi0")
PermSignif=apply(PermReject,2,mean)
cat("\nBootstrap rejection rates of Hnull and H0.5 are",BootSignif)
cat("\nPermutation rejection rates of Hnull and H0.5 are",PermSignif)
Type=2 #1 for Type I error or 2 for power analysis
Vnames=c("lgth","n1","n2")
BHV.type="BHV"; #BHV.type="PIT"
phi0=0.5
Method=2 #Spline
if(Type==1) { eps.var=0.05; p.sd=0.1; N=400; nTows=10;
r=function(l,phi0=0.5) rep(phi0,length(l))  }
if(Type!=1) {
eps.var=0; p.sd=0.1; N=1000; nTows=10; a=-4.5; b=0.1; lo=0.5; hi=0.6
r=function(l) rlogist(l,beta=c(a,b),lo=lo,hi=hi) }
#r=function(l) rquad(l,k=5000)
nsims=1; nboots=1000; nperms=1000
do.grobs=T; GrobList=as.list(1:nsims)
lensOutList=as.list(1:nsims)
do.boot=T
BootReject=matrix(F,nsims,2); colnames(BootReject)=c("constant","phi0")
do.perm=T; permPval=matrix(NA,nsims,2); permSignif=permPval
for(i in 1:nsims) {
print(i)
Catch=SimTows(N=N,nTows=nTows,Pars,lenseq,p.sd=p.sd,eps=eps.var,rmu=r,
type=BHV.type,b=b4)
#Fit=SplineSELECT(Catch,c("lgth","n1","n2"))
if(do.boot) {
BootOut=bootSELECT(Catch,Vnames,bootPredn,haul="TowID",nsim=nboots)
#BootOut=bootSELECT(Fit,bootPredn,haul="TowID",nsim=nboots)
Bnds=t( apply(BootOut,2,quantile,prob=c(0.025,0.975),type=6) )
#Test H0:r(l)=phi0
lensOut=lenseq[Bnds[,1]>phi0 | Bnds[,2]<phi0]
lensOutList[[i]]=lensOut
if(length(lensOut)>0) BootReject[i,"phi0"]=T
if(max(Bnds[,1])>min(Bnds[,2])) BootReject[i,"constant"]=T
cat("Sim",i,"Bootstrap rejection:", BootReject[i,])
if(i>1) cat(".... Running boot propn=", apply(BootReject[1:i,],2,mean),"\n")
if(do.grobs) {
Tots=Catch %>% group_by(lgth) %>%
summarize(n1=sum(n1),n2=sum(n2),y=n2/(n1+n2)) %>% data.frame()
GrobList[[i]]=BootPlot(BootOut,lenseq,r(lenseq),Data=Tots) } }
if(do.perm) {
ObsStat=permLRT(Catch,Vnames)
PermOut=permSELECT(Catch,Vnames,permLRT,haul="TowID",nsim=nperms)
permPval[i,1]=calcPermP(ObsStat[1],PermOut[,1])
permPval[i,2]=calcPermP(ObsStat[2],PermOut[,2])
#permDiff=cbind(t(PermOut),ObsStat)-ObsStat
#permDiff=t(PermOut)-ObsStat
#permPval[i,]=apply( permDiff,1,function(x) mean(x>=0) )
cat("Permutational p-values",round(permPval[i,],3))
#permPval[i]=mean(c(PermOut,ObsStat)>=ObsStat)
#permSignif=mean( permPval[1:i]<=0.05 )
if(i>1) {
permSignif=apply( permPval[1:i,],2,function(x) mean(x<=0.05))
cat(".....  Running perm propn",permSignif,"\n") }
#cat("Perm",ifelse(permPval[i]<=0.05,"Signif","Not signif"),". p=",permSignif,"\n")
} }
BootSignif=apply(BootReject,2,mean)
SignifLength=sapply(lensOutList,function(x) length(x))
sum(SignifLength)/(nsims*length(lenseq))
PermReject=permPval<=0.05; colnames(PermReject)=c("constant","phi0")
PermSignif=apply(PermReject,2,mean)
cat("\nBootstrap rejection rates of Hnull and H0.5 are",BootSignif)
cat("\nPermutation rejection rates of Hnull and H0.5 are",PermSignif)
?save
save(Catch,file="PermEg.RData")
dim(Catch)
head(Catch)
Perm=Catch
save(Perm,file="Perm.RData")
Cc=Catch
rm(Catch)
rm(Perm)
load("Perm.RData")
Perm
source("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R/BOOTSTRAP&PERMUTATION.R")
remotes::install_github("rbmillar/SELECT")
1
remotes::install_github("rbmillar/SELECT")
require(SELECT)
Perm
load(Perm)
data(Perm)
head(Perm)
data(Perm)
head(Perm)
Vnames=c("lgth","n1","n2")
Fit=SplineSELECT(data,var.names=Vnames)
Vnames
typeof(Perm)
class(Perm)
data(Perm)
head(Perm)
Vnames=c("lgth","n1","n2")
Fit=SplineSELECT(Perm,var.names=Vnames)
#remotes::install_github("rbmillar/SELECT")
require(SELECT)
require(tidyverse) #tidyverse includes dplyr and ggplot2
require(mgcv) #To fit splines
data(Perm)
head(Perm)
Vnames=c("lgth","n1","n2")
Fit=SplineSELECT(Perm,var.names=Vnames)
Fit
plot(Fit)
plot(Fit,type="response")
plot.gam
?plot.gam
data(Perm)
head(Perm)
Vnames=c("lgth","n1","n2")
Fit=SplineSELECT(Perm,var.names=Vnames)
plot(Fit,trans=exp)
SplineSELECT
fitted(lenseq)
plot(Fit,trans=plogis)
plot(Fit,trans=plogis,se=F)
fitted(Fit)
data(Perm)
head(Perm)
Vnames=c("lgth","n1","n2")
Fit=SplineSELECT(Perm,var.names=Vnames)
plot(Fit,trans=qlogis,se=F)
data(Perm)
head(Perm)
Vnames=c("lgth","n1","n2")
SplineFit=SplineSELECT(Perm,var.names=Vnames)
lenseq=21:120
plot(lenseq,fitted(SplineFit))
data(Perm)
head(Perm)
Vnames=c("lgth","n1","n2")
SplineFit=SplineSELECT(Perm,var.names=Vnames)
lenseq=21:120
plot(lenseq,fitted(SplineFit),type="l")
data(Perm)
head(Perm)
Vnames=c("lgth","n1","n2")
SplineFit=SplineSELECT(Perm,var.names=Vnames)
lenseq=21:120
plot(lenseq,fitted(SplineFit),type="l",xlab="Length",ylab="Catch share")
summary(SplineFit)$r.sq
permRsq=function(data) {
SplineFit=SplineSELECT(Perm,var.names=Vnames)
summary(SplineFit)$r.sq
}
permRsq(Perm)
PermRsq=permSELECT(Perm,Vnames,permRsq,haul="TowID",nsim=1000)
permRsq=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names)
summary(SplineFit)$r.sq
}
permRsq(Perm,Vnames)
ObsRsq=permRsq(Perm)
ObsRsq=permRsq(Perm,Vnames)
PermRsq=permSELECT(Perm,Vnames,permRsq,haul="TowID",nsim=1000)
mean(ObsRsq>=PermRsq)
mean(ObsRsq<=PermRsq)
mean(ObsRsq<PermRsq)
ObsRsq=permRsq(Perm,Vnames)
PermRsq=permSELECT(Perm,Vnames,permRsq,haul="TowID",nsim=1000)
pval=mean(ObsRsq<=PermRsq)
cat("\nThe p-value for length-independent catch share is"pval,"\n")
cat("\nThe p-value for length-independent catch share is",pval,"\n")
predict(SplineFit,data.frame(lgth=lenseq))
prednvals=predict(SplineFit,data.frame(lgth=lenseq),type="response")
prednvals
data(Perm)
head(Perm)
Vnames=c("lgth","n1","n2")
SplineFit=SplineSELECT(Perm,var.names=Vnames)
summary(SplineFit)$r.sq
lenseq=21:120
pred.vals=predict(SplineFit,data.frame(lgth=lenseq),type="response")
plot(lenseq,pred.vals,type="l",xlab="Length",ylab="Catch share")
summary(SplineFit)$r.sq
ObsRsq=permRsq(Perm,Vnames)
PermRsq=permSELECT(Perm,Vnames,permRsq,haul="TowID",nsim=1000)
pval=mean(ObsRsq<=PermRsq)
cat("\nThe p-value for length-independent catch share is",pval,"\n")
ObsRsq=permRsq(Perm,Vnames)
PermRsq=permSELECT(Perm,Vnames,permRsq,haul="TowID",nsim=1000)
pval=mean(ObsRsq<=PermRsq)
cat("\nThe p-value for length-independent catch share is",pval,"\n")
require(SELECT)
#require(MuMIn) #For dredge
options(na.action = "na.fail") #For dredge
#require(msm)
require(tidyverse) #tidyverse includes dplry and ggplot2
require(gridExtra)
require(ggpubr)
require(mgcv)
#require(stringr) #For str_sub() to use -ve string posns
#require(scam) #For monotone splines
#remotes::install_local("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT",force=T)
#FuncDir="T:/Russell_SSD/ACTIVE/Collaboration/CTU/"
#source(paste0(FuncDir,"SELECTDfFunctions.R"))
source(knitr::purl("CatchSimulationFuncs.Rmd", quiet=TRUE))
source(knitr::purl("FitFuncs.Rmd", quiet=TRUE))
Rdir="T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R/"
source(paste0(Rdir,"BOOTSTRAP&PERMUTATION.R"))
source(paste0(Rdir,"FIT_FUNCTIONS.R"))
source(paste0(Rdir,"HELPER_FUNCTIONS.R"))
#R2dir="T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R2/"
#source(paste0(R2dir,"RelativeSelnFuncs2.R"))
#source(paste0(R2dir,"BootstrapAndRandomize2.R"))
psplit0=0.5
txt=8 #ggplot specification
#Pars=c(4,0.05); lenseq=46:65
Pars=c(4,0.3); Mode=exp(Pars[1]-Pars[2]^2)
lenseq=21:120
cat("Mode is",Mode)
pdf("PopnDensity.pdf",width=4,height=2.5)
par(las=1,mar=c(4,4,1,1))
plot(lenseq,dlnorm(lenseq,Pars[1],Pars[2]),type="l",
xlab="Length",ylab="Density",cex.axis=0.7,cex.lab=0.7)
dev.off()
load("Perm.RData")
Perm
Catch=Perm
Type=2 #1 for Type I error or 2 for power analysis
Vnames=c("lgth","n1","n2")
BHV.type="BHV"; #BHV.type="PIT"
phi0=0.5
Method=2 #Spline
if(Type==1) { eps.var=0.05; p.sd=0.1; N=400; nTows=10;
r=function(l,phi0=0.5) rep(phi0,length(l))  }
if(Type!=1) {
eps.var=0; p.sd=0.1; N=1000; nTows=10; a=-4.5; b=0.1; lo=0.5; hi=0.6
r=function(l) rlogist(l,beta=c(a,b),lo=lo,hi=hi) }
#r=function(l) rquad(l,k=5000)
nsims=50; nboots=1000; nperms=1000
do.grobs=T; GrobList=as.list(1:nsims)
lensOutList=as.list(1:nsims)
do.boot=T
BootReject=matrix(F,nsims,2); colnames(BootReject)=c("constant","phi0")
do.perm=T; permPval=matrix(NA,nsims,2); permSignif=permPval
BootPerm=bootSELECT(Perm,Vnames,bootPredn,haul="TowID",nsim=nboots)
dim(BootPerm)
save(BootPerm,file="BootPerm1000.RData")
load("BootPerm1000.RData")
ls()
plot(21:120,BootPerm[1,],xlab="Length",ylab="Catch share")
#load("BootPerm1000.RData")
plot(21:120,BootPerm[1,],xlab="Length",ylab="Catch share",type="l",ylim=c(0.3,0.9))
#load("BootPerm1000.RData")
plot(21:120,BootPerm[1,],xlab="Length",ylab="Catch share",type="l",ylim=c(0.3,0.9))
for(i in 2:50) line(21:120,BootPerm[i])
#load("BootPerm1000.RData")
plot(21:120,BootPerm[1,],xlab="Length",ylab="Catch share",type="l",ylim=c(0.3,0.9))
for(i in 2:50) line(21:120,BootPerm[i,])
plot(21:120,BootPerm[1,],xlab="Length",ylab="Catch share",type="l",ylim=c(0.3,0.9))
plot(21:120,BootPerm[1,],xlab="Length",ylab="Catch share",type="l",ylim=c(0.3,0.9))
for(i in 2:50) line(21:120,BootPerm[i,])
BootPerm[2,]
plot(21:120,BootPerm[1,],xlab="Length",ylab="Catch share",type="l",ylim=c(0.3,0.9))
for(i in 2:50) line(21:120,BootPerm[i,])
plot(21:120,BootPerm[1,],xlab="Length",ylab="Catch share",type="l",ylim=c(0.3,0.9))
line(21:120,BootPerm[i,])
#load("BootPerm1000.RData")
plot(21:120,BootPerm[1,],xlab="Length",ylab="Catch share",type="l",ylim=c(0.3,0.9))
for(i in 2:50) lines(21:120,BootPerm[i,])
plot(21:120,BootPerm[1,],xlab="Length",ylab="Catch share",type="l",ylim=c(0.3,0.9))
for(i in 2:50) lines(21:120,BootPerm[i,])
plot(21:120,BootPerm[1,],xlab="Length",ylab="Catch share",type="l",ylim=c(0.3,0.9))
for(i in 2:20) lines(21:120,BootPerm[i,])
#load("BootPerm1000.RData")
plot(21:120,BootPerm[1,],xlab="Length",ylab="Catch share",type="l",ylim=c(0.3,0.9))
for(i in 22:50) lines(21:120,BootPerm[i,])
plot(21:120,BootPerm[1,],xlab="Length",ylab="Catch share",type="l",ylim=c(0.3,0.9))
for(i in 22:50) lines(21:120,BootPerm[i,])
plot(21:120,BootPerm[1,],xlab="Length",ylab="Catch share",type="l",ylim=c(0.3,0.9))
for(i in 102:150) lines(21:120,BootPerm[i,])
#load("BootPerm1000.RData")
pdf("BootPredns50.pdf",width=4,height=2.5)
par(las=1,mar=c(4,4,1,1))
plot(21:120,BootPerm[1,],xlab="Length",ylab="Catch share",type="l",ylim=c(0.3,0.9))
for(i in 102:150) lines(21:120,BootPerm[i,])
dev.off()
#load("BootPerm1000.RData")
pdf("BootPredns50.pdf",width=4,height=2.5)
par(las=1,mar=c(4,4,1,1))
plot(21:120,BootPerm[1,],xlab="Length",ylab="Catch share",type="l",lwd=0.5,
ylim=c(0.3,0.9))
for(i in 102:150) lines(21:120,BootPerm[i,],lwd=0.5)
dev.off()
data(Perm)
head(Perm)
#remotes::install_github("rbmillar/SELECT")
require(SELECT)
require(tidyverse) #tidyverse includes dplyr and ggplot2
require(mgcv) #To fit splines
data(Perm)
head(Perm)
remotes::install_github("rbmillar/SELECT")
1
remotes::install_github("rbmillar/SELECT")
require(SELECT)
require(tidyverse) #tidyverse includes dplyr and ggplot2
require(mgcv) #To fit splines
remotes::install_github("rbmillar/SELECT")
require(SELECT)
require(tidyverse) #tidyverse includes dplyr and ggplot2
require(mgcv) #To fit splines
data(Perm)
head(Perm)
Vnames=c("lgth","n1","n2")
SplineFit=SplineSELECT(Perm,var.names=Vnames)
summary(SplineFit)$r.sq
head(Perm)
head(Perm)
permRsq=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names)
summary(SplineFit)$r.sq
}
ObsRsq=permRsq(Perm,Vnames)
cat("\nThe observed r-square is",ObsRsq,"\n")
PermRsq=permSELECT(Perm,Vnames,permRsq,haul="TowID",nsim=1000)
pval=mean(ObsRsq<=PermRsq)
cat("\nThe p-value for length-independent catch share is",pval,"\n")
PermRsq=permSELECT(Perm,Vnames,permRsq,haul="TowID",nsim=1000)
pval=mean(ObsRsq<=PermRsq)
cat("\nThe p-value for length-independent catch share is",pval,"\n")
PermRsq=permSELECT(Perm,Vnames,permRsq,haul="TowID",nsim=1000)
pval=mean(ObsRsq<=PermRsq)
cat("\nThe p-value for length-independent catch share is",pval,"\n")
PermRsq=permSELECT(Perm,Vnames,permRsq,haul="TowID",nsim=10000)
pval=mean(ObsRsq<=PermRsq)
cat("\nThe p-value for length-independent catch share is",pval,"\n")
PermRsq=permSELECT(Perm,Vnames,permRsq,haul="TowID",nsim=10000)
pval=mean(ObsRsq<=PermRsq)
cat("\nThe p-value for length-independent catch share is",pval,"\n")
require(tinytex)
check_installed(lineno)
check_installed("lineno")
parse_install()
tlmgr_install("lineno")
?BootPlot
SELECT::BootPlot
dir()
load(SimCatch)
load(SimCatch.RData)
load("SimCatch.RData")
ls()
head(SimCatch)
require(SELECT)
require(tidyverse) #tidyverse includes dplyr and ggplot2
require(mgcv) #To fit splines
load("SimCatch.RData")
ls()
dim(SimCatch)
PkgName="SELECT"
#Create package folder structure (and opens 2nd RStudio for the project)
#usethis::create_package(PkgName)
setwd(paste0("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/",PkgName))
#Add some details to the DESCRIPTION file
usethis::use_description(fields=list(
`Authors@R` = 'person("Russell", "Millar", email = "r.millar@auckland.ac.nz", role = c("aut", "cre"),
comment = c(ORCID = "0000-0002-1121-8721"))'
) )

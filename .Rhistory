ModelCheck(fitR,minE=1,las=1)
Estimates(fitR);
PlotCurves(fitR,plotlens=seq(19,56,0.1),type="l")
FitL
fitL
odds
#Fixed split, psplit=0.6
psplit=0.6
odds=psplit/(1-psplit) #Odds of exptl codend vs control
fitR2=SELECT(Pope,v.names,dtype="re",x0=c(-30,1,0),rel.power=c(1,odds))
#penalty.func=function(theta) 0.01*theta[3]^2)
#control=list(maxit=1000,reltol=1e-8,parscale=c(10,1,1)))
ModelCheck(fitR2,minE=1,las=1)
Estimates(fitR2)
#Fixed split, psplit=0.6
psplit=0.6
odds=psplit/(1-psplit) #Odds of exptl codend vs control
fitR2=SELECT(Pope,v.names,dtype="re",x0=c(-30,1),rel.power=c(1,odds))
#penalty.func=function(theta) 0.01*theta[3]^2)
#control=list(maxit=1000,reltol=1e-8,parscale=c(10,1,1)))
ModelCheck(fitR2,minE=1,las=1)
Estimates(fitR2)
PlotCurves(fitR2,plotlens=seq(19,56,0.1),las=1,standardize = T)
ttfit(Pope[,c(1,3,2)],psplit=0.6,x0=c(-30,1,0.5,1),type="rich",suff.big=1)
#Fixed split, psplit=0.6
psplit=0.6
odds=psplit/(1-psplit) #Odds of exptl codend vs control
fitR2=SELECT(Pope,v.names,dtype="re",x0=c(-30,1),rel.power=c(1,odds))
#penalty.func=function(theta) 0.01*theta[3]^2)
#control=list(maxit=1000,reltol=1e-8,parscale=c(10,1,1)))
ModelCheck(fitR2,minE=1,las=1)
Estimates(fitR2)
PlotCurves(fitR2,plotlens=seq(19,56,0.1),las=1,standardize = T,type="l")
ttfit(Pope[,c(1,3,2)],psplit=0.6,x0=c(-30,1,0.5,1),type="rich",suff.big=1)
PlotCurves(fitR2,plotlens=seq(19,56,0.1),las=1,standardize = F,type="l")
#Fixed split, psplit=0.6
psplit=0.6
odds=psplit/(1-psplit) #Odds of exptl codend vs control
fitR2=SELECT(Pope,v.names,dtype="re",x0=c(-30,1),rel.power=c(1,odds))
#penalty.func=function(theta) 0.01*theta[3]^2)
#control=list(maxit=1000,reltol=1e-8,parscale=c(10,1,1)))
ModelCheck(fitR2,minE=1,las=1)
Estimates(fitR2)
PlotCurves(fitR2,plotlens=seq(19,56,0.1),las=1,standardize = T,type="l")
#Fixed split, psplit=0.6
psplit=0.6
odds=psplit/(1-psplit) #Odds of exptl codend vs control
fitR2=SELECT(Pope,v.names,dtype="re",x0=c(-30,1),rel.power=c(1,odds))
#penalty.func=function(theta) 0.01*theta[3]^2)
#control=list(maxit=1000,reltol=1e-8,parscale=c(10,1,1)))
ModelCheck(fitR2,minE=1,las=1)
Estimates(fitR2)
PlotCurves(fitR2,plotlens=seq(19,56,0.1),las=1,type="l",ylim=c(0,1.5))
testy=function(y,...) if(exists(a)) 1 else 0
testy(a)
testy(0)
a=4
testy(0)
testy(0,a=9)
testy
?exists
testy=function(y,...) if(exists("a")) 1 else 0
testy(0)
a
testy(0,a=9)
PlotCurves=function(fit,plotlens=NULL,Meshsize=NULL,rel.power=NULL,standardize=F,
plot.out=T,xlab="Length (cm)",ylab="Retention curve",...) {
s=selncurves(fit$rtype) #Get selection curve function
if(is.null(plotlens)) plotlens=fit$Data[,1]
if(is.null(Meshsize)) Meshsize=fit$Meshsize
if(is.null(rel.power)) pwr=fit$rel.power
if(!exists("ylim")) ylim=c(0,1)
smatrix=outer(plotlens,Meshsize,s,fit$par)
smatrix=t(t(smatrix)*pwr)
if(standardize) smatrix=smatrix/max(smatrix)
#Plot propn retained if only two gears
if(plot.out){
if(length(Meshsize)==2) {
plot(plotlens,smatrix[,2],ylim=ylim,xlab=xlab,ylab=ylab,...)
abline(h=c(0.25,0.5,0.75),lty=3) }
else {
matplot(plotlens,smatrix,ylim=ylim,xlab=xlab,ylab=ylab,...) }
}
lensmatrix=cbind(plotlens,smatrix)
colnames(lensmatrix)=c("Length",paste0("Gear",1:length(Meshsize)))
if(plot.out) invisible(lensmatrix)
if(!plot.out) lensmatrix
}
PlotCurves(fitR2,plotlens=seq(19,56,0.1),las=1,type="l",ylim=c(0,1.5))
PlotCurves=function(fit,plotlens=NULL,Meshsize=NULL,rel.power=NULL,standardize=F,
plot.out=T,xlab="Length (cm)",ylab="Retention curve",...) {
s=selncurves(fit$rtype) #Get selection curve function
if(is.null(plotlens)) plotlens=fit$Data[,1]
if(is.null(Meshsize)) Meshsize=fit$Meshsize
if(is.null(rel.power)) pwr=fit$rel.power
if(!exists("ylim")) print("ylim does not exist")
smatrix=outer(plotlens,Meshsize,s,fit$par)
smatrix=t(t(smatrix)*pwr)
if(standardize) smatrix=smatrix/max(smatrix)
#Plot propn retained if only two gears
if(plot.out){
if(length(Meshsize)==2) {
plot(plotlens,smatrix[,2],ylim=ylim,xlab=xlab,ylab=ylab,...)
abline(h=c(0.25,0.5,0.75),lty=3) }
else {
matplot(plotlens,smatrix,ylim=ylim,xlab=xlab,ylab=ylab,...) }
}
lensmatrix=cbind(plotlens,smatrix)
colnames(lensmatrix)=c("Length",paste0("Gear",1:length(Meshsize)))
if(plot.out) invisible(lensmatrix)
if(!plot.out) lensmatrix
}
PlotCurves(fitR2,plotlens=seq(19,56,0.1),las=1,type="l",ylim=c(0,1.5))
PlotCurves=function(fit,plotlens=NULL,Meshsize=NULL,rel.power=NULL,standardize=F,
plot.out=T,xlab="Length (cm)",ylab="Retention curve",...) {
s=selncurves(fit$rtype) #Get selection curve function
if(is.null(plotlens)) plotlens=fit$Data[,1]
if(is.null(Meshsize)) Meshsize=fit$Meshsize
if(is.null(rel.power)) pwr=fit$rel.power
if(exists("ylim")) print("ylim does exist")
smatrix=outer(plotlens,Meshsize,s,fit$par)
smatrix=t(t(smatrix)*pwr)
if(standardize) smatrix=smatrix/max(smatrix)
#Plot propn retained if only two gears
if(plot.out){
if(length(Meshsize)==2) {
plot(plotlens,smatrix[,2],ylim=ylim,xlab=xlab,ylab=ylab,...)
abline(h=c(0.25,0.5,0.75),lty=3) }
else {
matplot(plotlens,smatrix,ylim=ylim,xlab=xlab,ylab=ylab,...) }
}
lensmatrix=cbind(plotlens,smatrix)
colnames(lensmatrix)=c("Length",paste0("Gear",1:length(Meshsize)))
if(plot.out) invisible(lensmatrix)
if(!plot.out) lensmatrix
}
PlotCurves(fitR2,plotlens=seq(19,56,0.1),las=1,type="l",ylim=c(0,1.5))
PlotCurves=function(fit,plotlens=NULL,Meshsize=NULL,rel.power=NULL,standardize=F,
plot.out=T,xlab="Length (cm)",ylab="Retention curve",...) {
s=selncurves(fit$rtype) #Get selection curve function
if(is.null(plotlens)) plotlens=fit$Data[,1]
if(is.null(Meshsize)) Meshsize=fit$Meshsize
if(is.null(rel.power)) pwr=fit$rel.power
if(exists("ylim")) print(ylim)
smatrix=outer(plotlens,Meshsize,s,fit$par)
smatrix=t(t(smatrix)*pwr)
if(standardize) smatrix=smatrix/max(smatrix)
#Plot propn retained if only two gears
if(plot.out){
if(length(Meshsize)==2) {
plot(plotlens,smatrix[,2],ylim=ylim,xlab=xlab,ylab=ylab,...)
abline(h=c(0.25,0.5,0.75),lty=3) }
else {
matplot(plotlens,smatrix,ylim=ylim,xlab=xlab,ylab=ylab,...) }
}
lensmatrix=cbind(plotlens,smatrix)
colnames(lensmatrix)=c("Length",paste0("Gear",1:length(Meshsize)))
if(plot.out) invisible(lensmatrix)
if(!plot.out) lensmatrix
}
PlotCurves(fitR2,plotlens=seq(19,56,0.1),las=1,type="l",ylim=c(0,1.5))
ylim
xlim
xlab
PlotCurves=function(fit,plotlens=NULL,Meshsize=NULL,rel.power=NULL,standardize=F,
plot.out=T,xlab="Length (cm)",ylab="Retention curve",ylim=c(0,1),...) {
s=selncurves(fit$rtype) #Get selection curve function
if(is.null(plotlens)) plotlens=fit$Data[,1]
if(is.null(Meshsize)) Meshsize=fit$Meshsize
if(is.null(rel.power)) pwr=fit$rel.power
smatrix=outer(plotlens,Meshsize,s,fit$par)
smatrix=t(t(smatrix)*pwr)
if(standardize) smatrix=smatrix/max(smatrix)
#Plot propn retained if only two gears
if(plot.out){
if(length(Meshsize)==2) {
plot(plotlens,smatrix[,2],ylim=ylim,xlab=xlab,ylab=ylab,...)
abline(h=c(0.25,0.5,0.75),lty=3) }
else {
matplot(plotlens,smatrix,ylim=ylim,xlab=xlab,ylab=ylab,...) }
}
lensmatrix=cbind(plotlens,smatrix)
colnames(lensmatrix)=c("Length",paste0("Gear",1:length(Meshsize)))
if(plot.out) invisible(lensmatrix)
if(!plot.out) lensmatrix
}
PlotCurves(fitR2,plotlens=seq(19,56,0.1),las=1,type="l",ylim=c(0,1.5))
#Fixed split, psplit=0.6
psplit=0.6
odds=psplit/(1-psplit) #Odds of exptl codend vs control
fitR2=SELECT(Pope,v.names,dtype="re",x0=c(-30,1),rel.power=c(1,odds))
#penalty.func=function(theta) 0.01*theta[3]^2)
#control=list(maxit=1000,reltol=1e-8,parscale=c(10,1,1)))
ModelCheck(fitR2,minE=1,las=1)
Estimates(fitR2)
PlotCurves(fitR2,plotlens=seq(19,56,0.1),las=1,type="l",ylim=c(0,1.5))
PlotCurves(fitR2,plotlens=seq(19,56,0.1),las=1,standardize = T,type="l")
#Fixed split, psplit=0.6
psplit=0.6
odds=psplit/(1-psplit) #Odds of exptl codend vs control
fitR2=SELECT(Pope,v.names,dtype="re",x0=c(-30,1),rel.power=c(1,odds))
#penalty.func=function(theta) 0.01*theta[3]^2)
#control=list(maxit=1000,reltol=1e-8,parscale=c(10,1,1)))
ModelCheck(fitR2,minE=1,las=1)
Estimates(fitR2)
#This plots relative retention
PlotCurves(fitR2,plotlens=seq(19,56,0.1),las=1,type="l",ylim=c(0,1.5))
#Use standardize=T to plot selection curve
PlotCurves(fitR2,plotlens=seq(19,56,0.1),las=1,standardize = T,type="l")
#Fixed split, psplit=0.5
fitR2=SELECT(Pope,v.names,dtype="re",x0=c(-30,1),rel.power=c(1,1))
#penalty.func=function(theta) 0.01*theta[3]^2)
#control=list(maxit=1000,reltol=1e-8,parscale=c(10,1,1)))
ModelCheck(fitR2,minE=1,las=1)
Estimates(fitR2)
#This plots relative retention
PlotCurves(fitR2,plotlens=seq(19,56,0.1),las=1,type="l",ylim=c(0,1.5))
#Use standardize=T to plot selection curve
PlotCurves(fitR2,plotlens=seq(19,56,0.1),las=1,standardize = T,type="l")
#Fixed split, psplit=0.5
fitR2=SELECT(Pope,v.names,dtype="re",x0=c(-30,1),rel.power=c(1,1))
#penalty.func=function(theta) 0.01*theta[3]^2)
#control=list(maxit=1000,reltol=1e-8,parscale=c(10,1,1)))
ModelCheck(fitR2,minE=1,las=1)
Estimates(fitR2)
PlotCurves(fitR2,plotlens=seq(19,56,0.1),las=1,type="l")
#Fixed split, psplit=0.5
fitR2=SELECT(Pope,v.names,dtype="re",x0=c(-30,1),rel.power=c(1,1))
ModelCheck(fitR2,minE=1,las=1)
Estimates(fitR2)
PlotCurves(fitR2,plotlens=seq(19,56,0.1),las=1,type="l")
Holt
data(Holt)
Holt
data(Trammel)
Trammel
Trammel=read.table("inst/extdata/trammel.dat",head=F);
Trammel
names(Counts)
data(Holt)
Meshs=Holt$Meshsize
Counts=Holt$Counts
names(Counts)
pwr=rep(1,8)
fit=SELECT(Counts,v.names,dtype="re",stype="norm.loc",Meshsize=Meshs,x0=c(60,4),rel.power=pwr)
data(Holt)
Meshs=Holt$Meshsize
Counts=Holt$Counts
rownames(Counts)=c("lgth",paste0("M",Meshs))
Meshs=Holt$Meshsize
Counts=Holt$Counts
names(Counts)=c("lgth",paste0("M",Meshs))
Counts
fit=SELECT(Counts,v.names,dtype="re",stype="norm.loc",Meshsize=Meshs,x0=c(60,4),rel.power=pwr)
v.names=names(Counts)
fit=SELECT(Counts,v.names,dtype="re",stype="norm.loc",Meshsize=Meshs,x0=c(60,4),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
names(Holt)=c("lgth",paste0("M",Meshs))
Holt
names(Holt$Counts)=c("lgth",paste0("M",Meshs))
Holt
save(Holt,file="../data/Holt.RData")
save(Holt,file="data/Holt.RData")
data(Holt)
Meshs=Holt$Meshsize
Counts=Holt$Counts
names(Counts)=c("lgth",paste0("M",Meshs))
v.names=names(Counts)
#Equal fishing power of the eight meshsizes
pwr=rep(1,8)
#Or use this for fishing power proportional to meshsize
#pwr=Meshsize
par(mfrow=c(3,2),mar=c(4.1,4.1,1,1))
fit=SELECT(Counts,v.names,dtype="re",stype="norm.loc",Meshsize=Meshs,x0=c(60,4),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
fit=SELECT(Counts,v.names,dtype="re",stype="norm.sca",Meshsize=Meshs,x0=c(60,4),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
#Needs wide seln curve for x0
fit=SELECT(Counts,v.names,dtype="re",stype="gamma",Meshsize=Meshs,x0=c(10,5),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
fit=SELECT(Counts,v.names,dtype="re",stype="logistic",Meshsize=Meshs,x0=c(-60,1),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
fit=SELECT(Counts,v.names,dtype="re",stype="richards",Meshsize=Meshs,x0=c(-60,1,0),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
fit=SELECT(Counts,v.names,dtype="re",stype="lognorm",Meshsize=Meshs,x0=c(log(60),0.1),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
fit=SELECT(Counts,v.names,dtype="re",stype="binorm.sca",Meshsize=Meshs,x0=c(55,4,65,4,2),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
fit=SELECT(Counts,v.names,dtype="re",stype="bilognorm",Meshsize=Meshs,x0=c(4,0.2,4.2,0.1,2),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
type
PlotCurves=function(fit,plotlens=NULL,Meshsize=NULL,rel.power=NULL,standardize=F,
plot.out=T,xlab="Length (cm)",ylab="Retention curve",type="l",
ylim=c(0,1),...) {
s=selncurves(fit$rtype) #Get selection curve function
if(is.null(plotlens)) plotlens=fit$Data[,1]
if(is.null(Meshsize)) Meshsize=fit$Meshsize
if(is.null(rel.power)) pwr=fit$rel.power
smatrix=outer(plotlens,Meshsize,s,fit$par)
smatrix=t(t(smatrix)*pwr)
if(standardize) smatrix=smatrix/max(smatrix)
#Plot propn retained if only two gears
if(plot.out){
if(length(Meshsize)==2) {
plot(plotlens,smatrix[,2],ylim=ylim,xlab=xlab,ylab=ylab,...)
abline(h=c(0.25,0.5,0.75),lty=3) }
else {
matplot(plotlens,smatrix,ylim=ylim,xlab=xlab,ylab=ylab,...) }
}
lensmatrix=cbind(plotlens,smatrix)
colnames(lensmatrix)=c("Length",paste0("Gear",1:length(Meshsize)))
if(plot.out) invisible(lensmatrix)
if(!plot.out) lensmatrix
}
#Use dtype="ph" to specify that design type is paired haul
data(Pope)
head(Pope)
v.names=c("Lengths","nfine","nwide")
#FIt logistic seln cure
fitL=SELECT(Pope,v.names,dtype="ph")
ModelCheck(fitL,minE=1,las=1)
Estimates(fitL)
PlotCurves(fitL,plotlens=seq(19,56,0.1))
PlotCurves=function(fit,plotlens=NULL,Meshsize=NULL,rel.power=NULL,standardize=F,
plot.out=T,xlab="Length (cm)",ylab="Retention curve",type="l",
ylim=c(0,1),...) {
s=selncurves(fit$rtype) #Get selection curve function
if(is.null(plotlens)) plotlens=fit$Data[,1]
if(is.null(Meshsize)) Meshsize=fit$Meshsize
if(is.null(rel.power)) pwr=fit$rel.power
smatrix=outer(plotlens,Meshsize,s,fit$par)
smatrix=t(t(smatrix)*pwr)
if(standardize) smatrix=smatrix/max(smatrix)
#Plot propn retained if only two gears
if(plot.out){
if(length(Meshsize)==2) {
plot(plotlens,smatrix[,2],ylim=ylim,xlab=xlab,ylab=ylab,type=type,...)
abline(h=c(0.25,0.5,0.75),lty=3) }
else {
matplot(plotlens,smatrix,ylim=ylim,xlab=xlab,ylab=ylab,type=type,...) }
}
lensmatrix=cbind(plotlens,smatrix)
colnames(lensmatrix)=c("Length",paste0("Gear",1:length(Meshsize)))
if(plot.out) invisible(lensmatrix)
if(!plot.out) lensmatrix
}
data(Clark)
head(Clark)
v.names=c("lenclass","cover","codend")
#Fit logistic selection curve
fitL=SELECT(Clark,v.names,dtype="cc")
ModelCheck(fitL,minE=1,las=1)
Estimates(fitL)
PlotCurves(fitL,plotlens=seq(19,56,0.1),type="l")
#Use dtype="cc" to specify that design type is covered codend
data(Clark)
head(Clark)
v.names=c("lenclass","cover","codend")
#Fit logistic selection curve
fitL=SELECT(Clark,v.names,dtype="cc")
ModelCheck(fitL,minE=1,las=1)
Estimates(fitL)
PlotCurves(fitL,plotlens=seq(19,56,0.1))
Clark
#Use dtype="cc" to specify that design type is covered codend
data(Clark)
head(Clark)
v.names=c("lenclass","cover","codend")
#Fit logistic selection curve
fitL=SELECT(Clark,v.names,dtype="cc")
ModelCheck(fitL,minE=1,las=1)
Estimates(fitL)
PlotCurves(fitL,plotlens=seq(19,56,0.1))
#Fit Richards selection curve
fitR=SELECT(Clark,v.names,dtype="cc",stype="richards")
ModelCheck(fitR,minE=1,las=1)
Estimates(fitR);
PlotCurves(fitR,plotlens=seq(19,56,0.1))
#Likelihood ratio test for H0 that logistic mode is adequate
LRTstat=2*(deviance(fitL)-deviance(fitR))
cat("\n p-value for H0:logistic is",1-pchisq(LRTstat,1))
#Use dtype="ph" to specify that design type is paired haul
data(Pope)
head(Pope)
v.names=c("Lengths","nfine","nwide")
#FIt logistic seln cure
fitL=SELECT(Pope,v.names,dtype="ph")
ModelCheck(fitL,minE=1,las=1)
Estimates(fitL)
PlotCurves(fitL,plotlens=seq(19,56,0.1))
Pope
#Use dtype="ph" to specify that design type is paired haul
data(Pope)
head(Pope)
v.names=c("Lengths","nfine","nwide")
#FIt logistic seln cure
fitL=SELECT(Pope,v.names,dtype="ph")
ModelCheck(fitL,minE=1,las=1)
Estimates(fitL)
PlotCurves(fitL)
#Fixed split, psplit=0.5
fitR2=SELECT(Pope,v.names,dtype="re",x0=c(-30,1),rel.power=c(1,1))
ModelCheck(fitR2,minE=1,las=1)
Estimates(fitR2)
PlotCurves(fitR2,las=1)
data(Holt)
Meshs=Holt$Meshsize
Counts=Holt$Counts
names(Counts)=c("lgth",paste0("M",Meshs))
v.names=names(Counts)
#Equal fishing power of the eight meshsizes
pwr=rep(1,8)
#Or use this for fishing power proportional to meshsize
#pwr=Meshsize
par(mfrow=c(3,2),mar=c(4.1,4.1,1,1))
fit=SELECT(Counts,v.names,dtype="re",stype="norm.loc",Meshsize=Meshs,x0=c(60,4),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
fit=SELECT(Counts,v.names,dtype="re",stype="norm.sca",Meshsize=Meshs,x0=c(60,4),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
#Needs wide seln curve for x0
fit=SELECT(Counts,v.names,dtype="re",stype="gamma",Meshsize=Meshs,x0=c(10,5),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
fit=SELECT(Counts,v.names,dtype="re",stype="logistic",Meshsize=Meshs,x0=c(-60,1),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
fit=SELECT(Counts,v.names,dtype="re",stype="richards",Meshsize=Meshs,x0=c(-60,1,0),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
fit=SELECT(Counts,v.names,dtype="re",stype="lognorm",Meshsize=Meshs,x0=c(log(60),0.1),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
fit=SELECT(Counts,v.names,dtype="re",stype="binorm.sca",Meshsize=Meshs,x0=c(55,4,65,4,2),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
fit=SELECT(Counts,v.names,dtype="re",stype="bilognorm",Meshsize=Meshs,x0=c(4,0.2,4.2,0.1,2),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
#Fixed split, psplit=0.5
fitR2=SELECT(Pope,v.names,dtype="re",x0=c(-30,1),rel.power=c(1,1))
#Fixed split, psplit=0.5
fitR2=SELECT(Pope,v.names,dtype="re",x0=c(-30,1),rel.power=c(1,1))
#Use dtype="cc" to specify that design type is covered codend
data(Clark)
head(Clark)
cc.names=c("lenclass","cover","codend")
#Fit logistic selection curve
fitL=SELECT(Clark,cc.names,dtype="cc")
ModelCheck(fitL,minE=1,las=1)
Estimates(fitL)
PlotCurves(fitL,plotlens=seq(19,56,0.1))
#Fit Richards selection curve
fitR=SELECT(Clark,cc.names,dtype="cc",stype="richards")
ModelCheck(fitR,minE=1,las=1)
Estimates(fitR);
PlotCurves(fitR,plotlens=seq(19,56,0.1))
#Likelihood ratio test for H0 that logistic mode is adequate
LRTstat=2*(deviance(fitL)-deviance(fitR))
cat("\n p-value for H0:logistic is",1-pchisq(LRTstat,1))
rm(v.names)
#Use dtype="cc" to specify that design type is covered codend
data(Clark)
head(Clark)
cc.names=c("lenclass","cover","codend")
#Fit logistic selection curve
fitL=SELECT(Clark,cc.names,dtype="cc")
ModelCheck(fitL,minE=1,las=1)
Estimates(fitL)
PlotCurves(fitL,plotlens=seq(19,56,0.1))
#Fit Richards selection curve
fitR=SELECT(Clark,cc.names,dtype="cc",stype="richards")
ModelCheck(fitR,minE=1,las=1)
Estimates(fitR);
PlotCurves(fitR,plotlens=seq(19,56,0.1))
#Likelihood ratio test for H0 that logistic mode is adequate
LRTstat=2*(deviance(fitL)-deviance(fitR))
cat("\n p-value for H0:logistic is",1-pchisq(LRTstat,1))
#Use dtype="ph" to specify that design type is paired haul
data(Pope)
head(Pope)
ph.names=c("Lengths","nfine","nwide")
#FIt logistic seln cure
fitL=SELECT(Pope,ph.names,dtype="ph")
ModelCheck(fitL,minE=1,las=1)
Estimates(fitL)
PlotCurves(fitL)
#Fixed split, psplit=0.5
fitR2=SELECT(Pope,ph.names,dtype="re",x0=c(-30,1),rel.power=c(1,1))
ModelCheck(fitR2,minE=1,las=1)
Estimates(fitR2)
PlotCurves(fitR2,las=1)
data(Holt)
Meshs=Holt$Meshsize
Counts=Holt$Counts
names(Counts)=c("lgth",paste0("M",Meshs))
re.names=names(Counts)
#Equal fishing power of the eight meshsizes
pwr=rep(1,8)
#Or use this for fishing power proportional to meshsize
#pwr=Meshsize
par(mfrow=c(3,2),mar=c(4.1,4.1,1,1))
fit=SELECT(Counts,re.names,dtype="re",stype="norm.loc",Meshsize=Meshs,x0=c(60,4),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
fit=SELECT(Counts,re.names,dtype="re",stype="norm.sca",Meshsize=Meshs,x0=c(60,4),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
#Needs wide seln curve for x0
fit=SELECT(Counts,re.names,dtype="re",stype="gamma",Meshsize=Meshs,x0=c(10,5),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
fit=SELECT(Counts,re.names,dtype="re",stype="logistic",Meshsize=Meshs,x0=c(-60,1),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
fit=SELECT(Counts,re.names,dtype="re",stype="richards",Meshsize=Meshs,x0=c(-60,1,0),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
fit=SELECT(Counts,re.names,dtype="re",stype="lognorm",Meshsize=Meshs,x0=c(log(60),0.1),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
fit=SELECT(Counts,re.names,dtype="re",stype="binorm.sca",Meshsize=Meshs,x0=c(55,4,65,4,2),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
fit=SELECT(Counts,re.names,dtype="re",stype="bilognorm",Meshsize=Meshs,x0=c(4,0.2,4.2,0.1,2),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))

for(i in 1:nsims) {
print(i)
Catch=SimTows(N=1000,nTows=20,Pars,lenseq,p.sd=0.1,eps=0.0,rmu=r,type="BHV",b=b3)
#Fit=GAM(Catch,c("lgth","n1","n2"))
if(do.boot) {
BootOut=bootSELECT(Catch,Vnames,bootPredn,haul="TowID",nsim=nboots)
#BootOut=bootSELECT(Fit,bootPredn,haul="TowID",nsim=nboots)
Bnds=t( apply(BootOut,2,quantile,prob=c(0.025,0.975),type=6) )
#Test H0:r(l)=phi0
lensOut=lenseq[Bnds[,1]>phi0 | Bnds[,2]<phi0]
lensOutList[[i]]=lensOut
if(length(lensOut)>0) BootReject[i,"phi0"]=T
if(max(Bnds[,1])>min(Bnds[,2])) BootReject[i,"constant"]=T
cat("Sim",i,"Bootstrap rejection:", BootReject[i,])
if(i>1) cat(".... Running boot propn=", apply(BootReject[1:i,],2,mean),"\n")
if(do.grobs) {
Tots=Catch %>% group_by(lgth) %>%
summarize(n1=sum(n1),n2=sum(n2),y=n2/(n1+n2)) %>% data.frame()
GrobList[[i]]=BootPlot(BootOut,lenseq,phi0,Data=Tots) } }
if(do.perm) {
ObsStat=permLRT(Catch,Vnames)
PermOut=permSELECT(Catch,Vnames,permLRT,haul="TowID",nsim=nperms)
permPval[i,1]=calcPermP(ObsStat[1],PermOut[,1])
permPval[i,2]=calcPermP(ObsStat[2],PermOut[,2])
#permDiff=cbind(t(PermOut),ObsStat)-ObsStat
#permDiff=t(PermOut)-ObsStat
#permPval[i,]=apply( permDiff,1,function(x) mean(x>=0) )
cat("Permutational p-values",round(permPval[i,],3))
#permPval[i]=mean(c(PermOut,ObsStat)>=ObsStat)
#permSignif=mean( permPval[1:i]<=0.05 )
if(i>1) {
permSignif=apply( permPval[1:i,],2,function(x) mean(x<=0.05))
cat(".....  Running perm propn",permSignif,"\n") }
#cat("Perm",ifelse(permPval[i]<=0.05,"Signif","Not signif"),". p=",permSignif,"\n")
} }
BootSignif=apply(BootReject,2,mean)
SignifLength=sapply(lensOutList,function(x) length(x))
sum(SignifLength)/(nsims*length(lenseq))
PermReject=permPval<=0.05
PermSignif=apply(PermReject,2,mean)
cat("\nBootstrap rejection rates of Hnull and H0.5 are",BootSignif)
cat("\nPermutation rejection rates of Hnull and H0.5 are",PermSignif)
Vnames=c("lgth","n1","n2")
BHV.type="BHV"
phi0=0.5 #For H0:r(l)=phi0
#nsims=1000; nboots=400; nperms=400; Method=2
nsims=100; nboots=100; nperms=100; Method=2
do.grobs=T; GrobList=as.list(1:nsims)
lensOutList=as.list(1:nsims)
do.boot=T
BootReject=matrix(F,nsims,2); colnames(BootReject)=c("constant","phi0")
do.perm=T; permPval=matrix(NA,nsims,2); permSignif=permPval
r=function(l) rlogist(l,beta=c(-9,0.2),lo=0.45,hi=0.55)
r=function(l) rlogist(l,beta=c(-4.5,0.1),lo=0.45,hi=0.55)
r=function(l) rlogist(l,beta=c(-2.25,0.05),lo=0.5,hi=0.6)
#r=function(l) rlogist(l,beta=c(-450,10),lo=0.45,hi=0.55)
#r=NULL
#r=function(l) rquad(l,k=5000)
for(i in 1:nsims) {
print(i)
Catch=SimTows(N=1000,nTows=20,Pars,lenseq,p.sd=0.1,eps=0.0,rmu=r,type="BHV",b=b3)
#Fit=GAM(Catch,c("lgth","n1","n2"))
if(do.boot) {
BootOut=bootSELECT(Catch,Vnames,bootPredn,haul="TowID",nsim=nboots)
#BootOut=bootSELECT(Fit,bootPredn,haul="TowID",nsim=nboots)
Bnds=t( apply(BootOut,2,quantile,prob=c(0.025,0.975),type=6) )
#Test H0:r(l)=phi0
lensOut=lenseq[Bnds[,1]>phi0 | Bnds[,2]<phi0]
lensOutList[[i]]=lensOut
if(length(lensOut)>0) BootReject[i,"phi0"]=T
if(max(Bnds[,1])>min(Bnds[,2])) BootReject[i,"constant"]=T
cat("Sim",i,"Bootstrap rejection:", BootReject[i,])
if(i>1) cat(".... Running boot propn=", apply(BootReject[1:i,],2,mean),"\n")
if(do.grobs) {
Tots=Catch %>% group_by(lgth) %>%
summarize(n1=sum(n1),n2=sum(n2),y=n2/(n1+n2)) %>% data.frame()
GrobList[[i]]=BootPlot(BootOut,lenseq,phi0,Data=Tots) } }
if(do.perm) {
ObsStat=permLRT(Catch,Vnames)
PermOut=permSELECT(Catch,Vnames,permLRT,haul="TowID",nsim=nperms)
permPval[i,1]=calcPermP(ObsStat[1],PermOut[,1])
permPval[i,2]=calcPermP(ObsStat[2],PermOut[,2])
#permDiff=cbind(t(PermOut),ObsStat)-ObsStat
#permDiff=t(PermOut)-ObsStat
#permPval[i,]=apply( permDiff,1,function(x) mean(x>=0) )
cat("Permutational p-values",round(permPval[i,],3))
#permPval[i]=mean(c(PermOut,ObsStat)>=ObsStat)
#permSignif=mean( permPval[1:i]<=0.05 )
if(i>1) {
permSignif=apply( permPval[1:i,],2,function(x) mean(x<=0.05))
cat(".....  Running perm propn",permSignif,"\n") }
#cat("Perm",ifelse(permPval[i]<=0.05,"Signif","Not signif"),". p=",permSignif,"\n")
} }
BootSignif=apply(BootReject,2,mean)
SignifLength=sapply(lensOutList,function(x) length(x))
sum(SignifLength)/(nsims*length(lenseq))
PermReject=permPval<=0.05
PermSignif=apply(PermReject,2,mean)
cat("\nBootstrap rejection rates of Hnull and H0.5 are",BootSignif)
cat("\nPermutation rejection rates of Hnull and H0.5 are",PermSignif)
Vnames=c("lgth","n1","n2")
BHV.type="BHV"
phi0=0.5 #For H0:r(l)=phi0
#nsims=1000; nboots=400; nperms=400; Method=2
nsims=100; nboots=100; nperms=100; Method=2
do.grobs=T; GrobList=as.list(1:nsims)
lensOutList=as.list(1:nsims)
do.boot=T
BootReject=matrix(F,nsims,2); colnames(BootReject)=c("constant","phi0")
do.perm=T; permPval=matrix(NA,nsims,2); permSignif=permPval
r=function(l) rlogist(l,beta=c(-9,0.2),lo=0.45,hi=0.55)
r=function(l) rlogist(l,beta=c(-4.5,0.1),lo=0.45,hi=0.55)
#r=function(l) rlogist(l,beta=c(-2.25,0.05),lo=0.45,hi=0.55)
#r=function(l) rlogist(l,beta=c(-450,10),lo=0.45,hi=0.55)
#r=NULL
#r=function(l) rquad(l,k=5000)
for(i in 1:nsims) {
print(i)
Catch=SimTows(N=1000,nTows=20,Pars,lenseq,p.sd=0.1,eps=0.0,rmu=r,type="BHV",b=b3)
#Fit=GAM(Catch,c("lgth","n1","n2"))
if(do.boot) {
BootOut=bootSELECT(Catch,Vnames,bootPredn,haul="TowID",nsim=nboots)
#BootOut=bootSELECT(Fit,bootPredn,haul="TowID",nsim=nboots)
Bnds=t( apply(BootOut,2,quantile,prob=c(0.025,0.975),type=6) )
#Test H0:r(l)=phi0
lensOut=lenseq[Bnds[,1]>phi0 | Bnds[,2]<phi0]
lensOutList[[i]]=lensOut
if(length(lensOut)>0) BootReject[i,"phi0"]=T
if(max(Bnds[,1])>min(Bnds[,2])) BootReject[i,"constant"]=T
cat("Sim",i,"Bootstrap rejection:", BootReject[i,])
if(i>1) cat(".... Running boot propn=", apply(BootReject[1:i,],2,mean),"\n")
if(do.grobs) {
Tots=Catch %>% group_by(lgth) %>%
summarize(n1=sum(n1),n2=sum(n2),y=n2/(n1+n2)) %>% data.frame()
GrobList[[i]]=BootPlot(BootOut,lenseq,phi0,Data=Tots) } }
if(do.perm) {
ObsStat=permLRT(Catch,Vnames)
PermOut=permSELECT(Catch,Vnames,permLRT,haul="TowID",nsim=nperms)
permPval[i,1]=calcPermP(ObsStat[1],PermOut[,1])
permPval[i,2]=calcPermP(ObsStat[2],PermOut[,2])
#permDiff=cbind(t(PermOut),ObsStat)-ObsStat
#permDiff=t(PermOut)-ObsStat
#permPval[i,]=apply( permDiff,1,function(x) mean(x>=0) )
cat("Permutational p-values",round(permPval[i,],3))
#permPval[i]=mean(c(PermOut,ObsStat)>=ObsStat)
#permSignif=mean( permPval[1:i]<=0.05 )
if(i>1) {
permSignif=apply( permPval[1:i,],2,function(x) mean(x<=0.05))
cat(".....  Running perm propn",permSignif,"\n") }
#cat("Perm",ifelse(permPval[i]<=0.05,"Signif","Not signif"),". p=",permSignif,"\n")
} }
BootSignif=apply(BootReject,2,mean)
SignifLength=sapply(lensOutList,function(x) length(x))
sum(SignifLength)/(nsims*length(lenseq))
PermReject=permPval<=0.05
PermSignif=apply(PermReject,2,mean)
cat("\nBootstrap rejection rates of Hnull and H0.5 are",BootSignif)
cat("\nPermutation rejection rates of Hnull and H0.5 are",PermSignif)
Vnames=c("lgth","n1","n2")
BHV.type="BHV"
phi0=0.5 #For H0:r(l)=phi0
#nsims=1000; nboots=400; nperms=400; Method=2
nsims=100; nboots=100; nperms=100; Method=2
do.grobs=T; GrobList=as.list(1:nsims)
lensOutList=as.list(1:nsims)
do.boot=T
BootReject=matrix(F,nsims,2); colnames(BootReject)=c("constant","phi0")
do.perm=T; permPval=matrix(NA,nsims,2); permSignif=permPval
r=function(l) rlogist(l,beta=c(-9,0.2),lo=0.45,hi=0.55)
r=function(l) rlogist(l,beta=c(-4.5,0.1),lo=0.45,hi=0.55)
r=function(l) rlogist(l,beta=c(-4.5,0.1),lo=0.475,hi=0.525)
#r=function(l) rlogist(l,beta=c(-2.25,0.05),lo=0.45,hi=0.55)
#r=function(l) rlogist(l,beta=c(-450,10),lo=0.45,hi=0.55)
#r=NULL
#r=function(l) rquad(l,k=5000)
for(i in 1:nsims) {
print(i)
Catch=SimTows(N=1000,nTows=10,Pars,lenseq,p.sd=0.1,eps=0.0,rmu=r,type="BHV",b=b3)
#Fit=GAM(Catch,c("lgth","n1","n2"))
if(do.boot) {
BootOut=bootSELECT(Catch,Vnames,bootPredn,haul="TowID",nsim=nboots)
#BootOut=bootSELECT(Fit,bootPredn,haul="TowID",nsim=nboots)
Bnds=t( apply(BootOut,2,quantile,prob=c(0.025,0.975),type=6) )
#Test H0:r(l)=phi0
lensOut=lenseq[Bnds[,1]>phi0 | Bnds[,2]<phi0]
lensOutList[[i]]=lensOut
if(length(lensOut)>0) BootReject[i,"phi0"]=T
if(max(Bnds[,1])>min(Bnds[,2])) BootReject[i,"constant"]=T
cat("Sim",i,"Bootstrap rejection:", BootReject[i,])
if(i>1) cat(".... Running boot propn=", apply(BootReject[1:i,],2,mean),"\n")
if(do.grobs) {
Tots=Catch %>% group_by(lgth) %>%
summarize(n1=sum(n1),n2=sum(n2),y=n2/(n1+n2)) %>% data.frame()
GrobList[[i]]=BootPlot(BootOut,lenseq,phi0,Data=Tots) } }
if(do.perm) {
ObsStat=permLRT(Catch,Vnames)
PermOut=permSELECT(Catch,Vnames,permLRT,haul="TowID",nsim=nperms)
permPval[i,1]=calcPermP(ObsStat[1],PermOut[,1])
permPval[i,2]=calcPermP(ObsStat[2],PermOut[,2])
#permDiff=cbind(t(PermOut),ObsStat)-ObsStat
#permDiff=t(PermOut)-ObsStat
#permPval[i,]=apply( permDiff,1,function(x) mean(x>=0) )
cat("Permutational p-values",round(permPval[i,],3))
#permPval[i]=mean(c(PermOut,ObsStat)>=ObsStat)
#permSignif=mean( permPval[1:i]<=0.05 )
if(i>1) {
permSignif=apply( permPval[1:i,],2,function(x) mean(x<=0.05))
cat(".....  Running perm propn",permSignif,"\n") }
#cat("Perm",ifelse(permPval[i]<=0.05,"Signif","Not signif"),". p=",permSignif,"\n")
} }
BootSignif=apply(BootReject,2,mean)
SignifLength=sapply(lensOutList,function(x) length(x))
sum(SignifLength)/(nsims*length(lenseq))
PermReject=permPval<=0.05
PermSignif=apply(PermReject,2,mean)
cat("\nBootstrap rejection rates of Hnull and H0.5 are",BootSignif)
cat("\nPermutation rejection rates of Hnull and H0.5 are",PermSignif)
Vnames=c("lgth","n1","n2")
BHV.type="BHV"
phi0=0.5 #For H0:r(l)=phi0
#nsims=1000; nboots=400; nperms=400; Method=2
nsims=100; nboots=100; nperms=100; Method=2
do.grobs=T; GrobList=as.list(1:nsims)
lensOutList=as.list(1:nsims)
do.boot=T
BootReject=matrix(F,nsims,2); colnames(BootReject)=c("constant","phi0")
do.perm=T; permPval=matrix(NA,nsims,2); permSignif=permPval
r=function(l) rlogist(l,beta=c(-9,0.2),lo=0.45,hi=0.55)
r=function(l) rlogist(l,beta=c(-4.5,0.1),lo=0.45,hi=0.55)
#r=function(l) rlogist(l,beta=c(-4.5,0.1),lo=0.475,hi=0.525)
#r=function(l) rlogist(l,beta=c(-2.25,0.05),lo=0.45,hi=0.55)
#r=function(l) rlogist(l,beta=c(-450,10),lo=0.45,hi=0.55)
#r=NULL
#r=function(l) rquad(l,k=5000)
for(i in 1:nsims) {
print(i)
Catch=SimTows(N=1000,nTows=10,Pars,lenseq,p.sd=0.1,eps=0.0,rmu=r,type="BHV",b=b3)
#Fit=GAM(Catch,c("lgth","n1","n2"))
if(do.boot) {
BootOut=bootSELECT(Catch,Vnames,bootPredn,haul="TowID",nsim=nboots)
#BootOut=bootSELECT(Fit,bootPredn,haul="TowID",nsim=nboots)
Bnds=t( apply(BootOut,2,quantile,prob=c(0.025,0.975),type=6) )
#Test H0:r(l)=phi0
lensOut=lenseq[Bnds[,1]>phi0 | Bnds[,2]<phi0]
lensOutList[[i]]=lensOut
if(length(lensOut)>0) BootReject[i,"phi0"]=T
if(max(Bnds[,1])>min(Bnds[,2])) BootReject[i,"constant"]=T
cat("Sim",i,"Bootstrap rejection:", BootReject[i,])
if(i>1) cat(".... Running boot propn=", apply(BootReject[1:i,],2,mean),"\n")
if(do.grobs) {
Tots=Catch %>% group_by(lgth) %>%
summarize(n1=sum(n1),n2=sum(n2),y=n2/(n1+n2)) %>% data.frame()
GrobList[[i]]=BootPlot(BootOut,lenseq,phi0,Data=Tots) } }
if(do.perm) {
ObsStat=permLRT(Catch,Vnames)
PermOut=permSELECT(Catch,Vnames,permLRT,haul="TowID",nsim=nperms)
permPval[i,1]=calcPermP(ObsStat[1],PermOut[,1])
permPval[i,2]=calcPermP(ObsStat[2],PermOut[,2])
#permDiff=cbind(t(PermOut),ObsStat)-ObsStat
#permDiff=t(PermOut)-ObsStat
#permPval[i,]=apply( permDiff,1,function(x) mean(x>=0) )
cat("Permutational p-values",round(permPval[i,],3))
#permPval[i]=mean(c(PermOut,ObsStat)>=ObsStat)
#permSignif=mean( permPval[1:i]<=0.05 )
if(i>1) {
permSignif=apply( permPval[1:i,],2,function(x) mean(x<=0.05))
cat(".....  Running perm propn",permSignif,"\n") }
#cat("Perm",ifelse(permPval[i]<=0.05,"Signif","Not signif"),". p=",permSignif,"\n")
} }
BootSignif=apply(BootReject,2,mean)
SignifLength=sapply(lensOutList,function(x) length(x))
sum(SignifLength)/(nsims*length(lenseq))
PermReject=permPval<=0.05
PermSignif=apply(PermReject,2,mean)
cat("\nBootstrap rejection rates of Hnull and H0.5 are",BootSignif)
cat("\nPermutation rejection rates of Hnull and H0.5 are",PermSignif)
Vnames=c("lgth","n1","n2")
BHV.type="BHV"
phi0=0.5 #For H0:r(l)=phi0
#nsims=1000; nboots=400; nperms=400; Method=2
nsims=100; nboots=100; nperms=100; Method=2
do.grobs=T; GrobList=as.list(1:nsims)
lensOutList=as.list(1:nsims)
do.boot=T
BootReject=matrix(F,nsims,2); colnames(BootReject)=c("constant","phi0")
do.perm=T; permPval=matrix(NA,nsims,2); permSignif=permPval
r=function(l) rlogist(l,beta=c(-9,0.2),lo=0.45,hi=0.55)
r=function(l) rlogist(l,beta=c(-4.5,0.1),lo=0.45,hi=0.55)
#r=function(l) rlogist(l,beta=c(-4.5,0.1),lo=0.475,hi=0.525)
#r=function(l) rlogist(l,beta=c(-2.25,0.05),lo=0.45,hi=0.55)
#r=function(l) rlogist(l,beta=c(-450,10),lo=0.45,hi=0.55)
#r=NULL
#r=function(l) rquad(l,k=5000)
for(i in 1:nsims) {
print(i)
Catch=SimTows(N=1000,nTows=10,Pars,lenseq,p.sd=0.1,eps=0.0,rmu=r,type="BHV",b=b3)
#Fit=GAM(Catch,c("lgth","n1","n2"))
if(do.boot) {
BootOut=bootSELECT(Catch,Vnames,bootPredn,haul="TowID",nsim=nboots)
#BootOut=bootSELECT(Fit,bootPredn,haul="TowID",nsim=nboots)
Bnds=t( apply(BootOut,2,quantile,prob=c(0.025,0.975),type=6) )
#Test H0:r(l)=phi0
lensOut=lenseq[Bnds[,1]>phi0 | Bnds[,2]<phi0]
lensOutList[[i]]=lensOut
if(length(lensOut)>0) BootReject[i,"phi0"]=T
if(max(Bnds[,1])>min(Bnds[,2])) BootReject[i,"constant"]=T
cat("Sim",i,"Bootstrap rejection:", BootReject[i,])
if(i>1) cat(".... Running boot propn=", apply(BootReject[1:i,],2,mean),"\n")
if(do.grobs) {
Tots=Catch %>% group_by(lgth) %>%
summarize(n1=sum(n1),n2=sum(n2),y=n2/(n1+n2)) %>% data.frame()
GrobList[[i]]=BootPlot(BootOut,lenseq,phi0,Data=Tots) } }
if(do.perm) {
ObsStat=permLRT(Catch,Vnames)
PermOut=permSELECT(Catch,Vnames,permLRT,haul="TowID",nsim=nperms)
permPval[i,1]=calcPermP(ObsStat[1],PermOut[,1])
permPval[i,2]=calcPermP(ObsStat[2],PermOut[,2])
#permDiff=cbind(t(PermOut),ObsStat)-ObsStat
#permDiff=t(PermOut)-ObsStat
#permPval[i,]=apply( permDiff,1,function(x) mean(x>=0) )
cat("Permutational p-values",round(permPval[i,],3))
#permPval[i]=mean(c(PermOut,ObsStat)>=ObsStat)
#permSignif=mean( permPval[1:i]<=0.05 )
if(i>1) {
permSignif=apply( permPval[1:i,],2,function(x) mean(x<=0.05))
cat(".....  Running perm propn",permSignif,"\n") }
#cat("Perm",ifelse(permPval[i]<=0.05,"Signif","Not signif"),". p=",permSignif,"\n")
} }
BootSignif=apply(BootReject,2,mean)
SignifLength=sapply(lensOutList,function(x) length(x))
sum(SignifLength)/(nsims*length(lenseq))
PermReject=permPval<=0.05
PermSignif=apply(PermReject,2,mean)
cat("\nBootstrap rejection rates of Hnull and H0.5 are",BootSignif)
cat("\nPermutation rejection rates of Hnull and H0.5 are",PermSignif)
Vnames=c("lgth","n1","n2")
BHV.type="BHV"
phi0=0.5 #For H0:r(l)=phi0
#nsims=1000; nboots=400; nperms=400; Method=2
nsims=100; nboots=100; nperms=100; Method=2
do.grobs=T; GrobList=as.list(1:nsims)
lensOutList=as.list(1:nsims)
do.boot=T
BootReject=matrix(F,nsims,2); colnames(BootReject)=c("constant","phi0")
do.perm=T; permPval=matrix(NA,nsims,2); permSignif=permPval
r=function(l) rlogist(l,beta=c(-9,0.2),lo=0.45,hi=0.55)
#r=function(l) rlogist(l,beta=c(-4.5,0.1),lo=0.45,hi=0.55)
#r=function(l) rlogist(l,beta=c(-4.5,0.1),lo=0.475,hi=0.525)
#r=function(l) rlogist(l,beta=c(-2.25,0.05),lo=0.45,hi=0.55)
#r=function(l) rlogist(l,beta=c(-450,10),lo=0.45,hi=0.55)
#r=NULL
#r=function(l) rquad(l,k=5000)
for(i in 1:nsims) {
print(i)
Catch=SimTows(N=1000,nTows=10,Pars,lenseq,p.sd=0.1,eps=0.0,rmu=r,type="BHV",b=b3)
#Fit=GAM(Catch,c("lgth","n1","n2"))
if(do.boot) {
BootOut=bootSELECT(Catch,Vnames,bootPredn,haul="TowID",nsim=nboots)
#BootOut=bootSELECT(Fit,bootPredn,haul="TowID",nsim=nboots)
Bnds=t( apply(BootOut,2,quantile,prob=c(0.025,0.975),type=6) )
#Test H0:r(l)=phi0
lensOut=lenseq[Bnds[,1]>phi0 | Bnds[,2]<phi0]
lensOutList[[i]]=lensOut
if(length(lensOut)>0) BootReject[i,"phi0"]=T
if(max(Bnds[,1])>min(Bnds[,2])) BootReject[i,"constant"]=T
cat("Sim",i,"Bootstrap rejection:", BootReject[i,])
if(i>1) cat(".... Running boot propn=", apply(BootReject[1:i,],2,mean),"\n")
if(do.grobs) {
Tots=Catch %>% group_by(lgth) %>%
summarize(n1=sum(n1),n2=sum(n2),y=n2/(n1+n2)) %>% data.frame()
GrobList[[i]]=BootPlot(BootOut,lenseq,phi0,Data=Tots) } }
if(do.perm) {
ObsStat=permLRT(Catch,Vnames)
PermOut=permSELECT(Catch,Vnames,permLRT,haul="TowID",nsim=nperms)
permPval[i,1]=calcPermP(ObsStat[1],PermOut[,1])
permPval[i,2]=calcPermP(ObsStat[2],PermOut[,2])
#permDiff=cbind(t(PermOut),ObsStat)-ObsStat
#permDiff=t(PermOut)-ObsStat
#permPval[i,]=apply( permDiff,1,function(x) mean(x>=0) )
cat("Permutational p-values",round(permPval[i,],3))
#permPval[i]=mean(c(PermOut,ObsStat)>=ObsStat)
#permSignif=mean( permPval[1:i]<=0.05 )
if(i>1) {
permSignif=apply( permPval[1:i,],2,function(x) mean(x<=0.05))
cat(".....  Running perm propn",permSignif,"\n") }
#cat("Perm",ifelse(permPval[i]<=0.05,"Signif","Not signif"),". p=",permSignif,"\n")
} }
BootSignif=apply(BootReject,2,mean)
SignifLength=sapply(lensOutList,function(x) length(x))
sum(SignifLength)/(nsims*length(lenseq))
PermReject=permPval<=0.05
PermSignif=apply(PermReject,2,mean)
cat("\nBootstrap rejection rates of Hnull and H0.5 are",BootSignif)
cat("\nPermutation rejection rates of Hnull and H0.5 are",PermSignif)
Vnames=c("lgth","n1","n2")
BHV.type="BHV"
phi0=0.5 #For H0:r(l)=phi0
#nsims=1000; nboots=400; nperms=400; Method=2
nsims=100; nboots=100; nperms=100; Method=2
do.grobs=T; GrobList=as.list(1:nsims)
lensOutList=as.list(1:nsims)
do.boot=T
BootReject=matrix(F,nsims,2); colnames(BootReject)=c("constant","phi0")
do.perm=T; permPval=matrix(NA,nsims,2); permSignif=permPval
r=function(l) rlogist(l,beta=c(-9,0.2),lo=0.45,hi=0.55)
#r=function(l) rlogist(l,beta=c(-4.5,0.1),lo=0.45,hi=0.55)
#r=function(l) rlogist(l,beta=c(-4.5,0.1),lo=0.475,hi=0.525)
r=function(l) rlogist(l,beta=c(-2.25,0.05),lo=0.45,hi=0.55)
#r=function(l) rlogist(l,beta=c(-450,10),lo=0.45,hi=0.55)
#r=NULL
#r=function(l) rquad(l,k=5000)
for(i in 1:nsims) {
print(i)
Catch=SimTows(N=400,nTows=10,Pars,lenseq,p.sd=0.1,eps=0.0,rmu=r,type="BHV",b=b3)
#Fit=GAM(Catch,c("lgth","n1","n2"))
if(do.boot) {
BootOut=bootSELECT(Catch,Vnames,bootPredn,haul="TowID",nsim=nboots)
#BootOut=bootSELECT(Fit,bootPredn,haul="TowID",nsim=nboots)
Bnds=t( apply(BootOut,2,quantile,prob=c(0.025,0.975),type=6) )
#Test H0:r(l)=phi0
lensOut=lenseq[Bnds[,1]>phi0 | Bnds[,2]<phi0]
lensOutList[[i]]=lensOut
if(length(lensOut)>0) BootReject[i,"phi0"]=T
if(max(Bnds[,1])>min(Bnds[,2])) BootReject[i,"constant"]=T
cat("Sim",i,"Bootstrap rejection:", BootReject[i,])
if(i>1) cat(".... Running boot propn=", apply(BootReject[1:i,],2,mean),"\n")
if(do.grobs) {
Tots=Catch %>% group_by(lgth) %>%
summarize(n1=sum(n1),n2=sum(n2),y=n2/(n1+n2)) %>% data.frame()
GrobList[[i]]=BootPlot(BootOut,lenseq,phi0,Data=Tots) } }
if(do.perm) {
ObsStat=permLRT(Catch,Vnames)
PermOut=permSELECT(Catch,Vnames,permLRT,haul="TowID",nsim=nperms)
permPval[i,1]=calcPermP(ObsStat[1],PermOut[,1])
permPval[i,2]=calcPermP(ObsStat[2],PermOut[,2])
#permDiff=cbind(t(PermOut),ObsStat)-ObsStat
#permDiff=t(PermOut)-ObsStat
#permPval[i,]=apply( permDiff,1,function(x) mean(x>=0) )
cat("Permutational p-values",round(permPval[i,],3))
#permPval[i]=mean(c(PermOut,ObsStat)>=ObsStat)
#permSignif=mean( permPval[1:i]<=0.05 )
if(i>1) {
permSignif=apply( permPval[1:i,],2,function(x) mean(x<=0.05))
cat(".....  Running perm propn",permSignif,"\n") }
#cat("Perm",ifelse(permPval[i]<=0.05,"Signif","Not signif"),". p=",permSignif,"\n")
} }
BootSignif=apply(BootReject,2,mean)
SignifLength=sapply(lensOutList,function(x) length(x))
sum(SignifLength)/(nsims*length(lenseq))
PermReject=permPval<=0.05
PermSignif=apply(PermReject,2,mean)
cat("\nBootstrap rejection rates of Hnull and H0.5 are",BootSignif)
cat("\nPermutation rejection rates of Hnull and H0.5 are",PermSignif)
Vnames=c("lgth","n1","n2")
BHV.type="BHV"
phi0=0.5 #For H0:r(l)=phi0
#nsims=1000; nboots=400; nperms=400; Method=2
nsims=100; nboots=100; nperms=100; Method=2
do.grobs=T; GrobList=as.list(1:nsims)
lensOutList=as.list(1:nsims)
do.boot=T
BootReject=matrix(F,nsims,2); colnames(BootReject)=c("constant","phi0")
do.perm=T; permPval=matrix(NA,nsims,2); permSignif=permPval
r=function(l) rlogist(l,beta=c(-9,0.2),lo=0.45,hi=0.55)
#r=function(l) rlogist(l,beta=c(-4.5,0.1),lo=0.45,hi=0.55)
#r=function(l) rlogist(l,beta=c(-4.5,0.1),lo=0.475,hi=0.525)
r=function(l) rlogist(l,beta=c(-2.25,0.05),lo=0.45,hi=0.55)
#r=function(l) rlogist(l,beta=c(-450,10),lo=0.45,hi=0.55)
#r=NULL
#r=function(l) rquad(l,k=5000)
for(i in 1:nsims) {
print(i)
Catch=SimTows(N=400,nTows=10,Pars,lenseq,p.sd=0.1,eps=0.0,rmu=r,type="BHV",b=b3)
#Fit=GAM(Catch,c("lgth","n1","n2"))
if(do.boot) {
BootOut=bootSELECT(Catch,Vnames,bootPredn,haul="TowID",nsim=nboots)
#BootOut=bootSELECT(Fit,bootPredn,haul="TowID",nsim=nboots)
Bnds=t( apply(BootOut,2,quantile,prob=c(0.025,0.975),type=6) )
#Test H0:r(l)=phi0
lensOut=lenseq[Bnds[,1]>phi0 | Bnds[,2]<phi0]
lensOutList[[i]]=lensOut
if(length(lensOut)>0) BootReject[i,"phi0"]=T
if(max(Bnds[,1])>min(Bnds[,2])) BootReject[i,"constant"]=T
cat("Sim",i,"Bootstrap rejection:", BootReject[i,])
if(i>1) cat(".... Running boot propn=", apply(BootReject[1:i,],2,mean),"\n")
if(do.grobs) {
Tots=Catch %>% group_by(lgth) %>%
summarize(n1=sum(n1),n2=sum(n2),y=n2/(n1+n2)) %>% data.frame()
GrobList[[i]]=BootPlot(BootOut,lenseq,phi0,Data=Tots) } }
if(do.perm) {
ObsStat=permLRT(Catch,Vnames)
PermOut=permSELECT(Catch,Vnames,permLRT,haul="TowID",nsim=nperms)
permPval[i,1]=calcPermP(ObsStat[1],PermOut[,1])
permPval[i,2]=calcPermP(ObsStat[2],PermOut[,2])
#permDiff=cbind(t(PermOut),ObsStat)-ObsStat
#permDiff=t(PermOut)-ObsStat
#permPval[i,]=apply( permDiff,1,function(x) mean(x>=0) )
cat("Permutational p-values",round(permPval[i,],3))
#permPval[i]=mean(c(PermOut,ObsStat)>=ObsStat)
#permSignif=mean( permPval[1:i]<=0.05 )
if(i>1) {
permSignif=apply( permPval[1:i,],2,function(x) mean(x<=0.05))
cat(".....  Running perm propn",permSignif,"\n") }
#cat("Perm",ifelse(permPval[i]<=0.05,"Signif","Not signif"),". p=",permSignif,"\n")
} }
BootSignif=apply(BootReject,2,mean)
SignifLength=sapply(lensOutList,function(x) length(x))
sum(SignifLength)/(nsims*length(lenseq))
PermReject=permPval<=0.05
PermSignif=apply(PermReject,2,mean)
cat("\nBootstrap rejection rates of Hnull and H0.5 are",BootSignif)
cat("\nPermutation rejection rates of Hnull and H0.5 are",PermSignif)

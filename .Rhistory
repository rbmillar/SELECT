df[df$Haul==X.Haul,c("nB","nA","qB","qA")]
#X.Haul2=unique(Pairs.df$Haul)[4]
#X.df[X.df$Haul==X.Haul2,c("nA","nB","qA","qB")]=
#                        df[df$Haul==X.Haul2,c("nB","nA","qB","qA")]
X.df |>
summarize(PropnA=sum(nA[CL>=MLS])/sum(nA),
PropnB=sum(nB[CL>=MLS])/sum(nB),
Ratio=PropnB/PropnA, N=sum(nA+nB), Propn=sum(nB)/N)
X.Haul=unique(Pairs.df$Haul)[10]
X.df=df=Catches.df
X.df[X.df$Haul==X.Haul,c("nA","nB","qA","qB")]=
df[df$Haul==X.Haul,c("nB","nA","qB","qA")]
#X.Haul2=unique(Pairs.df$Haul)[4]
#X.df[X.df$Haul==X.Haul2,c("nA","nB","qA","qB")]=
#                        df[df$Haul==X.Haul2,c("nB","nA","qB","qA")]
X.df |>
summarize(PropnA=sum(nA[CL>=MLS])/sum(nA),
PropnB=sum(nB[CL>=MLS])/sum(nB),
Ratio=PropnB/PropnA, N=sum(nA+nB), Propn=sum(nB)/N)
X.Haul=unique(Pairs.df$Haul)[11]
X.df=df=Catches.df
X.df[X.df$Haul==X.Haul,c("nA","nB","qA","qB")]=
df[df$Haul==X.Haul,c("nB","nA","qB","qA")]
#X.Haul2=unique(Pairs.df$Haul)[4]
#X.df[X.df$Haul==X.Haul2,c("nA","nB","qA","qB")]=
#                        df[df$Haul==X.Haul2,c("nB","nA","qB","qA")]
X.df |>
summarize(PropnA=sum(nA[CL>=MLS])/sum(nA),
PropnB=sum(nB[CL>=MLS])/sum(nB),
Ratio=PropnB/PropnA, N=sum(nA+nB), Propn=sum(nB)/N)
X.Haul=unique(Pairs.df$Haul)[12]
X.df=df=Catches.df
X.df[X.df$Haul==X.Haul,c("nA","nB","qA","qB")]=
df[df$Haul==X.Haul,c("nB","nA","qB","qA")]
#X.Haul2=unique(Pairs.df$Haul)[4]
#X.df[X.df$Haul==X.Haul2,c("nA","nB","qA","qB")]=
#                        df[df$Haul==X.Haul2,c("nB","nA","qB","qA")]
X.df |>
summarize(PropnA=sum(nA[CL>=MLS])/sum(nA),
PropnB=sum(nB[CL>=MLS])/sum(nB),
Ratio=PropnB/PropnA, N=sum(nA+nB), Propn=sum(nB)/N)
MLS=15 #Minimum legal size
cat("Number of haul pairs is",length(unique(Pairs.df$Haul)),"\n")
#NB: No need to correct for q, since q is same within gear
#Catches.df=Pairs.df |> transform(nA=nA/qA,nB=nB/qB)
Catches.df=Pairs.df
Catches.df |> group_by(Haul) |>
summarize(PropnA=sum(nA[CL>=MLS])/sum(nA),
PropnB=sum(nB[CL>=MLS])/sum(nB),
Ratio=PropnB/PropnA, N=sum(nA+nB), Propn=sum(nB)/N)
#Overall ratio
Catches.df |>
summarize(PropnA=sum(nA[CL>=MLS])/sum(nA),
PropnB=sum(nB[CL>=MLS])/sum(nB),
Ratio=PropnB/PropnA)
#Merge the gears with the same identical haul-pair ID (i.e., twin tows)
Pairs.df = inner_join(GearA.df,GearB.df,by=c("Haul","CL"))
#Convert scaling factors to sampling fractions
Pairs.df = Pairs.df |>
transform(qA=1/sfA,qB=1/sfB) |> filter(CL>=5 & CL<=25)
Pairs.df$qA=Pairs.df$qB=1 #############!!!!!!################
MLS=15 #Minimum legal size
cat("Number of haul pairs is",length(unique(Pairs.df$Haul)),"\n")
#NB: No need to correct for q, since q is same within gear
Catches.df=Pairs.df |> transform(nA=nA/qA,nB=nB/qB)
Catches.df |> group_by(Haul) |>
summarize(PropnA=sum(nA[CL>=MLS])/sum(nA),
PropnB=sum(nB[CL>=MLS])/sum(nB),
Ratio=PropnB/PropnA, N=sum(nA+nB), Propn=sum(nB)/N)
#Overall ratio
Catches.df |>
summarize(PropnA=sum(nA[CL>=MLS])/sum(nA),
PropnB=sum(nB[CL>=MLS])/sum(nB),
Ratio=PropnB/PropnA)
#Define the bootstrap prediction function
CLseq=seq(5,25,0.5) #Carapace lengths to use for predn
PrednFnc=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names,q.names) #Defaults
predict(SplineFit,newdata=data.frame(CL=CLseq),type="response") }
#Check that it works
predn=PrednFnc(Pairs.df,var.names)
#Plot predictions against observed proportions
Tots.df=Raw2Tots(Pairs.df,var.names,q.names) |>
transform(lgth=CL, y=nB/(nA+nB))
plot(y~CL,data=Tots.df,ylim=c(0,1),xlab="Carapace length (mm)",
ylab="Gear B catch share")
points(CLseq,predn,type="l")
abline(h=0.5,lty=3)
head(Pairs.df)
BootPreds=bootSELECT(Pairs.df,var.names,PrednFnc,haul="Haul",nsim=nsim,
paired=T,verbose=T)
#Merge the gears with the same identical haul-pair ID (i.e., twin tows)
Pairs.df = inner_join(GearA.df,GearB.df,by=c("Haul","CL"))
#Convert scaling factors to sampling fractions
Pairs.df = Pairs.df |>
transform(qA=1/sfA,qB=1/sfB) |> filter(CL>=5 & CL<=25)
MLS=15 #Minimum legal size
cat("Number of haul pairs is",length(unique(Pairs.df$Haul)),"\n")
#NB: No need to correct for q, since q is same within gear
Catches.df=Pairs.df |> transform(nA=nA/qA,nB=nB/qB)
Catches.df |> group_by(Haul) |>
summarize(PropnA=sum(nA[CL>=MLS])/sum(nA),
PropnB=sum(nB[CL>=MLS])/sum(nB),
Ratio=PropnB/PropnA, N=sum(nA+nB), Propn=sum(nB)/N)
#Overall ratio
Catches.df |>
summarize(PropnA=sum(nA[CL>=MLS])/sum(nA),
PropnB=sum(nB[CL>=MLS])/sum(nB),
Ratio=PropnB/PropnA)
#Define the bootstrap prediction function
CLseq=seq(5,25,0.5) #Carapace lengths to use for predn
PrednFnc=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names,q.names) #Defaults
predict(SplineFit,newdata=data.frame(CL=CLseq),type="response") }
#Check that it works
predn=PrednFnc(Pairs.df,var.names)
#Plot predictions against observed proportions
Tots.df=Raw2Tots(Pairs.df,var.names,q.names) |>
transform(lgth=CL, y=nB/(nA+nB))
plot(y~CL,data=Tots.df,ylim=c(0,1),xlab="Carapace length (mm)",
ylab="Gear B catch share")
points(CLseq,predn,type="l")
abline(h=0.5,lty=3)
head(Catches.df)
#Define the deviance explained function
FitStat=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names,q.names,quasi=F)
#summary(SplineFit)$dev.expl
summary(SplineFit)$r.sq
}
AllStats=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names,q.names=NULL,quasi=F)
D=summary(SplineFit)$dev.expl
yhat=fitted(SplineFit)
nBA=SplineFit$model[[1]] #Numbers in gear B (column 1) and A (column 2)
ybar=sum(nBA[,1])/sum(nBA);
n=nBA[,1]+nBA[,2]
y=nBA[,1]
NullLLhood0.5=sum( dbinom2(y,n,0.5,log=T) )
NullLLhood=sum( dbinom2(y,n,ybar,log=T) )
SplineLLhood=sum( dbinom2(y,n,yhat,log=T) )
FullLLhood=sum( dbinom2(y,n,ifelse(n>0,y/n,0),log=T) )
LRT=2*(SplineLLhood-NullLLhood)
LRT0.5=2*(SplineLLhood-NullLLhood0.5)
ModelDev=2*(FullLLhood-SplineLLhood)
NullDev0.5=2*(FullLLhood-NullLLhood0.5)
D0.5=1-ModelDev/NullDev0.5
nlen=length(yhat)
names(y)=names(yhat)=1:nlen
Stats=c(D=D,D5=D0.5,null=NullLLhood, null5=NullLLhood0.5,full=FullLLhood,
model=SplineLLhood,LRT=LRT,LRT5=LRT0.5,ybar=ybar,y=y,yhat=yhat)
}
#nlen=length(yhat); names(yhat)=1:nlen
PermStat=AllStats
#PermStat=LRT
#Check that it works
#Obs=PermStat(Pairs.df,var.names)
Obs=FitStat(Catches.df,var.names)
cat("Proportion of deviance explained is",Obs,"\n")
Obs
#Define the deviance explained function
FitStat=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names,q.names,quasi=F)
#summary(SplineFit)$dev.expl
summary(SplineFit)$r.sq
}
AllStats=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names,q.names=NULL,quasi=F)
D=summary(SplineFit)$dev.expl
yhat=fitted(SplineFit)
nBA=SplineFit$model[[1]] #Numbers in gear B (column 1) and A (column 2)
ybar=sum(nBA[,1])/sum(nBA);
n=nBA[,1]+nBA[,2]
y=nBA[,1]
NullLLhood0.5=sum( dbinom2(y,n,0.5,log=T) )
NullLLhood=sum( dbinom2(y,n,ybar,log=T) )
SplineLLhood=sum( dbinom2(y,n,yhat,log=T) )
FullLLhood=sum( dbinom2(y,n,ifelse(n>0,y/n,0),log=T) )
LRT=2*(SplineLLhood-NullLLhood)
LRT0.5=2*(SplineLLhood-NullLLhood0.5)
ModelDev=2*(FullLLhood-SplineLLhood)
NullDev0.5=2*(FullLLhood-NullLLhood0.5)
D0.5=1-ModelDev/NullDev0.5
nlen=length(yhat)
names(y)=names(yhat)=1:nlen
Stats=c(D=D,D5=D0.5,null=NullLLhood, null5=NullLLhood0.5,full=FullLLhood,
model=SplineLLhood,LRT=LRT,LRT5=LRT0.5,ybar=ybar,y=y,yhat=yhat)
}
#nlen=length(yhat); names(yhat)=1:nlen
PermStat=AllStats
#PermStat=LRT
#Check that it works
Obs=PermStat(Catches.df,var.names)
cat("Proportion of deviance explained is",Obs,"\n")
Obs
Perm=permSELECT(Pairs.df,var.names,PermStat,haul="Haul",nsim=1000,
paired=T,verbose=T)
colnames(Perm)=names(Obs)
#Proportion of permuted gof values greater than the observed
#cat("The p-value for a CL effect is",mean(PermDev>=ObsDev))
pairs(Perm[,1:9])
summary(ybar)
Call(1)
Test=function(x,q.names=NULL) {cat("\n q.names")}
Call=function(x,...) Test(x,)
Call(1)
Test=function(x,q.names=NULL) {cat("\n", q.names)}
Call=function(x,...) Test(x,)
Call(1)
Call(1)
Call(1, q.names="test")
Test=function(x,q.names="NUL",...) {cat("\n", q.names)}
Call=function(x,...) Test(x,...)
Call(1)
Call(1, q.names="test")
Test=function(x,q.names=NULL,...) {cat("\n", q.names)}
Call=function(x,...) Test(x,...)
Call(1)
Call(1, q.names="test")
Test=function(x,q.names=NULL,...) {
if(is.null(qnames)) cat("q.names is NULL\n")
else cat("q.names is", q.names, "\n")}
Call=function(x,...) Test(x,...)
Call(1)
Test=function(x,q.names=NULL,...) {
if(is.null(q.names)) cat("q.names is NULL\n")
else cat("q.names is", q.names, "\n")}
Call=function(x,...) Test(x,...)
Call(1)
Call(1, q.names="test")
Perm=permSELECT(Pairs.df,var.names,PermStat,haul="Haul",nsim=1000,q.names="adsf",
paired=T,verbose=T)
knitr::opts_chunk$set(fig.height = 3.5)
#devtools::install("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT")
#devtools::install_github("rbmillar/SELECT",force=T)
require(tidyverse)
require(mgcv)
require(SELECT)
require(readxl) #This package is installed with tidyverse
nsim=1000 #For bootstrapping and permutation tests, set to >=1000 in practice
#uninstall SELECT package
GearA.df=read_excel("SchoolPrawnLenFreqs.xlsx", sheet = "32 square trawl")
GearB.df=read_excel("SchoolPrawnLenFreqs.xlsx", sheet = "35 square trawl")
#The "Day" variable is actually the unique haul-pair identifier
GearA.df = GearA.df |> rename(Haul=Day, nA=No.school, sfA=Sf.school)
GearB.df = GearB.df |> rename(Haul=Day, nB=No.school, sfB=Sf.school)
#Merge the gears with the same identical haul-pair ID (i.e., twin tows)
Pairs.df = inner_join(GearA.df,GearB.df,by=c("Haul","CL"))
#Convert scaling factors to sampling fractions
Pairs.df = Pairs.df |>
transform(qA=1/sfA,qB=1/sfB) |> filter(CL>=5 & CL<=25)
MLS=15 #Minimum legal size
cat("Number of haul pairs is",length(unique(Pairs.df$Haul)),"\n")
#NB: No need to correct for q, since q is same within gear
Catches.df=Pairs.df |> transform(nA=nA/qA,nB=nB/qB)
Catches.df |> group_by(Haul) |>
summarize(PropnA=sum(nA[CL>=MLS])/sum(nA),
PropnB=sum(nB[CL>=MLS])/sum(nB),
Ratio=PropnB/PropnA, N=sum(nA+nB), Propn=sum(nB)/N)
#Overall ratio
Catches.df |>
summarize(PropnA=sum(nA[CL>=MLS])/sum(nA),
PropnB=sum(nB[CL>=MLS])/sum(nB),
Ratio=PropnB/PropnA)
X.Haul=unique(Pairs.df$Haul)[12]
X.df=df=Catches.df
X.df[X.df$Haul==X.Haul,c("nA","nB","qA","qB")]=
df[df$Haul==X.Haul,c("nB","nA","qB","qA")]
#X.Haul2=unique(Pairs.df$Haul)[4]
#X.df[X.df$Haul==X.Haul2,c("nA","nB","qA","qB")]=
#                        df[df$Haul==X.Haul2,c("nB","nA","qB","qA")]
X.df |>
summarize(PropnA=sum(nA[CL>=MLS])/sum(nA),
PropnB=sum(nB[CL>=MLS])/sum(nB),
Ratio=PropnB/PropnA, N=sum(nA+nB), Propn=sum(nB)/N)
names(Pairs.df)
var.names=c("CL","nA","nB")
q.names=c("qA","qB")
#Define the bootstrap prediction function
CLseq=seq(5,25,0.5) #Carapace lengths to use for predn
PrednFnc=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names,q.names) #Defaults
predict(SplineFit,newdata=data.frame(CL=CLseq),type="response") }
#Check that it works
predn=PrednFnc(Pairs.df,var.names)
#Plot predictions against observed proportions
Tots.df=Raw2Tots(Pairs.df,var.names,q.names) |>
transform(lgth=CL, y=nB/(nA+nB))
plot(y~CL,data=Tots.df,ylim=c(0,1),xlab="Carapace length (mm)",
ylab="Gear B catch share")
points(CLseq,predn,type="l")
abline(h=0.5,lty=3)
BootPreds=bootSELECT(Pairs.df,var.names,PrednFnc,haul="Haul",nsim=nsim,
paired=T,verbose=T)
BootPlot(BootPreds,CLseq,predn,Data=Tots.df) +
geom_hline(yintercept=0.5,linetype="dashed")
#Define the deviance explained function
FitStat=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names,q.names,quasi=F)
#summary(SplineFit)$dev.expl
summary(SplineFit)$r.sq
}
AllStats=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names,q.names,quasi=F)
D=summary(SplineFit)$dev.expl
yhat=fitted(SplineFit)
nBA=SplineFit$model[[1]] #Numbers in gear B (column 1) and A (column 2)
ybar=sum(nBA[,1])/sum(nBA);
n=nBA[,1]+nBA[,2]
y=nBA[,1]
NullLLhood0.5=sum( dbinom2(y,n,0.5,log=T) )
NullLLhood=sum( dbinom2(y,n,ybar,log=T) )
SplineLLhood=sum( dbinom2(y,n,yhat,log=T) )
FullLLhood=sum( dbinom2(y,n,ifelse(n>0,y/n,0),log=T) )
LRT=2*(SplineLLhood-NullLLhood)
LRT0.5=2*(SplineLLhood-NullLLhood0.5)
ModelDev=2*(FullLLhood-SplineLLhood)
NullDev0.5=2*(FullLLhood-NullLLhood0.5)
D0.5=1-ModelDev/NullDev0.5
nlen=length(yhat)
names(y)=names(yhat)=1:nlen
Stats=c(D=D,D5=D0.5,null=NullLLhood, null5=NullLLhood0.5,full=FullLLhood,
model=SplineLLhood,LRT=LRT,LRT5=LRT0.5,ybar=ybar,y=y,yhat=yhat)
}
#nlen=length(yhat); names(yhat)=1:nlen
PermStat=AllStats
#PermStat=LRT
#Check that it works
#Obs=PermStat(Catches.df,var.names) #Use with qnames=NULL
Obs=PermStat(Pairs.df,var.names)
cat("Proportion of deviance explained is",Obs,"\n")
Perm=permSELECT(Pairs.df,var.names,PermStat,haul="Haul",nsim=1000,q.names="adsf",
paired=T,verbose=T)
Perm=permSELECT(Pairs.df,var.names,PermStat,haul="Haul",nsim=1000,
paired=T,verbose=T,q.names="adsf")
Perm=permSELECT(Pairs.df,var.names,PermStat,haul="Haul",nsim=1000,
paired=T,verbose=T,q.names=q.names)
#Define the bootstrap prediction function
CLseq=seq(5,25,0.5) #Carapace lengths to use for predn
PrednFnc=function(data,var.names,q.names) {
SplineFit=SplineSELECT(data,var.names,q.names) #Defaults
predict(SplineFit,newdata=data.frame(CL=CLseq),type="response") }
#Check that it works
predn=PrednFnc(Pairs.df,var.names,q.names)
#Plot predictions against observed proportions
Tots.df=Raw2Tots(Pairs.df,var.names,q.names) |>
transform(lgth=CL, y=nB/(nA+nB))
plot(y~CL,data=Tots.df,ylim=c(0,1),xlab="Carapace length (mm)",
ylab="Gear B catch share")
points(CLseq,predn,type="l")
abline(h=0.5,lty=3)
#Define the deviance explained function
FitStat=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names,q.names,quasi=F)
#summary(SplineFit)$dev.expl
summary(SplineFit)$r.sq
}
AllStats=function(data,var.names,q.names) {
SplineFit=SplineSELECT(data,var.names,q.names,quasi=F)
D=summary(SplineFit)$dev.expl
yhat=fitted(SplineFit)
nBA=SplineFit$model[[1]] #Numbers in gear B (column 1) and A (column 2)
ybar=sum(nBA[,1])/sum(nBA);
n=nBA[,1]+nBA[,2]
y=nBA[,1]
NullLLhood0.5=sum( dbinom2(y,n,0.5,log=T) )
NullLLhood=sum( dbinom2(y,n,ybar,log=T) )
SplineLLhood=sum( dbinom2(y,n,yhat,log=T) )
FullLLhood=sum( dbinom2(y,n,ifelse(n>0,y/n,0),log=T) )
LRT=2*(SplineLLhood-NullLLhood)
LRT0.5=2*(SplineLLhood-NullLLhood0.5)
ModelDev=2*(FullLLhood-SplineLLhood)
NullDev0.5=2*(FullLLhood-NullLLhood0.5)
D0.5=1-ModelDev/NullDev0.5
nlen=length(yhat)
names(y)=names(yhat)=1:nlen
Stats=c(D=D,D5=D0.5,null=NullLLhood, null5=NullLLhood0.5,full=FullLLhood,
model=SplineLLhood,LRT=LRT,LRT5=LRT0.5,ybar=ybar,y=y,yhat=yhat)
}
#nlen=length(yhat); names(yhat)=1:nlen
PermStat=AllStats
#PermStat=LRT
#Check that it works
#Obs=PermStat(Catches.df,var.names) #Use with qnames=NULL
Obs=PermStat(Pairs.df,var.names,q.names)
cat("Proportion of deviance explained is",Obs,"\n")
Perm=permSELECT(Pairs.df,var.names,PermStat,haul="Haul",nsim=1000,
paired=T,verbose=T,q.names=q.names)
colnames(Perm)=names(Obs)
#Proportion of permuted gof values greater than the observed
#cat("The p-value for a CL effect is",mean(PermDev>=ObsDev))
pairs(Perm[,1:9])
summary(Perm[,"ybar"])
pval=function(diff) mean(diff>=0)
Stats=c("D","D5","LRT","LRT5")
Obs[Stats]
Diff=t(t(Perm[,Stats])-Obs[Stats])
apply(Diff,2,pval)
devtools::install("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT")
AllStats
SELECT::AllStats
source("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R/BOOTSTRAP&PERMUTATION.R")
ls()
knitr::opts_chunk$set(fig.height = 3.5)
#devtools::install("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT")
#devtools::install_github("rbmillar/SELECT",force=T)
require(tidyverse)
require(mgcv)
require(SELECT)
require(readxl) #This package is installed with tidyverse
nsim=9 #For bootstrapping and permutation tests, set to >=999 in practice
GearA.df=read_excel("SchoolPrawnLenFreqs.xlsx", sheet = "32 square trawl")
GearB.df=read_excel("SchoolPrawnLenFreqs.xlsx", sheet = "35 square trawl")
#The "Day" variable is actually the unique haul-pair identifier
GearA.df = GearA.df |> rename(Haul=Day, nA=No.school, sfA=Sf.school)
GearB.df = GearB.df |> rename(Haul=Day, nB=No.school, sfB=Sf.school)
#Merge the gears with the same identical haul-pair ID (i.e., twin tows)
Pairs.df = inner_join(GearA.df,GearB.df,by=c("Haul","CL"))
#Convert scaling factors to sampling fractions
Pairs.df = Pairs.df |>
transform(qA=1/sfA,qB=1/sfB) |> filter(CL>=5 & CL<=25)
names(Pairs.df)
vNames=c("CL","nA","nB")
qNames=c("qA","qB")
#Define the bootstrap prediction function
CLseq=seq(5,25,0.5) #Carapace lengths to use for predn
PrednFnc=function(data,var.names,q.names) {
SplineFit=SplineSELECT(data,var.names,q.names) #Defaults
predict(SplineFit,newdata=data.frame(CL=CLseq),type="response") }
#Check that it works
predn=PrednFnc(Pairs.df,vNames,qNames)
#Plot predictions against observed proportions
Tots.df=Raw2Tots(Pairs.df,vNames,qNames) |>
transform(lgth=CL, y=nB/(nA+nB))
plot(y~CL,data=Tots.df,ylim=c(0,1),xlab="Carapace length (mm)",
ylab="Gear B catch share")
points(CLseq,predn,type="l")
abline(h=0.5,lty=3)
BootPreds=bootSELECT(Pairs.df,vNames,qNames,PrednFnc,haul="Haul",nsim=nsim,
paired=T,verbose=F) #Use verbose=T to see progress
BootPlot(BootPreds,CLseq,predn,Data=Tots.df) +
geom_hline(yintercept=0.5,linetype="dashed")
ls()
data=Pairs.df
SplineFit=SplineSELECT(data,var.names,q.names) #Defaults
var.names=vNames
q.names=qNames
SplineFit=SplineSELECT(data,var.names,q.names) #Defaults
class(SplineFit)
class(SplineFit)=="gam"
"gam" %in% class(SplineFit)
!"gam" %in% class(SplineFit)
! "gam" %in% class(SplineFit)
inherits(Fit,"SplineSELECT")
inherits(Fit,"SplineSELECT")
?inherits
source("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R/BOOTSTRAP&PERMUTATION.R")
source("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R/BOOTSTRAP&PERMUTATION.R")
StatsFnc=function(data,var.names,q.names) {
SplineFit=SplineSELECT(data,var.names,q.names) #Defaults
SplineStatistics(SplineFit,MLS=15) }
#Check that it works
ObsStats=StatsFnc(Pairs.df,vNames,qNames)
ObsStats
source("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R/BOOTSTRAP&PERMUTATION.R")
StatsFnc=function(data,var.names,q.names) {
SplineFit=SplineSELECT(data,var.names,q.names) #Defaults
SplineStatistics(SplineFit,MLS=15) }
#Check that it works
ObsStats=StatsFnc(Pairs.df,vNames,qNames)
ObsStats
source("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R/BOOTSTRAP&PERMUTATION.R")
source("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R/BOOTSTRAP&PERMUTATION.R")
StatsFnc=function(data,var.names,q.names) {
SplineFit=SplineSELECT(data,var.names,q.names) #Defaults
SplineStatistics(SplineFit,MLS=15) }
#Check that it works
ObsStats=StatsFnc(Pairs.df,vNames,qNames)
ObsStats
PermStats=permSELECT(Pairs.df,vNames,qNames,AllStats,haul="Haul",nsim=nsim,
paired=T,verbose=F) #Use verbose=T to see progress
colnames(PermStats)=names(ObsStats) #To add column names to PermStats
PermStats
Stat="LRT" #Likelihood ratio test for a length effect
cat("The observed",Stat,"is",Obs[Stat],"\n")
Stat="LRT" #Likelihood ratio test for a length effect
cat("The observed",Stat,"is",ObsStats[Stat],"\n")
pval=permPval(Obs[Stat],PermStats[,Stat])
Stat="LRT" #Likelihood ratio test for a length effect
cat("The observed",Stat,"is",ObsStats[Stat],"\n")
pval=permPval(ObsStats[Stat],PermStats[,Stat])
cat("The permutational p-value for a length effect is",pval,"\n")
Stat="LRT0.5" #LRT for equivalence, i.e., catch comparison=0.5 for all lengths
cat("The observed",Stat,"is",ObsStats[Stat],"\n")
pval=permPval(ObsStats[Stat],PermStats[,Stat])
cat("The permutational p-value for equivalence is",pval,"\n")
Stat="PropnRatio" #Proportion of large fish in gear B compared to in gear A
cat("The observed",Stat,"is",ObsStats[Stat],"\n")
pval=permPval(ObsStats[Stat],PermStats[,Stat])
cat("The permutational p-value for equal propns of large fish is",pval,"\n")
require(MuMIn) #For MuMIn::dredge
options(na.action = "na.fail") #To ensure dredge terminates if there are NAs
#The default averaged-polynomial fit
PolyFit=PolySELECT(Pairs.df,vNames,qNames)
#The averaged-polynomial fit used by Herrmann et al. (2017)
HerrmannFit=PolySELECT(Pairs.df,vNames,qNames,q.ODadjust=F,quasi=F,All=T)
PkgName="SELECT"
#PkgName="SHOUtoolkit"
#Create package folder structure (and opens 2nd RStudio for the project)
#usethis::create_package(PkgName)
setwd(paste0("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/",PkgName))
roxygen2::roxygenise() #or devtools::document()

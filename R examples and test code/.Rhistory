df$RowNum=1:nrow(df)
HaulNum=as.numeric(as.factor(df$Haul))
n.hauls=length(unique(df$HaulNum))
haulgrp=df |> group_by(Haul) |> summarize (haulgrp=unique(Gear)) |>
data.frame()
haulgrp$permgrp=sample(haulgrp$haulgrp)
haulgrp
permuted.hauls=haulgrp$Haul[haulgrp$haulgrp!=haulgrp$permgrp]
permuted.obs=(df$Haul %in% permuted.hauls)
df[permuted.obs,col.names]=df[permuted.obs,rev(col.names)]
df
require(tidyverse)
permCols=function(col.names=c("n1","n2")) {
M[,col.names]=M[,sample(colnames)]
M }
permCols=function(n1,n2) {
if(0.5<runif(1))
n2new=n1
n1new=n2
data.frame(n1=n1new,n2=n2new) }
haul.no=c(1,1,1,2,2,3,3,4,4,4,5,5)
nhauls=length(unique(haul.no))
Gear=c("T0","T45","T0","T45","T0")[haul.no]
Haul=c("One","Two","Three","Four","Five")[haul.no]
lgth=c(1,2,3,1,2,1,2,1,2,3,1,2)
n1=c(3,6,1,0,0,2,1,0,0,0,1,6)
n2=c(0,0,0,4,5,0,0,4,5,6,0,0)
q1=rep(c(0.5,1,0.6),c(5,2,5))
q2=rep(c(1,1,1),c(5,2,5))
DF=data.frame(Gear,Haul,lgth,n1,n2,q1,q2)
DF2=rbind(DF,transform(DF,Haul=paste0(Haul,"B"),n1=n1+10)); nhauls2=2*nhauls
DF2$Day=rep(c("A","B"),c(12,12))
col.names=c("n1","n2")
df=DF
df$RowNum=1:nrow(df)
HaulNum=as.numeric(as.factor(df$Haul))
n.hauls=length(unique(df$HaulNum))
haulgrp=df |> group_by(Haul) |> summarize (haulgrp=unique(Gear)) |>
data.frame()
haulgrp$permgrp=sample(haulgrp$haulgrp)
haulgrp
permuted.hauls=haulgrp$Haul[haulgrp$haulgrp!=haulgrp$permgrp]
permuted.obs=(df$Haul %in% permuted.hauls)
df[permuted.obs,col.names]=df[permuted.obs,rev(col.names)]
#df[Haul %in% p]
DF
df
df=DF
#df$RowNum=1:nrow(df)
HaulNum=as.numeric(as.factor(df$Haul))
n.hauls=length(unique(df$HaulNum))
haulgrp=df |> group_by(Haul) |> summarize (haulgrp=unique(Gear)) |>
data.frame()
haulgrp$permgrp=sample(haulgrp$haulgrp)
haulgrp
permuted.hauls=haulgrp$Haul[haulgrp$haulgrp!=haulgrp$permgrp]
permuted.obs=(df$Haul %in% permuted.hauls)
df[permuted.obs,col.names]=df[permuted.obs,rev(col.names)]
df$Permuted=permuted.obs
df
#df[Haul %in% p]
df=DF
#df$RowNum=1:nrow(df)
HaulNum=as.numeric(as.factor(df$Haul))
n.hauls=length(unique(df$HaulNum))
haulgrp=df |> group_by(Haul) |> summarize (haulgrp=unique(Gear)) |>
data.frame()
haulgrp$permgrp=sample(haulgrp$haulgrp)
haulgrp
permuted.hauls=haulgrp$Haul[haulgrp$haulgrp!=haulgrp$permgrp]
permuted.obs=(df$Haul %in% permuted.hauls)
df[permuted.obs,col.names]=df[permuted.obs,rev(col.names)]
df$Gear=paste0(df$Gear,".",permuted.obs)
df
#df[Haul %in% p]
haulgrp
DF
DF2
df=DF2
#DF2
haulgrp= df |> group_by(Day,Haul) |> summarize (haulgrp=unique(Gear)) |>
slice_sample(n=nhauls2) |> pull(haulgrp)
haulgrp
df |> group_by(Day,Haul) |> summarize (haulgrp=unique(Gear))
haul.no=c(1,1,1,2,2,3,3,4,4,4,5,5)
nhauls=length(unique(haul.no))
Gear=c("T0","T45","T0","T45","T0")[haul.no]
Haul=c("One","Two","Three","Four","Five")[haul.no]
lgth=c(1,2,3,1,2,1,2,1,2,3,1,2)
n1=c(3,6,1,0,0,2,1,0,0,0,1,6)
n2=c(0,0,0,4,5,0,0,4,5,6,0,0)
q1=rep(c(0.5,1,0.6),c(5,2,5))
q2=rep(c(1,1,1),c(5,2,5))
DF=data.frame(Gear,Haul,lgth,n1,n2,q1,q2)
DF2=rbind(DF,transform(DF,Haul=paste0(Haul,"B"),n1=n1+10)); nhauls2=2*nhauls
DF2$Day=rep(c("B","A"),c(12,12))
col.names=c("n1","n2")
df=DF2
#DF2
df
df |> group_by(Day,Haul) |> summarize (haulgrp=unique(Gear))
permgrp= haulgrp|>  slice_sample(n=nhauls2) |> pull(haulgrp)
permgrp= haulgrp |>  slice_sample(n=nhauls2) |> pull(haulgrp)
haulgrp= df |> group_by(Day,Haul) |> summarize (haulgrp=unique(Gear))
permgrp= df |> group_by(Day,Haul) |> summarize (haulgrp=unique(Gear))  |>  slice_sample(n=nhauls2) |> pull(haulgrp)
haulgrp
permprp
permgrp
df=DF2
#DF2
haulgrp= df |> group_by(Day,Haul) |> summarize (haulgrp=unique(Gear))
permgrp= df |> group_by(Day,Haul) |> summarize (haulgrp=unique(Gear))  |>  slice_sample(n=nhauls2) #|> pull(haulgrp)
haulgrp
permgrp
haulgrp
permgrp
## Testing within-block unpaired permuting of SELECT format data
df=DF2
#DF2
haulgrp= df |> group_by(Day,Haul) |> summarize (haulgrp=unique(Gear))
permgrp= df |> group_by(Day,Haul) |> summarize (haulgrp=unique(Gear))  |>  slice_sample(n=nhauls2) #|> pull(haulgrp)
haulgrp
permgrp
df=DF2
#DF2
haulgrp= df |> group_by(Day,Haul) |> summarize (haulgrp=unique(Gear))
haulgrp
haulgrp
permgrp= df |> group_by(Day,Haul) |> summarize (haulgrp=unique(Gear))  |>  slice_sample(n=nhauls2) #|> pull(haulgrp)
permgrp
haul.no=c(1,1,1,2,2,3,3,4,4,4,5,5)
nhauls=length(unique(haul.no))
Gear=c("T0","T45","T0","T45","T0")[haul.no]
Haul=c("One","Two","Three","Four","Five")[haul.no]
lgth=c(1,2,3,1,2,1,2,1,2,3,1,2)
n1=c(3,6,1,0,0,2,1,0,0,0,1,6)
n2=c(0,0,0,4,5,0,0,4,5,6,0,0)
q1=rep(c(0.5,1,0.6),c(5,2,5))
q2=rep(c(1,1,1),c(5,2,5))
DF=data.frame(Gear,Haul,lgth,n1,n2,q1,q2)
DF2=rbind(DF,transform(DF,Haul=paste0(Haul,"A"),n1=n1+10)); nhauls2=2*nhauls
DF2$Day=rep(c("B","A"),c(12,12))
col.names=c("n1","n2")
## Testing within-block unpaired permuting of SELECT format data
df=DF2
#DF2
haulgrp= df |> group_by(Day,Haul) |> summarize (haulgrp=unique(Gear))
haulgrp
permgrp= df |> group_by(Day,Haul) |> summarize (haulgrp=unique(Gear))  |>  slice_sample(n=nhauls2) #|> pull(haulgrp)
permgrp
haulgrp
DF2
## Testing within-block unpaired permuting of SELECT format data
df=DF2
#DF2
haulgrp= df |> group_by(Day,Haul) |> summarize (haulgrp=unique(Gear))
haulgrp
permgrp= df |> group_by(Day,Haul) |> summarize (haulgrp=unique(Gear))  |>  slice_sample(n=nhauls2) #|> pull(haulgrp)
permgrp
haulgrp
permgrp= df |> group_by(Day,Haul) |> summarize (haulgrp=unique(Gear))  |>  slice_sample(n=nhauls2) #|> pull(haulgrp)
permgrp
knitr::opts_chunk$set(fig.height=3)
remotes::install_github("rbmillar/SELECT")
#NB: remotes package needs to be installed
remotes::install_github("rbmillar/SELECT")
require(SELECT)
require(tidyverse)
#NB: remotes package needs to be installed
remotes::install_github("rbmillar/SELECT")
require(SELECT)
require(tidyverse)
#Use dtype="cc" to specify that design type is covered codend
data(Clark)
head(Clark)
cc.names=c("lenclass","cover","codend")
#Fit logistic selection curve
fitL=SELECT(Clark,cc.names,dtype="cc")
ModelCheck(fitL,minE=1,las=1)
Estimates(fitL)
PlotCurves(fitL,plotlens=seq(19,56,0.1))
#Fit Richards selection curve
fitR=SELECT(Clark,cc.names,dtype="cc",stype="richards")
ModelCheck(fitR,minE=1,las=1)
Estimates(fitR);
PlotCurves(fitR,plotlens=seq(19,56,0.1))
#Likelihood ratio test for H0 that logistic mode is adequate
LRTstat=2*(deviance(fitL)-deviance(fitR))
cat("\n p-value for H0:logistic is",1-pchisq(LRTstat,1))
SELECT
#Use dtype="ph" to specify that design type is paired haul
data(Pope)
head(Pope)
ph.names=c("Lengths","nfine","nwide")
#FIt logistic seln cure
fitL=SELECT(Pope,ph.names,dtype="ph")
ModelCheck(fitL,minE=1,las=1)
Estimates(fitL)
PlotCurves(fitL)
#Fixed split, psplit=0.5
fitR2=SELECT(Pope,ph.names,dtype="re",x0=c(-30,1),rel.power=c(1,1))
ModelCheck(fitR2,minE=1,las=1)
Estimates(fitR2)
PlotCurves(fitR2,las=1)
data(Holt)
Meshs=Holt$Meshsize
Counts=Holt$Counts
names(Counts)=c("lgth",paste0("M",Meshs))
re.names=names(Counts)
#Equal fishing power of the eight meshsizes
pwr=rep(1,8)
#Or use this for fishing power proportional to meshsize
#pwr=Meshsize
par(mfrow=c(3,2),mar=c(4.1,4.1,1,1))
fit=SELECT(Counts,re.names,dtype="re",stype="norm.loc",Meshsize=Meshs,x0=c(60,4),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
fit=SELECT(Counts,re.names,dtype="re",stype="norm.sca",Meshsize=Meshs,x0=c(60,4),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
#Needs wide seln curve for x0
fit=SELECT(Counts,re.names,dtype="re",stype="gamma",Meshsize=Meshs,x0=c(10,5),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
fit=SELECT(Counts,re.names,dtype="re",stype="logistic",Meshsize=Meshs,x0=c(-60,1),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
fit=SELECT(Counts,re.names,dtype="re",stype="richards",Meshsize=Meshs,x0=c(-60,1,0),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
fit=SELECT(Counts,re.names,dtype="re",stype="lognorm",Meshsize=Meshs,x0=c(log(60),0.1),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
fit=SELECT(Counts,re.names,dtype="re",stype="binorm.sca",Meshsize=Meshs,x0=c(55,4,65,4,2),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
fit=SELECT(Counts,re.names,dtype="re",stype="bilognorm",Meshsize=Meshs,x0=c(4,0.2,4.2,0.1,2),rel.power=pwr)
ModelCheck(fit,minE=1); Estimates(fit); PlotCurves(fit,plotlens=seq(40,90,0.1))
install.packages("xfun")
require(xfun)
require(tidyverse)
permCols=function(col.names=c("n1","n2")) {
M[,col.names]=M[,sample(colnames)]
M }
permCols=function(n1,n2) {
if(0.5<runif(1))
n2new=n1
n1new=n2
data.frame(n1=n1new,n2=n2new) }
require(tidyverse)
permCols=function(col.names=c("n1","n2")) {
M[,col.names]=M[,sample(colnames)]
M }
permCols=function(n1,n2) {
if(0.5<runif(1))
n2new=n1
n1new=n2
data.frame(n1=n1new,n2=n2new) }
haul.no=c(1,1,1,2,2,3,3,4,4,4,5,5)
nhauls=length(unique(haul.no))
Gear=c("T0","T45","T0","T45","T0")[haul.no]
Haul=c("One","Two","Three","Four","Five")[haul.no]
lgth=c(1,2,3,1,2,1,2,1,2,3,1,2)
n1=c(3,6,1,0,0,2,1,0,0,0,1,6)
n2=c(0,0,0,4,5,0,0,4,5,6,0,0)
q1=rep(c(0.5,1,0.6),c(5,2,5))
q2=rep(c(1,1,1),c(5,2,5))
DF=data.frame(Gear,Haul,lgth,n1,n2,q1,q2)
DF2=rbind(DF,transform(DF,Haul=paste0(Haul,"A"),n1=n1+10)); nhauls2=2*nhauls
DF2$Day=rep(c("B","A"),c(12,12))
col.names=c("n1","n2")
df=DF
#df$RowNum=1:nrow(df)
HaulNum=as.numeric(as.factor(df$Haul))
n.hauls=length(unique(df$HaulNum))
haulgrp=df |> group_by(Haul) |> summarize (haulgrp=unique(Gear)) |>
data.frame()
haulgrp$permgrp=sample(haulgrp$haulgrp)
haulgrp
permuted.hauls=haulgrp$Haul[haulgrp$haulgrp!=haulgrp$permgrp]
permuted.obs=(df$Haul %in% permuted.hauls)
df[permuted.obs,col.names]=df[permuted.obs,rev(col.names)]
df$Permuted=permuted.obs
df
#df[Haul %in% p]
DF
df
haulgrp$permgrp=sample(haulgrp$haulgrp)
haulgrp
permuted.hauls=haulgrp$Haul[haulgrp$haulgrp!=haulgrp$permgrp]
permuted.obs=(df$Haul %in% permuted.hauls)
df[permuted.obs,col.names]=df[permuted.obs,rev(col.names)]
df$Permuted=permuted.obs
df
df
haulgrp$permgrp=sample(haulgrp$haulgrp)
haulgrp
permuted.hauls=haulgrp$Haul[haulgrp$haulgrp!=haulgrp$permgrp]
permuted.obs=(df$Haul %in% permuted.hauls)
df[permuted.obs,col.names]=df[permuted.obs,rev(col.names)]
df$Permuted=permuted.obs
df
df
haulgrp$permgrp=sample(haulgrp$haulgrp)
haulgrp
permuted.hauls=haulgrp$Haul[haulgrp$haulgrp!=haulgrp$permgrp]
permuted.obs=(df$Haul %in% permuted.hauls)
df[permuted.obs,col.names]=df[permuted.obs,rev(col.names)]
df$Permuted=permuted.obs
df
haulgrp$permgrp=sample(haulgrp$haulgrp)
haulgrp
permuted.hauls=haulgrp$Haul[haulgrp$haulgrp!=haulgrp$permgrp]
permuted.obs=(df$Haul %in% permuted.hauls)
df[permuted.obs,col.names]=df[permuted.obs,rev(col.names)]
df$Permuted=permuted.obs
df
df=DF2
#DF2
haulgrp= df |> group_by(Day,Haul) |> summarize (haulgrp=unique(Gear))
haulgrp
df=DF
#HaulNum=as.numeric(as.factor(df$Haul))
n.hauls=length(unique(df$HaulNum))
haulgrp=df |> group_by(Haul) |> summarize (haulgrp=unique(Gear)) |>
data.frame()
haulgrp$permgrp=sample(haulgrp$haulgrp)
haulgrp
permuted.hauls=haulgrp$Haul[haulgrp$haulgrp!=haulgrp$permgrp]
permuted.obs=(df$Haul %in% permuted.hauls)
df[permuted.obs,col.names]=df[permuted.obs,rev(col.names)]
df$Permuted=permuted.obs
df
df=DF
#HaulNum=as.numeric(as.factor(df$Haul))
n.hauls=length(unique(df$Haul))
haulgrp=df |> group_by(Haul) |> summarize (haulgrp=unique(Gear)) |>
data.frame()
haulgrp$permgrp=sample(haulgrp$haulgrp)
haulgrp
permuted.hauls=haulgrp$Haul[haulgrp$haulgrp!=haulgrp$permgrp]
permuted.obs=(df$Haul %in% permuted.hauls)
df[permuted.obs,col.names]=df[permuted.obs,rev(col.names)]
df$Permuted=permuted.obs
df
df=DF2
#DF2
n.hauls=length(unique(df$Haul))
haulgrp= df |> group_by(Day,Haul) |> summarize (grp=unique(Gear))
haulgrp
haulgrp |> slice_sample(n=nhauls)
haulgrp
haulgrp= df |> group_by(Day,Haul) |>
summarize (grp=unique(Gear), .groups = "drop_last")
haulgrp
DF2
haulgrp |> slice_sample(n=nhauls)
permgrp= haulgrp |> slice_sample(n=nhauls)
df=DF2
#DF2
n.hauls=length(unique(df$Haul))
haulgrp= df |> group_by(Day,Haul) |>
summarize (grp=unique(Gear), .groups = "drop_last")
haulgrp
permgrp= haulgrp |> slice_sample(n=nhauls)
#permgrp= df |> group_by(Day,Haul) |> summarize (haulgrp=unique(Gear))  |>  #slice_sample(n=nhauls2) #|> pull(haulgrp)
permgrp
df=DF2
#DF2
n.hauls=length(unique(df$Haul))
haulgrp= df |> group_by(Day,Haul) |>
summarize (grp=unique(Gear), .groups = "drop_last")
haulgrp
permgrp= haulgrp |> slice_sample(n=nhauls)
permgrp
permuted.hauls=haulgrp$Haul[haulgrp$grp!=permgrp$grp]
permuted.obs=(df$Haul %in% permuted.hauls)
df[permuted.obs,col.names]=df[permuted.obs,rev(col.names)]
df$Permuted=permuted.obs
df
df=DF2
#DF2
n.hauls=length(unique(df$Haul))
haulgrp= df |> group_by(Day,Haul) |>
summarize (grp=unique(Gear), .groups = "drop_last")
#haulgrp
permgrp= haulgrp |> slice_sample(n=nhauls)
#permgrp
permuted.hauls=haulgrp$Haul[haulgrp$grp!=permgrp$grp]
permuted.obs=(df$Haul %in% permuted.hauls)
df[permuted.obs,col.names]=df[permuted.obs,rev(col.names)]
df$Permuted=permuted.obs
df
df=DF2
#DF2
n.hauls=length(unique(df$Haul))
haulgrp= df |> group_by(Day,Haul) |>
summarize (grp=unique(Gear), .groups = "drop_last")
#haulgrp
permgrp= haulgrp |> slice_sample(n=nhauls)
#permgrp
permuted.hauls=haulgrp$Haul[haulgrp$grp!=permgrp$grp]
permuted.obs=(df$Haul %in% permuted.hauls)
df[permuted.obs,col.names]=df[permuted.obs,rev(col.names)]
df$Permuted=permuted.obs
df
df=DF2
#DF2
n.hauls=length(unique(df$Haul))
haulgrp= df |> group_by(Day,Haul) |>
summarize (grp=unique(Gear), .groups = "drop_last")
#haulgrp
permgrp= haulgrp |> slice_sample(n=nhauls)
#permgrp
permuted.hauls=haulgrp$Haul[haulgrp$grp!=permgrp$grp]
permuted.obs=(df$Haul %in% permuted.hauls)
df[permuted.obs,col.names]=df[permuted.obs,rev(col.names)]
df$Permuted=permuted.obs
df
require(SELECT)
require(tidyverse)
require(mgcv)
SimCatch
data("SimCatch")
SimCatch
require(mgcv)
data(SimCatch)
head(SimCatch)
Vnames=c("lgth","n1","n2")
SplineFit=SplineSELECT(SimCatch,var.names=Vnames)
permRsq=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names)
summary(SplineFit)$r.sq }
ObsRsq=permRsq(SimCatch,Vnames)
cat("\nThe observed r-square is",ObsRsq,"\n")
permRsq=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names)
summary(SplineFit)$r.sq }
ObsRsq=permRsq(SimCatch,Vnames)
cat("\nThe observed r-square is",ObsRsq,"\n")
PermRsq=permSELECT(SimCatch,Vnames,permRsq,haul="TowID",nsim=1000)
permRsq=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names)
summary(SplineFit)$r.sq }
ObsRsq=permRsq(SimCatch,Vnames)
cat("\nThe observed r-square is",ObsRsq,"\n")
PermRsq=permSELECT(SimCatch,Vnames,permRsq,haul="TowID",nsim=1000, paired=T)
pval=mean(ObsRsq<=PermRsq)
cat("\nThe p-value for length-independent catch share is",pval,"\n")
BootPreds=bootSELECT(SimCatch,Vnames,bootPredn,haul="TowID",nsim=1000)
BootPreds=bootSELECT(SimCatch,Vnames,bootPredn,haul="TowID",nsim=1000,paired=T)
lenseq=21:120
bootPredn=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names)
predict(SplineFit,newdata=data.frame(lgth=lenseq),type="response") }
#Check that it works
preds=bootPredn(SimCatch,Vnames)
plot(lenseq,preds,type="l",xlab="Length",ylab="Catch share")
BootPreds=bootSELECT(SimCatch,Vnames,bootPredn,haul="TowID",nsim=1000,paired=T)
?BootPlot
BootPlot
head(SimCatch)
SimCatch=with(SimCatch,y=n2/(n1+n2))
SimCatch=transform(SimCatch,y=n2/(n1+n2))
BootPlot(BootPreds,lenseq,preds)
SimCatch=transform(SimCatch,y=n2/(n1+n2))
BootPlot(BootPreds,lenseq,preds,SimCatch)
Propnh=SimCatch %>% group_by(lgth) %>% summarize(n1=sum(n1),n2=sum(n2))     %>% mutate(y=n2/(n1+n2)
)
Propn
Propn=SimCatch %>% group_by(lgth) %>% summarize(n1=sum(n1),n2=sum(n2))     %>% mutate(y=n2/(n1+n2)
)
Propn=SimCatch %>% group_by(lgth) %>% summarize(n1=sum(n1),n2=sum(n2))     %>% mutate(y=n2/(n1+n2))
Propn=SimCatch %>% group_by(lgth) %>% summarize(n1=sum(n1),n2=sum(n2))     %>% mutate(y=n2/(n1+n2))
BootPlot(BootPreds,lenseq,preds,Propn)
permRsq=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names)
summary(SplineFit)$r.sq }
ObsRsq=permRsq(SimCatch,Vnames)
cat("\nThe observed r-square is",ObsRsq,"\n")
PermRsq=permSELECT(SimCatch,Vnames,permRsq,haul="TowID",nsim=nsim, paired=T)
require(mgcv)
data(SimCatch)
head(SimCatch)
Vnames=c("lgth","n1","n2")
SplineFit=SplineSELECT(SimCatch,var.names=Vnames)
nsim=400 #Change to 1000 in practice
permRsq=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names)
summary(SplineFit)$r.sq }
ObsRsq=permRsq(SimCatch,Vnames)
cat("\nThe observed r-square is",ObsRsq,"\n")
PermRsq=permSELECT(SimCatch,Vnames,permRsq,haul="TowID",nsim=nsim, paired=T)
pval=mean(ObsRsq<=PermRsq)
cat("\nThe p-value for length-independent catch share is",pval,"\n")
require(tidyverse)
permCols=function(col.names=c("n1","n2")) {
M[,col.names]=M[,sample(colnames)]
M }
#permCols=function(n1,n2) { #???
#  if(0.5<runif(1))
#  n2new=n1
#  n1new=n2
#  data.frame(n1=n1new,n2=n2new) }
haul.no=c(1,1,1,2,2,3,3,4,4,4,5,5)
nhauls=length(unique(haul.no))
Gear=c("T0","T45","T0","T45","T0")[haul.no]
Haul=c("One","Two","Three","Four","Five")[haul.no]
lgth=c(1,2,3,1,2,1,2,1,2,3,1,2)
n1=c(3,6,1,0,0,2,1,0,0,0,1,6)
n2=c(0,0,0,4,5,0,0,4,5,6,0,0)
q1=rep(c(0.5,1,0.6),c(5,2,5))
q2=rep(c(1,1,1),c(5,2,5))
DF=data.frame(Gear,Haul,lgth,n1,n2,q1,q2)
DF2=rbind(DF,transform(DF,Haul=paste0(Haul,"A"),n1=n1+10)); nhauls2=2*nhauls
DF2$Day=rep(c("B","A"),c(12,12))
col.names=c("n1","n2")
DF
DF2

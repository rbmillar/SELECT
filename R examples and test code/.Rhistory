)
Propn=SimCatch %>% group_by(lgth) %>% summarize(n1=sum(n1),n2=sum(n2))     %>% mutate(y=n2/(n1+n2))
Propn=SimCatch %>% group_by(lgth) %>% summarize(n1=sum(n1),n2=sum(n2))     %>% mutate(y=n2/(n1+n2))
BootPlot(BootPreds,lenseq,preds,Propn)
permRsq=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names)
summary(SplineFit)$r.sq }
ObsRsq=permRsq(SimCatch,Vnames)
cat("\nThe observed r-square is",ObsRsq,"\n")
PermRsq=permSELECT(SimCatch,Vnames,permRsq,haul="TowID",nsim=nsim, paired=T)
require(mgcv)
data(SimCatch)
head(SimCatch)
Vnames=c("lgth","n1","n2")
SplineFit=SplineSELECT(SimCatch,var.names=Vnames)
nsim=400 #Change to 1000 in practice
permRsq=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names)
summary(SplineFit)$r.sq }
ObsRsq=permRsq(SimCatch,Vnames)
cat("\nThe observed r-square is",ObsRsq,"\n")
PermRsq=permSELECT(SimCatch,Vnames,permRsq,haul="TowID",nsim=nsim, paired=T)
pval=mean(ObsRsq<=PermRsq)
cat("\nThe p-value for length-independent catch share is",pval,"\n")
require(tidyverse)
permCols=function(col.names=c("n1","n2")) {
M[,col.names]=M[,sample(colnames)]
M }
#permCols=function(n1,n2) { #???
#  if(0.5<runif(1))
#  n2new=n1
#  n1new=n2
#  data.frame(n1=n1new,n2=n2new) }
haul.no=c(1,1,1,2,2,3,3,4,4,4,5,5)
nhauls=length(unique(haul.no))
Gear=c("T0","T45","T0","T45","T0")[haul.no]
Haul=c("One","Two","Three","Four","Five")[haul.no]
lgth=c(1,2,3,1,2,1,2,1,2,3,1,2)
n1=c(3,6,1,0,0,2,1,0,0,0,1,6)
n2=c(0,0,0,4,5,0,0,4,5,6,0,0)
q1=rep(c(0.5,1,0.6),c(5,2,5))
q2=rep(c(1,1,1),c(5,2,5))
DF=data.frame(Gear,Haul,lgth,n1,n2,q1,q2)
DF2=rbind(DF,transform(DF,Haul=paste0(Haul,"A"),n1=n1+10)); nhauls2=2*nhauls
DF2$Day=rep(c("B","A"),c(12,12))
col.names=c("n1","n2")
DF
DF2
## Haul must be a unique haul identifier over all hauls
df=DF2
require(tidyverse)
permCols=function(col.names=c("n1","n2")) {
M[,col.names]=M[,sample(colnames)]
M }
haul.no=c(1,1,1,2,2,3,3,4,4,4,5,5)
nhauls=length(unique(haul.no))
Gear=c("T0","T45","T0","T45","T0")[haul.no]
Haul=c("One","Two","Three","Four","Five")[haul.no]
lgth=c(1,2,3,1,2,1,2,1,2,3,1,2)
n1=c(3,6,1,0,0,2,1,0,0,0,1,6)
n2=c(0,0,0,4,5,0,0,4,5,6,0,0)
q1=rep(c(0.5,1,0.6),c(5,2,5))
q2=rep(c(1,1,1),c(5,2,5))
DF=data.frame(Gear,Haul,lgth,n1,n2,q1,q2)
DF2=rbind(DF,transform(DF,Haul=paste0(Haul,"A"),n1=n1+10)); nhauls2=2*nhauls
DF2$Day=rep(c("B","A"),c(12,12))
col.names=c("n1","n2")
## EASY
## Testing unpaired permuting of SELECT format data, no blocking (by Day)
df=DF
#HaulNum=as.numeric(as.factor(df$Haul))
#n.hauls=length(unique(df$Haul))
haulgrp=df |> group_by(Haul) |> summarize (haulgrp=unique(Gear)) |>
data.frame()
haulgrp$permgrp=sample(haulgrp$haulgrp)
haulgrp
permuted.hauls=haulgrp$Haul[haulgrp$haulgrp!=haulgrp$permgrp]
permuted.obs=(df$Haul %in% permuted.hauls)
df[permuted.obs,col.names]=df[permuted.obs,rev(col.names)]
df$Permuted=permuted.obs
df
## Haul must be a unique haul identifier over all hauls
df=DF2
df
df
data.frame(df)
data.frame(df)
df
df
haulgrp= df |> group_by(Day,Haul) |>
summarize (grp=unique(Gear), .groups = "drop_last")
#haulgrp
permgrp= haulgrp |> slice_sample(n=nhauls)
#permgrp
permuted.hauls=haulgrp$Haul[haulgrp$grp!=permgrp$grp]
permuted.obs=(df$Haul %in% permuted.hauls)
df[permuted.obs,col.names]=df[permuted.obs,rev(col.names)]
df$Permuted=permuted.obs
df
df
haulgrp
permgrp
col.names
haul.no=c(1,1,1,2,2,3,3,4,4,4,5,5)
nhauls=length(unique(haul.no))
Gear=c("T0","T45","T0","T45","T0")[haul.no]
Haul=c("One","Two","Three","Four","Five")[haul.no]
lgth=c(1,2,3,1,2,1,2,1,2,3,1,2)
n1=c(3,6,1,0,0,2,1,0,0,0,1,6)
n2=c(0,0,0,4,5,0,0,4,5,6,0,0)
q1=rep(c(0.5,1,0.6),c(5,2,5))
q2=rep(c(1,1,1),c(5,2,5))
DF=data.frame(Gear,Haul,lgth,n1,n2,q1,q2)
DF2=rbind(DF,transform(DF,Haul=paste0(Haul,"A"),n1=n1+10)); nhauls2=2*nhauls
DF2$Day=rep(c("B","A"),c(12,12))
n.names=c("n1","n2") #Names of n (or q) columns to be replace
## EASY
## Testing unpaired permuting of SELECT format data, no blocking (by Day)
df=DF
#HaulNum=as.numeric(as.factor(df$Haul))
#n.hauls=length(unique(df$Haul))
haulgrp=df |> group_by(Haul) |> summarize (haulgrp=unique(Gear)) |>
data.frame()
haulgrp$permgrp=sample(haulgrp$haulgrp)
haulgrp
permuted.hauls=haulgrp$Haul[haulgrp$haulgrp!=haulgrp$permgrp]
permuted.obs=(df$Haul %in% permuted.hauls)
df[permuted.obs,nq.names]=df[permuted.obs,rev(n.names)]
## EASY
## Testing unpaired permuting of SELECT format data, no blocking (by Day)
df=DF
#HaulNum=as.numeric(as.factor(df$Haul))
#n.hauls=length(unique(df$Haul))
haulgrp=df |> group_by(Haul) |> summarize (haulgrp=unique(Gear)) |>
data.frame()
haulgrp$permgrp=sample(haulgrp$haulgrp)
haulgrp
permuted.hauls=haulgrp$Haul[haulgrp$haulgrp!=haulgrp$permgrp]
permuted.obs=(df$Haul %in% permuted.hauls)
df[permuted.obs,n.names]=df[permuted.obs,rev(n.names)]
df$Permuted=permuted.obs
df
#Obtain the unique grp value for each block-haul combo
#NB, grouping of Day and Haul is sorted alphabetically
haulgrp= df |> group_by(Day,Haul) |>
summarize (grp=unique(Gear), .groups = "drop_last")
## Haul must be a unique haul identifier OVER ALL hauls
df=DF2
df
df
#Obtain the unique grp value for each block-haul combo
#NB, grouping of Day and Haul is sorted alphabetically
haulgrp= df |> group_by(Day,Haul) |>
summarize (grp=unique(Gear), .groups = "drop_last")
#haulgrp tibble is still grouped by day, so slice_sample is within day
permgrp= haulgrp |> slice_sample(n=nhauls)
#Identify which hauls are permuted
permuted.hauls=haulgrp$Haul[haulgrp$grp!=permgrp$grp]
#Identify the permuted rows in the data frame, and permute
permuted.obs=(df$Haul %in% permuted.hauls)
df[permuted.obs,n.names]=df[permuted.obs,rev(n.names)]
df$Permuted=permuted.obs
df
df
df.perm=df
#Obtain the unique grp value for each block-haul combo
#NB, grouping of Day and Haul is sorted alphabetically
haulgrp= df |> group_by(Day,Haul) |>
summarize (grp=unique(Gear), .groups = "drop_last")
#haulgrp tibble is still grouped by day, so slice_sample is within day
permgrp= haulgrp |> slice_sample(n=nhauls)
#Identify which hauls are permuted
permuted.hauls=haulgrp$Haul[haulgrp$grp!=permgrp$grp]
#Identify the permuted rows in the data frame, and permute
permuted.obs=(df$Haul %in% permuted.hauls)
df.perm[permuted.obs,n.names]=df[permuted.obs,rev(n.names)]
df.perm$Permuted=permuted.obs
df.perm
df
df.perm
permCols
df.perm=df=DF2
#Obtain the unique grp value for each block-haul combo
#NB, grouping of Day and Haul is sorted alphabetically
haulgrp= df |> group_by(Day,Haul) |>
summarize (grp=unique(Gear), .groups = "drop_last")
#haulgrp tibble is still grouped by day, so slice_sample is within day
permgrp= haulgrp |> slice_sample(n=nhauls)
#Identify which hauls are permuted
permuted.hauls=haulgrp$Haul[haulgrp$grp!=permgrp$grp]
#Identify the permuted rows in the data frame, and permute
permuted.obs=(df$Haul %in% permuted.hauls)
df.perm[permuted.obs,n.names]=df[permuted.obs,rev(n.names)]
df.perm$Permuted=permuted.obs
df
df.perm
df
df.perm
df
df.perm
df
df.perm
DF2$All=rep("A",24)
haul.no=c(1,1,1,2,2,3,3,4,4,4,5,5)
nhauls=length(unique(haul.no))
Gear=c("T0","T45","T0","T45","T0")[haul.no]
Haul=c("One","Two","Three","Four","Five")[haul.no]
lgth=c(1,2,3,1,2,1,2,1,2,3,1,2)
n1=c(3,6,1,0,0,2,1,0,0,0,1,6)
n2=c(0,0,0,4,5,0,0,4,5,6,0,0)
q1=rep(c(0.5,1,0.6),c(5,2,5))
q2=rep(c(1,1,1),c(5,2,5))
DF=data.frame(Gear,Haul,lgth,n1,n2,q1,q2)
DF3=DF2=rbind(DF,transform(DF,Haul=paste0(Haul,"A"),n1=n1+10))
DF2$Day=rep(c("B","A"),c(12,12))
DF3$Day=rep("A",24)
n.names=c("n1","n2") #Names of n (or q) columns to be replace
df.perm=df=DF3
#Obtain the unique grp value for each block-haul combo
#NB, grouping of Day and Haul is sorted alphabetically
haulgrp= df |> group_by(Day,Haul) |>
summarize (grp=unique(Gear), .groups = "drop_last")
#haulgrp tibble is still grouped by day, so slice_sample is within day
permgrp= haulgrp |> slice_sample(n=nhauls)
#Identify which hauls are permuted
permuted.hauls=haulgrp$Haul[haulgrp$grp!=permgrp$grp]
#Identify the permuted rows in the data frame, and permute
permuted.obs=(df$Haul %in% permuted.hauls)
df.perm[permuted.obs,n.names]=df[permuted.obs,rev(n.names)]
df.perm$Permuted=permuted.obs
df
df.perm
df.perm=df=DF3
#Obtain the unique grp value for each block-haul combo
#NB, grouping of Day and Haul is sorted alphabetically
haulgrp= df |> group_by(Day,Haul) |>
summarize (grp=unique(Gear), .groups = "drop_last")
#haulgrp tibble is still grouped by day, so slice_sample is within day
permgrp= haulgrp |> slice_sample(n=nhauls)
#Identify which hauls are permuted
permuted.hauls=haulgrp$Haul[haulgrp$grp!=permgrp$grp]
#Identify the permuted rows in the data frame, and permute
permuted.obs=(df$Haul %in% permuted.hauls)
df.perm[permuted.obs,n.names]=df[permuted.obs,rev(n.names)]
df.perm$Permuted=permuted.obs
df
df.perm
df
df.perm
df.perm=df=DF3
#Obtain the unique grp value for each block-haul combo
#NB, grouping of Day and Haul is sorted alphabetically
haulgrp= df |> group_by(Day,Haul) |>
summarize (grp=unique(Gear), .groups = "drop_last")
#haulgrp tibble is still grouped by day, so slice_sample is within day
permgrp= haulgrp |> slice_sample(n=nhauls)
#Identify which hauls are permuted
permuted.hauls=haulgrp$Haul[haulgrp$grp!=permgrp$grp]
#Identify the permuted rows in the data frame, and permute
permuted.obs=(df$Haul %in% permuted.hauls)
df.perm[permuted.obs,n.names]=df[permuted.obs,rev(n.names)]
df.perm$Permuted=permuted.obs
df
df.perm
df.perm=df=DF3
#Obtain the unique grp value for each block-haul combo
#NB, grouping of Day and Haul is sorted alphabetically
haulgrp= df |> group_by(Day,Haul) |>
summarize (grp=unique(Gear), .groups = "drop_last")
#haulgrp tibble is still grouped by day, so slice_sample is within day
permgrp= haulgrp |> slice_sample(n=nhauls)
#Identify which hauls are permuted
permuted.hauls=haulgrp$Haul[haulgrp$grp!=permgrp$grp]
#Identify the permuted rows in the data frame, and permute
permuted.obs=(df$Haul %in% permuted.hauls)
df.perm[permuted.obs,n.names]=df[permuted.obs,rev(n.names)]
df.perm$Permuted=permuted.obs
df
df.perm
df.perm=df=DF3
#Obtain the unique grp value for each block-haul combo
#NB, grouping of Day and Haul is sorted alphabetically
haulgrp= df |> group_by(Day,Haul) |>
summarize (grp=unique(Gear), .groups = "drop_last")
#haulgrp tibble is still grouped by day, so slice_sample is within day
permgrp= haulgrp |> slice_sample(n=nhauls)
#Identify which hauls are permuted
permuted.hauls=haulgrp$Haul[haulgrp$grp!=permgrp$grp]
#Identify the permuted rows in the data frame, and permute
permuted.obs=(df$Haul %in% permuted.hauls)
df.perm[permuted.obs,n.names]=df[permuted.obs,rev(n.names)]
df.perm$Permuted=permuted.obs
df
df.perm
haulgrp
haulgrp
permgrp
df.perm=df=DF3
#Obtain the unique grp value for each block-haul combo
#NB, grouping of Day and Haul is sorted alphabetically
haulgrp= df |> group_by(Day,Haul) |>
summarize (grp=unique(Gear), .groups = "drop_last")
#haulgrp tibble is still grouped by day, so slice_sample is within day
permgrp= haulgrp |> slice_sample(n=nhauls)
#Identify which hauls are permuted
permuted.hauls=haulgrp$Haul[haulgrp$grp!=permgrp$grp]
#Identify the permuted rows in the data frame, and permute
permuted.obs=(df$Haul %in% permuted.hauls)
df.perm[permuted.obs,n.names]=df[permuted.obs,rev(n.names)]
df.perm$Permuted=permuted.obs
haulgrp
permgrp
nhauls
df.perm=df=DF3
n.hauls=length(unique(df$Haul))
#Obtain the unique grp value for each block-haul combo
#NB, grouping of Day and Haul is sorted alphabetically
haulgrp= df |> group_by(Day,Haul) |>
summarize (grp=unique(Gear), .groups = "drop_last")
#haulgrp tibble is still grouped by day, so slice_sample is within day
permgrp= haulgrp |> slice_sample(n=nhauls)
#Identify which hauls are permuted
permuted.hauls=haulgrp$Haul[haulgrp$grp!=permgrp$grp]
#Identify the permuted rows in the data frame, and permute
permuted.obs=(df$Haul %in% permuted.hauls)
df.perm[permuted.obs,n.names]=df[permuted.obs,rev(n.names)]
df.perm$Permuted=permuted.obs
haulgrp
permgrp
df
n.hauls
df.perm=df=DF3
nhauls=length(unique(df$Haul))
#Obtain the unique grp value for each block-haul combo
#NB, grouping of Day and Haul is sorted alphabetically
haulgrp= df |> group_by(Day,Haul) |>
summarize (grp=unique(Gear), .groups = "drop_last")
#haulgrp tibble is still grouped by day, so slice_sample is within day
permgrp= haulgrp |> slice_sample(n=nhauls)
#Identify which hauls are permuted
permuted.hauls=haulgrp$Haul[haulgrp$grp!=permgrp$grp]
#Identify the permuted rows in the data frame, and permute
permuted.obs=(df$Haul %in% permuted.hauls)
df.perm[permuted.obs,n.names]=df[permuted.obs,rev(n.names)]
df.perm$Permuted=permuted.obs
permgrp
haulgrp
Randomize=function(data,freq.names=c("n1","n2"),haul="haul",q.names=NULL,
paired=TRUE,gear=NULL,block=NULL) {
if(paired==T&(!is.null(block)|!is.null(gear)))  cat("\n NOTE: gear and block
variables will be ignored since permutation is within gear pairs\n")
if(paired==F&is.null(gear)) Stop("\n ERROR: gear name is required
since data are unpaired and each row must be identified by gear type \n")
Wk=data.frame(data)
Wk$haul=as.factor(Wk[,haul])
nHauls=length(unique(Wk$haul))
if(paired) {
uniqHauls=unique(Wk[,haul])
permList=as.list(1:nHauls)
for(j in 1:nHauls) {
permList[[j]] = Wk %>% filter(haul==uniqHauls[j])
jPerm=sample(1:2)
permList[[j]][,freq.names] <- permList[[j]][,freq.names[jPerm]]
if(!is.null(q.names))
permList[[j]][,q.names] <- permList[[j]][,q.names[jPerm]]
}
data=bind_rows(permList)
}
if(!paired) {
Wk$gear=Wk[,gear]
if(is.null(block)) Wk$block="All" else Wk$block=data[,block]
haulgrp= Wk %>% group_by(block,haul) %>%
summarize(grp=unique(gear), .groups = "drop_last")
if(nrow(haulgear)!=nHauls)
stop("Permutation ERROR: Check data for multiple gear types in a haul")
#haulgear tibble is still grouped by block.
#Use slice_sample to sample (without replacement) from each block
#Code works with n=nHauls even though it exceeds block size unless block="All"
permgrp = haulgear %>% slice_sample(n=nHauls)
#Identify which hauls are permuted
permuted.hauls=haulgrp$haul[haulgrp$grp!=permgrp$grp]
#Identify the permuted rows in the data frame, and permute
permuted.obs=(Wk$haul %in% permuted.hauls)
df.perm[permuted.obs,n.names]=df[permuted.obs,rev(n.names)]
df.perm$Permuted=permuted.obs
#Now go back to the original haul order
permuted.gear = permgear[Wk$haul]
permuted.obs=(Wk$gear!=permuted.gear)
data[permuted.obs,freq.names]=data[permuted.obs,rev(freq.names)]
if(!is.null(q.names))
data[permuted.obs,q.names]=data[permuted.obs,rev(q.names)]
}
return(as.data.frame(data))
}
DF2
Randomize(DF2,c("n1","n2"),haul="Haul",paired=F,gear="Gear",block="Day")
source("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R/BOOTSTRAP&PERMUTATION.R")
Randomize(DF2,c("n1","n2"),haul="Haul",paired=F,gear="Gear",block="Day")
source("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R/BOOTSTRAP&PERMUTATION.R")
Randomize(DF2,c("n1","n2"),haul="Haul",paired=F,gear="Gear",block="Day")
source("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R/BOOTSTRAP&PERMUTATION.R")
Randomize(DF2,c("n1","n2"),haul="Haul",paired=F,gear="Gear",block="Day")
DF2
Randomize(DF2,c("n1","n2"),haul="Haul",paired=F,gear="Gear",block="Day")
Randomize(DF2,c("n1","n2"),haul="Haul",paired=F,gear="Gear",block="Day")
Randomize(DF2,c("n1","n2"),haul="Haul",paired=F,gear="Gear",block="Day")
Randomize(DF2,c("n1","n2"),haul="Haul",paired=F,gear="Gear",block="Day")
Randomize(DF2,c("n1","n2"),haul="Haul",paired=F,gear="Gear")
source("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R/BOOTSTRAP&PERMUTATION.R")
Randomize
tf=function(a,b=0) a+b
tf(1,2)
tf(2)
tff=functions(c,...) tf(c,...)
tff=function(d,...) tf(d,...)
tff(9)
tf(9,8)
tf(9,b=8)
#NB: remotes package needs to be installed
remotes::install_github("rbmillar/SELECT")
require(SELECT)
require(tidyverse)
remotes::install_github("rbmillar/SELECT")
remotes::install_github("rbmillar/SELECT")
#NB: remotes package needs to be installed
#remotes::install_github("rbmillar/SELECT")
require(SELECT)
require(tidyverse)
#Use dtype="cc" to specify that design type is covered codend
data(Clark)
head(Clark)
cc.names=c("lenclass","cover","codend")
#Fit logistic selection curve
fitL=SELECT(Clark,cc.names,dtype="cc")
ModelCheck(fitL,minE=1,las=1)
Estimates(fitL)
PlotCurves(fitL,plotlens=seq(19,56,0.1))
#Fit Richards selection curve
fitR=SELECT(Clark,cc.names,dtype="cc",stype="richards")
ModelCheck(fitR,minE=1,las=1)
Estimates(fitR);
PlotCurves(fitR,plotlens=seq(19,56,0.1))
#Likelihood ratio test for H0 that logistic mode is adequate
LRTstat=2*(deviance(fitL)-deviance(fitR))
cat("\n p-value for H0:logistic is",1-pchisq(LRTstat,1))
#Use dtype="ph" to specify that design type is paired haul
data(Pope)
head(Pope)
ph.names=c("Lengths","nfine","nwide")
#FIt logistic seln cure
fitL=SELECT(Pope,ph.names,dtype="ph")
ModelCheck(fitL,minE=1,las=1)
Estimates(fitL)
PlotCurves(fitL)
predict(fitL)
#Fixed split, psplit=0.5
fitR2=SELECT(Pope,ph.names,dtype="re",x0=c(-30,1),rel.power=c(1,1))
ModelCheck(fitR2,minE=1,las=1)
Estimates(fitR2)
PlotCurves(fitR2,las=1)
require(mgcv)
data(SimCatch)
head(SimCatch)
Vnames=c("lgth","n1","n2")
SplineFit=SplineSELECT(SimCatch,var.names=Vnames)
nsim=400 #Change to at least 1000 in practice
plot(SplineFit)
require(mgcv)
data(SimCatch)
head(SimCatch)
Vnames=c("lgth","n1","n2")
SplineFit=SplineSELECT(SimCatch,var.names=Vnames)
lenseq=21:120
predn=predict(SplineFit,newdata=data.frame(lgth=lenseq),type="response")
plot(lenseq,predn,type="l",ylab="Catch share")
plot(lenseq,predn,type="l",ylab="Catch share")
plot(lenseq,predn,type="l",ylab="Catch share",ylim=c(0,1))
plot(lenseq,predn,type="l",ylab="Catch share",ylim=c(0,1))
require(mgcv)
data(SimCatch)
head(SimCatch)
Vnames=c("lgth","n1","n2")
SplineFit=SplineSELECT(SimCatch,var.names=Vnames)
lenseq=21:120
predn=predict(SplineFit,newdata=data.frame(lgth=lenseq),type="response")
plot(lenseq,predn,type="l",xlab="Length",ylab="Catch share")
plot(lenseq,predn,type="l",xlab="Length",ylab="Catch share")
plot(lenseq,predn,type="l",xlab="Length",ylab="Catch share",las=1)
plot(lenseq,predn,type="l",xlab="Length",ylab="Catch share",las=1)
nsim=400 #Change to at least 1000 in practice
lenseq=21:120
bootPredn=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names)
predict(SplineFit,newdata=data.frame(lgth=lenseq),type="response") }
#Check that it works
preds=bootPredn(SimCatch,Vnames)
plot(lenseq,preds,type="l",xlab="Length",ylab="Catch share")
BootPreds=bootSELECT(SimCatch,Vnames,bootPredn,haul="TowID",nsim=nsim,paired=T)
Propn=SimCatch %>% group_by(lgth) %>% summarize(n1=sum(n1),n2=sum(n2))     %>% mutate(y=n2/(n1+n2))
BootPlot(BootPreds,lenseq,preds,Propn)
BootPlot(BootPreds,lenseq,preds,Propn)
nsim=400 #Change to at least 1000 in practice
permRsq=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names)
summary(SplineFit)$r.sq }
ObsRsq=permRsq(SimCatch,Vnames)
cat("\nThe observed r-square is",ObsRsq,"\n")
PermRsq=permSELECT(SimCatch,Vnames,permRsq,haul="TowID",nsim=nsim, paired=T)
pval=mean(ObsRsq<=PermRsq)
cat("\nThe p-value for length-independent catch share is",pval,"\n")
SimCatch
Randomize

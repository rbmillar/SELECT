Predn=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names,q.names,quasi=T)
predict(SplineFit,newdata=data.frame(lgth=lgth.seq),type="response")
}
nboot=100 #Number of bootstrap replicates
BootPredns=bootSELECT(SpecDf,var.names,Predn,haul="TowID",nsim=nboot,
gear="Gear",paired=F)
BootPlot(BootPredns,lgth.seq,predn=Fitted,Data=Tots)
#Define function that returns an appropriate test statistic(s)
permLRT=function(data,var.names,q.names) { #No good with quasi=T)
SplineFit=SplineSELECT(data,var.names,q.names=NULL,quasi=T)
LogLiks=LOGLIKS(data,var.names,fixed=c(0.5,0.5))
LRT=2*(logLik(SplineFit)-LogLiks$null)
LRT0.5=2*(logLik(SplineFit)-LogLiks$fixed)
c(LRT,LRT0.5) }
permRsq=function(data,var.names,q.names) {
SplineFit=SplineSELECT(data,var.names,q.names=NULL,quasi=T)
summary(SplineFit)$r.sq }
permFunc=permRsq
obsStat=permFunc(SpecDf,var.names,q.names)
permStats=permSELECT(SpecDf,var.names,permFunc,haul="TowID",nsim=200,
paired=F,gear="Gear",q.names=q.names)
permPval(obsStat,permStats)
species=c("Flathead","Whiting","Gurnard")
Spec=1 #Species selection
Gears=c("T0","T90N","T90W")
SpecDf=DF %>% filter(Species==species[Spec], Gear!="T0")
#SpecDf %>% group_by(Gear) %>% summarize(nTows=length(unique(TowID)))
var.names=c("lgth","nT90N","nT90W")
q.names=c("qT90N","qT90W")
var.names=c("lgth","nT0","nT90W")
q.names=c("qT0","qT90W")
Tots=Raw2Tots(SpecDf,var.names,q.names);
#Calculate proportion in T90W include on plots
#Tots=Tots |> mutate(n=nT90N+nT90W,y=nT90W/n) |> filter(n>0) #
Tots=Tots |> mutate(n=nT0+nT90W,y=nT90W/n) |> filter(n>0) #
LOGLIKS(SpecDf,var.names,q.names)
lgth.seq=seq(15,60,0.5) #Length sequence for predictions
SplineFit=SplineSELECT(SpecDf,var.names,q.names,quasi=T)
Fitted=predict(SplineFit,newdata=data.frame(lgth=lgth.seq),type="response")
plot(lgth.seq,Fitted,type="l",xlab="Length (cm)",ylab="Catch share",
main=paste(species[Spec],"T90N and T90W"),ylim=c(0,1))
points(Tots$lgth,Tots$y,pch=16)
species=c("Flathead","Whiting","Gurnard")
Spec=1 #Species selection
Gears=c("T0","T90N","T90W")
SpecDf=DF %>% filter(Species==species[Spec], Gear!="T0")
#SpecDf %>% group_by(Gear) %>% summarize(nTows=length(unique(TowID)))
var.names=c("lgth","nT90N","nT90W")
q.names=c("qT90N","qT90W")
var.names=c("lgth","nT0","nT90W")
q.names=c("qT0","qT90W")
Tots=Raw2Tots(SpecDf,var.names,q.names);
#Calculate proportion in T90W include on plots
#Tots=Tots |> mutate(n=nT90N+nT90W,y=nT90W/n) |> filter(n>0) #
Tots=Tots |> mutate(n=nT0+nT90W,y=nT90W/n) |> filter(n>0) #
LOGLIKS(SpecDf,var.names,q.names)
lgth.seq=seq(15,60,0.5) #Length sequence for predictions
SplineFit=SplineSELECT(SpecDf,var.names,q.names,quasi=T)
Fitted=predict(SplineFit,newdata=data.frame(lgth=lgth.seq),type="response")
plot(lgth.seq,Fitted,type="l",xlab="Length (cm)",ylab="Catch share",
main=paste(species[Spec],"T90N and T90W"),ylim=c(0,1))
points(Tots$lgth,Tots$y,pch=16)
workdir="T:/Russell_SSD/ACTIVE/Collaboration/CTU/FRDC/Expt7T90&CircumEffectsOnFlathead/"
TF.df=read_excel(paste0(workdir,"Tigerflathead sizes for Russell.xlsx"),sheet="Data")
TF.df$Species="Flathead"
ESW.df=read_excel(paste0(workdir,"Eastern school whiting sizes for Russell.xlsx"),sheet=1)
ESW.df$Species="Whiting"
GUR.df=read_excel(paste0(workdir,"Round.snouted gurnard sizes for Russell.xlsx"),sheet=1)
GUR.df$Species="Gurnard"
All.df=rbind(TF.df,ESW.df,GUR.df)
All.df=rename(All.df,SF=ScalingFactor,Gear=Codend,lgth=Species.Size,
TowID=Set.Number,nSamp=TotalNumberofFishMeasured,
nTot=NumberofFishinCatch,n=NumberMeasuredatLength)
#All.df %>% group_by(Gear) %>% summarize(nTows=length(unique(TowID)))
All.df %>% group_by(Day,Haul) %>% summarize(Gear=unique(Gear)) |> print(n=40)
#Only days 4(4), 14(4), 9(2), 6(3) & 13(3) have hauls with both T90N and T90W
#Shorten Gear names
All.df$Gear=c("T0","T90N","T90W")[match(All.df$Gear,c("90-mm","Narrow-T90","Wide-T90"))]
All.df$q=1/All.df$SF
All.df=subset(All.df,select=-c(WeightedNumber,Fate,nTot,SF,nSamp)) %>% data.frame()
#All.df$Row=1:nrow(All.df)
DF=SELECT.FORMAT(All.df,by=c("Species","TowID","lgth"),
gear="Gear",freq="n",q.name="q",paired=F)
species=c("Flathead","Whiting","Gurnard")
Spec=1 #Species selection
Gears=c("T0","T90N","T90W")
SpecDf=DF %>% filter(Species==species[Spec], Gear!="T0")
#SpecDf %>% group_by(Gear) %>% summarize(nTows=length(unique(TowID)))
var.names=c("lgth","nT90N","nT90W")
q.names=c("qT90N","qT90W")
var.names=c("lgth","nT0","nT90W")
q.names=c("qT0","qT90W")
Tots=Raw2Tots(SpecDf,var.names,q.names);
#Calculate proportion in T90W include on plots
#Tots=Tots |> mutate(n=nT90N+nT90W,y=nT90W/n) |> filter(n>0) #
Tots=Tots |> mutate(n=nT0+nT90W,y=nT90W/n) |> filter(n>0) #
LOGLIKS(SpecDf,var.names,q.names)
lgth.seq=seq(15,60,0.5) #Length sequence for predictions
SplineFit=SplineSELECT(SpecDf,var.names,q.names,quasi=T)
Fitted=predict(SplineFit,newdata=data.frame(lgth=lgth.seq),type="response")
plot(lgth.seq,Fitted,type="l",xlab="Length (cm)",ylab="Catch share",
main=paste(species[Spec],"T90N and T90W"),ylim=c(0,1))
points(Tots$lgth,Tots$y,pch=16)
Tots
species=c("Flathead","Whiting","Gurnard")
Spec=1 #Species selection
Gears=c("T0","T90N","T90W")
#SpecDf=DF %>% filter(Species==species[Spec], Gear!="T0")
SpecDf=DF %>% filter(Species==species[Spec], Gear!="T90N")
#SpecDf %>% group_by(Gear) %>% summarize(nTows=length(unique(TowID)))
var.names=c("lgth","nT90N","nT90W")
q.names=c("qT90N","qT90W")
var.names=c("lgth","nT0","nT90W")
q.names=c("qT0","qT90W")
Tots=Raw2Tots(SpecDf,var.names,q.names);
#Calculate proportion in T90W include on plots
#Tots=Tots |> mutate(n=nT90N+nT90W,y=nT90W/n) |> filter(n>0) #
Tots=Tots |> mutate(n=nT0+nT90W,y=nT90W/n) |> filter(n>0) #
LOGLIKS(SpecDf,var.names,q.names)
lgth.seq=seq(15,60,0.5) #Length sequence for predictions
SplineFit=SplineSELECT(SpecDf,var.names,q.names,quasi=T)
Fitted=predict(SplineFit,newdata=data.frame(lgth=lgth.seq),type="response")
plot(lgth.seq,Fitted,type="l",xlab="Length (cm)",ylab="Catch share",
main=paste(species[Spec],"T90N and T90W"),ylim=c(0,1))
points(Tots$lgth,Tots$y,pch=16)
#Define function that returns predictions (copy and paste above code)
Predn=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names,q.names,quasi=T)
predict(SplineFit,newdata=data.frame(lgth=lgth.seq),type="response")
}
nboot=100 #Number of bootstrap replicates
BootPredns=bootSELECT(SpecDf,var.names,Predn,haul="TowID",nsim=nboot,
gear="Gear",paired=F)
BootPlot(BootPredns,lgth.seq,predn=Fitted,Data=Tots)
#Define function that returns predictions (copy and paste above code)
Predn=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names,q.names,quasi=T)
predict(SplineFit,newdata=data.frame(lgth=lgth.seq),type="response")
}
nboot=100 #Number of bootstrap replicates
BootPredns=bootSELECT(SpecDf,var.names,Predn,haul="TowID",nsim=nboot,
gear="Gear",paired=F)
BootPlot(BootPredns,lgth.seq,predn=Fitted,Data=Tots)
#Define function that returns predictions (copy and paste above code)
Predn=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names,q.names,quasi=T)
predict(SplineFit,newdata=data.frame(lgth=lgth.seq),type="response")
}
nboot=400 #Number of bootstrap replicates
BootPredns=bootSELECT(SpecDf,var.names,Predn,haul="TowID",nsim=nboot,
gear="Gear",paired=F)
BootPlot(BootPredns,lgth.seq,predn=Fitted,Data=Tots)
#Define function that returns an appropriate test statistic(s)
permLRT=function(data,var.names,q.names) { #No good with quasi=T)
SplineFit=SplineSELECT(data,var.names,q.names=NULL,quasi=T)
LogLiks=LOGLIKS(data,var.names,fixed=c(0.5,0.5))
LRT=2*(logLik(SplineFit)-LogLiks$null)
LRT0.5=2*(logLik(SplineFit)-LogLiks$fixed)
c(LRT,LRT0.5) }
permRsq=function(data,var.names,q.names) {
SplineFit=SplineSELECT(data,var.names,q.names=NULL,quasi=T)
summary(SplineFit)$r.sq }
permFunc=permRsq
obsStat=permFunc(SpecDf,var.names,q.names)
permStats=permSELECT(SpecDf,var.names,permFunc,haul="TowID",nsim=200,
paired=F,gear="Gear",q.names=q.names)
permPval(obsStat,permStats)
#Define function that returns an appropriate test statistic(s)
permLRT=function(data,var.names,q.names) { #No good with quasi=T)
SplineFit=SplineSELECT(data,var.names,q.names=NULL,quasi=T)
LogLiks=LOGLIKS(data,var.names,fixed=c(0.5,0.5))
LRT=2*(logLik(SplineFit)-LogLiks$null)
LRT0.5=2*(logLik(SplineFit)-LogLiks$fixed)
c(LRT,LRT0.5) }
permRsq=function(data,var.names,q.names) {
SplineFit=SplineSELECT(data,var.names,q.names=NULL,quasi=T)
summary(SplineFit)$r.sq }
permFunc=permRsq
obsStat=permFunc(SpecDf,var.names,q.names)
nperm=400
permStats=permSELECT(SpecDf,var.names,permFunc,haul="TowID",nsim=nperm,
paired=F,gear="Gear",q.names=q.names)
permPval(obsStat,permStats)
#remotes::install_local("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT",force=T)
require(SELECT)
require(mgcv)
require(tidyverse)
require(readxl)
#require(gridExtra)
#require(ggpubr)
#require(stringr) #For str_sub() to use -ve string posns
workdir="T:/Russell_SSD/ACTIVE/Collaboration/CTU/FRDC/Expt7T90&CircumEffectsOnFlathead/"
TF.df=read_excel(paste0(workdir,"Tigerflathead sizes for Russell.xlsx"),sheet="Data")
TF.df$Species="Flathead"
ESW.df=read_excel(paste0(workdir,"Eastern school whiting sizes for Russell.xlsx"),sheet=1)
ESW.df$Species="Whiting"
GUR.df=read_excel(paste0(workdir,"Round.snouted gurnard sizes for Russell.xlsx"),sheet=1)
GUR.df$Species="Gurnard"
All.df=rbind(TF.df,ESW.df,GUR.df)
All.df=rename(All.df,SF=ScalingFactor,Gear=Codend,lgth=Species.Size,
TowID=Set.Number,nSamp=TotalNumberofFishMeasured,
nTot=NumberofFishinCatch,n=NumberMeasuredatLength)
#All.df %>% group_by(Gear) %>% summarize(nTows=length(unique(TowID)))
All.df %>% group_by(Day,Haul) %>% summarize(Gear=unique(Gear)) |> print(n=40)
#Only days 4(4), 14(4), 9(2), 6(3) & 13(3) have hauls with both T90N and T90W
#Shorten Gear names
All.df$Gear=c("T0","T90N","T90W")[match(All.df$Gear,c("90-mm","Narrow-T90","Wide-T90"))]
All.df$q=1/All.df$SF
All.df=subset(All.df,select=-c(WeightedNumber,Fate,nTot,SF,nSamp)) %>% data.frame()
#All.df$Row=1:nrow(All.df)
DF=SELECT.FORMAT(All.df,by=c("Species","TowID","lgth"),
gear="Gear",freq="n",q.name="q",paired=F)
SELECT.FORMAT
SELECT.FORMAT=function(Df,by=c("haul","lgth"),gear="gear",freq="freq",q.name=NULL,
paired=T) {
UniqueCheck=Df|>group_by(across(all_of(c(by,gear))))|> summarize(m=n(),.groups="keep")
if(max(UniqueCheck$m)>1) {
warning("Possible data error: There are multiple rows for a unique \n combination of ",
c(by,gear),". A unique row ID variable has been added \n")
Df$uniqueRowID=1:nrow(Df)
by=c("uniqueRowID",by) }
if(is.null(q.name)) values=freq else values=c(freq,q.name)
Wk=Df |> select(all_of( c(by,gear,values) ))
Wk = Wk |>   pivot_wider(names_from=all_of(gear), #names_prefix=namePrefix,
values_from=all_of(values), values_fill=0, names_sep="")
if(!paired) Wk[,gear]=Df[,gear]
Wk
}
DF=SELECT.FORMAT(All.df,by=c("Species","Day","TowID","lgth"),
gear="Gear",freq="n",q.name="q",paired=F)
head(DF)
#Define function that returns an appropriate test statistic(s)
permLRT=function(data,var.names,q.names) { #No good with quasi=T)
SplineFit=SplineSELECT(data,var.names,q.names=NULL,quasi=T)
LogLiks=LOGLIKS(data,var.names,fixed=c(0.5,0.5))
LRT=2*(logLik(SplineFit)-LogLiks$null)
LRT0.5=2*(logLik(SplineFit)-LogLiks$fixed)
c(LRT,LRT0.5) }
permRsq=function(data,var.names,q.names) {
SplineFit=SplineSELECT(data,var.names,q.names=NULL,quasi=T)
summary(SplineFit)$r.sq }
permFunc=permRsq
obsStat=permFunc(SpecDf,var.names,q.names)
species=c("Flathead","Whiting","Gurnard")
Spec=1 #Species selection
Gears=c("T0","T90N","T90W")
#SpecDf=DF %>% filter(Species==species[Spec], Gear!="T0")
SpecDf=DF %>% filter(Species==species[Spec], Gear!="T90N")
#SpecDf %>% group_by(Gear) %>% summarize(nTows=length(unique(TowID)))
var.names=c("lgth","nT90N","nT90W")
q.names=c("qT90N","qT90W")
var.names=c("lgth","nT0","nT90W")
q.names=c("qT0","qT90W")
Tots=Raw2Tots(SpecDf,var.names,q.names);
#Calculate proportion in T90W include on plots
#Tots=Tots |> mutate(n=nT90N+nT90W,y=nT90W/n) |> filter(n>0) #
Tots=Tots |> mutate(n=nT0+nT90W,y=nT90W/n) |> filter(n>0) #
LOGLIKS(SpecDf,var.names,q.names)
lgth.seq=seq(15,60,0.5) #Length sequence for predictions
SplineFit=SplineSELECT(SpecDf,var.names,q.names,quasi=T)
Fitted=predict(SplineFit,newdata=data.frame(lgth=lgth.seq),type="response")
plot(lgth.seq,Fitted,type="l",xlab="Length (cm)",ylab="Catch share",
main=paste(species[Spec],"T90N and T90W"),ylim=c(0,1))
points(Tots$lgth,Tots$y,pch=16)
#Define function that returns an appropriate test statistic(s)
permLRT=function(data,var.names,q.names) { #No good with quasi=T)
SplineFit=SplineSELECT(data,var.names,q.names=NULL,quasi=T)
LogLiks=LOGLIKS(data,var.names,fixed=c(0.5,0.5))
LRT=2*(logLik(SplineFit)-LogLiks$null)
LRT0.5=2*(logLik(SplineFit)-LogLiks$fixed)
c(LRT,LRT0.5) }
permRsq=function(data,var.names,q.names) {
SplineFit=SplineSELECT(data,var.names,q.names=NULL,quasi=T)
summary(SplineFit)$r.sq }
permFunc=permRsq
obsStat=permFunc(SpecDf,var.names,q.names)
nperm=400
permStats=permSELECT(SpecDf,var.names,permFunc,haul="TowID",nsim=nperm,
paired=F,gear="Gear",q.names=q.names,block="Day")
permPval(obsStat,permStats)
permCheck=function(data,var.names,q.names) {
Wk=data %>% group_by(Day,Towid) %>% summarize(Gear=unique(Gear))
Wk$Gear }
#Define function that returns an appropriate test statistic(s)
permLRT=function(data,var.names,q.names) { #No good with quasi=T)
SplineFit=SplineSELECT(data,var.names,q.names=NULL,quasi=T)
LogLiks=LOGLIKS(data,var.names,fixed=c(0.5,0.5))
LRT=2*(logLik(SplineFit)-LogLiks$null)
LRT0.5=2*(logLik(SplineFit)-LogLiks$fixed)
c(LRT,LRT0.5) }
permRsq=function(data,var.names,q.names) {
SplineFit=SplineSELECT(data,var.names,q.names=NULL,quasi=T)
summary(SplineFit)$r.sq }
permCheck=function(data,var.names,q.names) {
Wk=data %>% group_by(Day,Towid) %>% summarize(Gear=unique(Gear))
Wk$Gear }
permFunc=permRsq
permFunc=permCheck
obsStat=permFunc(SpecDf,var.names,q.names)
#Define function that returns an appropriate test statistic(s)
permLRT=function(data,var.names,q.names) { #No good with quasi=T)
SplineFit=SplineSELECT(data,var.names,q.names=NULL,quasi=T)
LogLiks=LOGLIKS(data,var.names,fixed=c(0.5,0.5))
LRT=2*(logLik(SplineFit)-LogLiks$null)
LRT0.5=2*(logLik(SplineFit)-LogLiks$fixed)
c(LRT,LRT0.5) }
permRsq=function(data,var.names,q.names) {
SplineFit=SplineSELECT(data,var.names,q.names=NULL,quasi=T)
summary(SplineFit)$r.sq }
permCheck=function(data,var.names,q.names) {
Wk=data %>% group_by(Day,TowId) %>% summarize(Gear=unique(Gear))
Wk$Gear }
permFunc=permRsq
permFunc=permCheck
obsStat=permFunc(SpecDf,var.names,q.names)
#Define function that returns an appropriate test statistic(s)
permLRT=function(data,var.names,q.names) { #No good with quasi=T)
SplineFit=SplineSELECT(data,var.names,q.names=NULL,quasi=T)
LogLiks=LOGLIKS(data,var.names,fixed=c(0.5,0.5))
LRT=2*(logLik(SplineFit)-LogLiks$null)
LRT0.5=2*(logLik(SplineFit)-LogLiks$fixed)
c(LRT,LRT0.5) }
permRsq=function(data,var.names,q.names) {
SplineFit=SplineSELECT(data,var.names,q.names=NULL,quasi=T)
summary(SplineFit)$r.sq }
permCheck=function(data,var.names,q.names) {
Wk=data %>% group_by(Day,TowID) %>% summarize(Gear=unique(Gear))
Wk$Gear }
permFunc=permRsq
permFunc=permCheck
obsStat=permFunc(SpecDf,var.names,q.names)
nperm=400
permStats=permSELECT(SpecDf,var.names,permFunc,haul="TowID",nsim=nperm,
paired=F,gear="Gear",q.names=q.names,block="Day")
permPval(obsStat,permStats)
obsStat
head(permStats)
Randomize
xx=c("A","B")[sample(1:2,10)]
permCheck=function(data,var.names,q.names) {
Wk=data %>% group_by(Day,Towid) %>% summarize(Gear=unique(Gear))
Wk$Gear }
xx=c("A","B")[sample(1:2,10),T]
xx=c("A","B")[sample(1:2,10),replace=T]
xx=c("A","B")[sample(1:2,10,replace=T)]
xx
G
G=unique(xx)
G
ifelse(xx=G[1],G[2],G[1])
permCheck=function(data,var.names,q.names) {
Wk=data %>% group_by(Day,Towid) %>% summarize(Gear=unique(Gear))
Wk$Gear }
ifelse(xx==G[1],G[2],G[1])
source("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R/BOOTSTRAP&PERMUTATION.R")
Randomize
Randomize(data=Spec.df, var.names[2:3], haul="TowID",
paired=F, gear="Gear", q.names=q.names, block="Day")
Randomize(data=SpecDf, var.names[2:3], haul="TowID",
paired=F, gear="Gear", q.names=q.names, block="Day")
Randomize(data=SpecDf, var.names[2:3], haul="TowID",
paired=F, gear="Gear", q.names=q.names, block="Day")
Randomize(data=SpecDf, var.names[2:3], haul="TowID",
paired=F, gear="Gear", q.names=q.names, block="Day")
Randomize(data=SpecDf, var.names[2:3], haul="TowID",
paired=F, gear="Gear", q.names=q.names, block="Day")
nperm=400
permStats=permSELECT(SpecDf,var.names,permFunc,haul="TowID",nsim=nperm,
paired=F,gear="Gear",q.names=q.names,block="Day")
permPval(obsStat,permStats)
remotes::install_local("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT",force=T)
#remotes::install_local("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT",force=T)
#require(gridExtra)
#require(ggpubr)
#require(stringr) #For str_sub() to use -ve string posns
require(SELECT)
require(mgcv)
require(tidyverse)
require(readxl)
Randomize
workdir="T:/Russell_SSD/ACTIVE/Collaboration/CTU/FRDC/Expt7T90&CircumEffectsOnFlathead/"
TF.df=read_excel(paste0(workdir,"Tigerflathead sizes for Russell.xlsx"),sheet="Data")
TF.df$Species="Flathead"
ESW.df=read_excel(paste0(workdir,"Eastern school whiting sizes for Russell.xlsx"),sheet=1)
ESW.df$Species="Whiting"
GUR.df=read_excel(paste0(workdir,"Round.snouted gurnard sizes for Russell.xlsx"),sheet=1)
GUR.df$Species="Gurnard"
All.df=rbind(TF.df,ESW.df,GUR.df)
All.df=rename(All.df,SF=ScalingFactor,Gear=Codend,lgth=Species.Size,
TowID=Set.Number,nSamp=TotalNumberofFishMeasured,
nTot=NumberofFishinCatch,n=NumberMeasuredatLength)
#All.df %>% group_by(Gear) %>% summarize(nTows=length(unique(TowID)))
All.df %>% group_by(Day,Haul) %>% summarize(Gear=unique(Gear)) |> print(n=40)
#Only days 4(4), 14(4), 9(2), 6(3) & 13(3) have hauls with both T90N and T90W
#Shorten Gear names
All.df$Gear=c("T0","T90N","T90W")[match(All.df$Gear,c("90-mm","Narrow-T90","Wide-T90"))]
All.df$q=1/All.df$SF
All.df=subset(All.df,select=-c(WeightedNumber,Fate,nTot,SF,nSamp)) %>% data.frame()
#All.df$Row=1:nrow(All.df)
DF=SELECT.FORMAT(All.df,by=c("Species","Day","TowID","lgth"),
gear="Gear",freq="n",q.name="q",paired=F)
species=c("Flathead","Whiting","Gurnard")
Spec=1 #Species selection
Gears=c("T0","T90N","T90W")
#SpecDf=DF %>% filter(Species==species[Spec], Gear!="T0")
SpecDf=DF %>% filter(Species==species[Spec], Gear!="T90N")
#SpecDf %>% group_by(Gear) %>% summarize(nTows=length(unique(TowID)))
var.names=c("lgth","nT90N","nT90W")
q.names=c("qT90N","qT90W")
var.names=c("lgth","nT0","nT90W")
q.names=c("qT0","qT90W")
Tots=Raw2Tots(SpecDf,var.names,q.names);
#Calculate proportion in T90W include on plots
#Tots=Tots |> mutate(n=nT90N+nT90W,y=nT90W/n) |> filter(n>0) #
Tots=Tots |> mutate(n=nT0+nT90W,y=nT90W/n) |> filter(n>0) #
LOGLIKS(SpecDf,var.names,q.names)
lgth.seq=seq(15,60,0.5) #Length sequence for predictions
SplineFit=SplineSELECT(SpecDf,var.names,q.names,quasi=T)
Fitted=predict(SplineFit,newdata=data.frame(lgth=lgth.seq),type="response")
plot(lgth.seq,Fitted,type="l",xlab="Length (cm)",ylab="Catch share",
main=paste(species[Spec],"T90N and T90W"),ylim=c(0,1))
points(Tots$lgth,Tots$y,pch=16)
#Define function that returns predictions (copy and paste above code)
Predn=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names,q.names,quasi=T)
predict(SplineFit,newdata=data.frame(lgth=lgth.seq),type="response")
}
nboot=400 #Number of bootstrap replicates
BootPredns=bootSELECT(SpecDf,var.names,Predn,haul="TowID",nsim=nboot,
gear="Gear",paired=F)
BootPlot(BootPredns,lgth.seq,predn=Fitted,Data=Tots)
head(SpecDf)
Spec.df %>% group_by(Day,TowID) %>% summarize(Gear=unique(Gear)) |> print(n=40)
SpecDf %>% group_by(Day,TowID) %>% summarize(Gear=unique(Gear)) |> print(n=40)
Spec.df %>% group_by(Day,TowID) %>% summarize(Gear=unique(Gear)) |> print(n=40)
SpecDf %>% group_by(Day,TowID) %>% summarize(Gear=unique(Gear)) |> print(n=40)
SpecDf %>% group_by(Day,TowID) %>% summarize(Gear=unique(Gear)) |> print(n=40)
All.df %>% group_by(Day,TowID) %>% summarize(Gear=unique(Gear)) |> print(n=40)
View(All.df)
Spec
dim(DF)
SpecDf=DF %>% filter(Species==species[Spec], Gear!="T0")
SpecDf %>% group_by(Day,TowID) %>% summarize(Gear=unique(Gear)) |> print(n=40)
species=c("Flathead","Whiting","Gurnard")
Spec=1 #Species selection
Gears=c("T0","T90N","T90W")
#SpecDf=DF %>% filter(Species==species[Spec], Gear!="T0")
SpecDf=DF %>% filter(Species==species[Spec], Gear!="T90N")
#SpecDf %>% group_by(Gear) %>% summarize(nTows=length(unique(TowID)))
var.names=c("lgth","nT90N","nT90W")
q.names=c("qT90N","qT90W")
var.names=c("lgth","nT0","nT90W")
q.names=c("qT0","qT90W")
Tots=Raw2Tots(SpecDf,var.names,q.names);
#Calculate proportion in T90W include on plots
#Tots=Tots |> mutate(n=nT90N+nT90W,y=nT90W/n) |> filter(n>0) #
Tots=Tots |> mutate(n=nT0+nT90W,y=nT90W/n) |> filter(n>0) #
LOGLIKS(SpecDf,var.names,q.names)
lgth.seq=seq(15,60,0.5) #Length sequence for predictions
SplineFit=SplineSELECT(SpecDf,var.names,q.names,quasi=T)
Fitted=predict(SplineFit,newdata=data.frame(lgth=lgth.seq),type="response")
plot(lgth.seq,Fitted,type="l",xlab="Length (cm)",ylab="Catch share",
main=paste(species[Spec],"T90N and T90W"),ylim=c(0,1))
points(Tots$lgth,Tots$y,pch=16)
permLRT=function(data,var.names,q.names) { #No good with quasi=T)
SplineFit=SplineSELECT(data,var.names,q.names=NULL,quasi=T)
LogLiks=LOGLIKS(data,var.names,fixed=c(0.5,0.5))
LRT=2*(logLik(SplineFit)-LogLiks$null)
LRT0.5=2*(logLik(SplineFit)-LogLiks$fixed)
c(LRT,LRT0.5) }
permRsq=function(data,var.names,q.names) {
SplineFit=SplineSELECT(data,var.names,q.names=NULL,quasi=T)
summary(SplineFit)$r.sq }
permCheck=function(data,var.names,q.names) {
Wk=data %>% group_by(Day,TowID) %>% summarize(Gear=unique(Gear))
Wk$Gear }
permFunc=permRsq
#permFunc=permCheck
SpecDf %>% group_by(Day,TowID) %>% summarize(Gear=unique(Gear)) |> print(n=40)
obsStat=permFunc(SpecDf,var.names,q.names)
nperm=400
permStats=permSELECT(SpecDf,var.names,permFunc,haul="TowID",nsim=nperm,
paired=F,gear="Gear",q.names=q.names,block="Day")
permStats
sort(permStats)
length(unique(permStats))
obsStat
nperm=400
permStats=permSELECT(SpecDf,var.names,permFunc,haul="TowID",nsim=nperm,
paired=F,gear="Gear",q.names=q.names,block="Day")
sort(permStats)
head(SpecDf)
permDf=Randomize(data=SpecDf, var.names[2:3], haul="TowID",
paired=F, gear="Gear", q.names=q.names, block="Day")
head(permDf)
PermDf=Randomize(data=SpecDf, var.names[2:3], haul="TowID",
paired=F, gear="Gear", q.names=q.names, block="Day")
SpecDf %>% group_by(Day,TowID) %>% summarize(Gear=unique(Gear)) |> print(n=40)
PermDf %>% group_by(Day,TowID) %>%
summarize(Permuted=unique(Permuted),Gear=unique(permuted.Gear)) |> print(n=40)
SpecDf %>% group_by(Day,TowID) %>% summarize(Gear=unique(Gear)) |> print(n=40)
PermDf %>% group_by(Day,TowID) %>%
summarize(Permuted=unique(Permuted),Gear=unique(permuted.Gear)) |> print(n=40)
PermDf=Randomize(data=SpecDf, var.names[2:3], haul="TowID",
paired=F, gear="Gear", q.names=q.names) #, block="Day")
SpecDf %>% group_by(Day,TowID) %>% summarize(Gear=unique(Gear)) |> print(n=40)
PermDf %>% group_by(Day,TowID) %>%
summarize(Permuted=unique(Permuted),Gear=unique(permuted.Gear)) |> print(n=40)
SpecDf %>% group_by(Day,TowID) %>% summarize(Gear=unique(Gear)) |> print(n=40)
PermDf %>% group_by(Day,TowID) %>%
summarize(Permuted=unique(Permuted),Gear=unique(permuted.Gear)) |> print(n=40)

cat("The observed",Stat,"is",ObsStats[Stat],"\n")
pval=permPval(ObsStats[Stat],PermStats[,Stat])
cat("The permutational p-value for equivalence is",pval,"\n")
Stat="PropnRatio" #Proportion of large fish in gear B compared to in gear A
cat("The observed",Stat,"is",ObsStats[Stat],"\n")
pval=permPval(ObsStats[Stat],PermStats[,Stat])
cat("The permutational p-value for equal propns of large fish is",pval,"\n")
GearA.df=read_excel("SchoolPrawnLenFreqs.xlsx", sheet = "32 square trawl")
GearB.df=read_excel("SchoolPrawnLenFreqs.xlsx", sheet = "35 square trawl")
CommonHauls=intersect(unique(GearA.df$Day),unique(GearB.df$Day))
GearA.df = GearA.df |>
rename(Haul=Day, n=No.school)  |>
filter(Haul %in% CommonHauls) |>
mutate(Haul=paste0(Haul,".A"),q=1/Sf.school,Gear="A") |>
select(-Sf.school)
GearB.df = GearB.df |>
rename(Haul=Day, n=No.school) |>
filter(Haul %in% CommonHauls) |>
mutate(Haul=paste0(Haul,".B"),q=1/Sf.school,Gear="B") |>
select(-Sf.school)
Df=rbind(GearA.df,GearB.df) #Stack the two dataframes
Df = Df |> filter(CL>=5 & CL<=25)
#Df |> group_by(Haul) |> summarise(n=sum(n/q)) #Check the haul totals
Gears.df=SELECT.FORMAT(Df,by=c("Haul","CL"),gear="Gear",freq="n",
q.name="q",paired=F)
head(Gears.df)
#Define the bootstrap prediction function
CLseq=seq(5,25,0.5) #Carapace lengths to use for predn
PrednFnc=function(data,var.names,q.names) {
SplineFit=SplineSELECT(data,var.names,q.names) #Defaults
predict(SplineFit,newdata=data.frame(CL=CLseq),type="response") }
#Check that it works
predn=PrednFnc(Gears.df,vNames,qNames)
#Plot predictions against observed proportions
Tots.df=Raw2Tots(Gears.df,vNames,qNames) |>
transform(lgth=CL, y=nB/(nA+nB))
plot(y~CL,data=Tots.df,ylim=c(0,1),xlab="Carapace length (mm)",
ylab="Gear B catch share")
points(CLseq,predn,type="l")
abline(h=0.5,lty=3)
BootPlot(BootPreds,CLseq,predn,Data=Tots.df) +
geom_hline(yintercept=0.5,linetype="dashed")
BootPreds=bootSELECT(Gears.df,vNames,qNames,PrednFnc,haul="Haul",nsim=nsim,
paired=F,gear="Gear",verbose=F)
BootPlot(BootPreds,CLseq,predn,Data=Tots.df) +
geom_hline(yintercept=0.5,linetype="dashed")
StatsFnc=function(data,var.names,q.names) {
SplineFit=SplineSELECT(data,var.names,q.names) #Defaults
SplineStatistics(SplineFit,MLS=15) }
#Check that it works
ObsStats=StatsFnc(Gears.df,vNames,qNames)
ObsStats
PermStats=permSELECT(Gears.df,vNames,qNames,StatsFnc,haul="Haul",nsim=nsim,
paired=F,gear="Gear",verbose=F) #Use verbose=T to see progress
colnames(PermStats)=names(ObsStats) #To add column names to PermStats
Stat="LRT" #Likelihood ratio test for a length effect
cat("The observed",Stat,"is",ObsStats[Stat],"\n")
pval=permPval(ObsStats[Stat],PermStats[,Stat])
cat("The permutational p-value for a length effect is",pval,"\n")
Stat="LRT0.5" #LRT for equivalence, i.e., catch comparison=0.5 for all lengths
cat("The observed",Stat,"is",ObsStats[Stat],"\n")
pval=permPval(ObsStats[Stat],PermStats[,Stat])
cat("The permutational p-value for equivalence is",pval,"\n")
Stat="PropnRatio" #Proportion of large fish in gear B compared to in gear A
cat("The observed",Stat,"is",ObsStats[Stat],"\n")
pval=permPval(ObsStats[Stat],PermStats[,Stat])
cat("The permutational p-value for equal propns of large fish is",pval,"\n")
StatsFnc=function(data,var.names,q.names) {
SplineFit=SplineSELECT(data,var.names,q.names) #Defaults
SplineStatistics(SplineFit,MLS=16) }
#Check that it works
ObsStats=StatsFnc(Gears.df,vNames,qNames)
ObsStats
PermStats=permSELECT(Gears.df,vNames,qNames,StatsFnc,haul="Haul",nsim=nsim,
paired=F,gear="Gear",verbose=F) #Use verbose=T to see progress
colnames(PermStats)=names(ObsStats) #To add column names to PermStats
Stat="LRT" #Likelihood ratio test for a length effect
cat("The observed",Stat,"is",ObsStats[Stat],"\n")
pval=permPval(ObsStats[Stat],PermStats[,Stat])
cat("The permutational p-value for a length effect is",pval,"\n")
Stat="LRT0.5" #LRT for equivalence, i.e., catch comparison=0.5 for all lengths
cat("The observed",Stat,"is",ObsStats[Stat],"\n")
pval=permPval(ObsStats[Stat],PermStats[,Stat])
cat("The permutational p-value for equivalence is",pval,"\n")
Stat="PropnRatio" #Proportion of large fish in gear B compared to in gear A
cat("The observed",Stat,"is",ObsStats[Stat],"\n")
pval=permPval(ObsStats[Stat],PermStats[,Stat])
cat("The permutational p-value for equal propns of large fish is",pval,"\n")
StatsFnc=function(data,var.names,q.names) {
SplineFit=SplineSELECT(data,var.names,q.names) #Defaults
SplineStatistics(SplineFit,MLS=14) }
#Check that it works
ObsStats=StatsFnc(Gears.df,vNames,qNames)
ObsStats
StatsFnc=function(data,var.names,q.names) {
SplineFit=SplineSELECT(data,var.names,q.names) #Defaults
SplineStatistics(SplineFit,MLS=14) }
#Check that it works
ObsStats=StatsFnc(Gears.df,vNames,qNames)
ObsStats
PermStats=permSELECT(Gears.df,vNames,qNames,StatsFnc,haul="Haul",nsim=nsim,
paired=F,gear="Gear",verbose=F) #Use verbose=T to see progress
colnames(PermStats)=names(ObsStats) #To add column names to PermStats
Stat="LRT" #Likelihood ratio test for a length effect
cat("The observed",Stat,"is",ObsStats[Stat],"\n")
pval=permPval(ObsStats[Stat],PermStats[,Stat])
cat("The permutational p-value for a length effect is",pval,"\n")
Stat="LRT0.5" #LRT for equivalence, i.e., catch comparison=0.5 for all lengths
cat("The observed",Stat,"is",ObsStats[Stat],"\n")
pval=permPval(ObsStats[Stat],PermStats[,Stat])
cat("The permutational p-value for equivalence is",pval,"\n")
Stat="PropnRatio" #Proportion of large fish in gear B compared to in gear A
cat("The observed",Stat,"is",ObsStats[Stat],"\n")
pval=permPval(ObsStats[Stat],PermStats[,Stat])
cat("The permutational p-value for equal propns of large fish is",pval,"\n")
StatsFnc=function(data,var.names,q.names) {
SplineFit=SplineSELECT(data,var.names,q.names,quasi=F) #Defaults
SplineStatistics(SplineFit,MLS=15) }
#Check that it works
ObsStats=StatsFnc(Gears.df,vNames,qNames)
ObsStats
PermStats=permSELECT(Gears.df,vNames,qNames,StatsFnc,haul="Haul",nsim=nsim,
paired=F,gear="Gear",verbose=F) #Use verbose=T to see progress
colnames(PermStats)=names(ObsStats) #To add column names to PermStats
Stat="LRT" #Likelihood ratio test for a length effect
cat("The observed",Stat,"is",ObsStats[Stat],"\n")
pval=permPval(ObsStats[Stat],PermStats[,Stat])
cat("The permutational p-value for a length effect is",pval,"\n")
Stat="LRT0.5" #LRT for equivalence, i.e., catch comparison=0.5 for all lengths
cat("The observed",Stat,"is",ObsStats[Stat],"\n")
pval=permPval(ObsStats[Stat],PermStats[,Stat])
cat("The permutational p-value for equivalence is",pval,"\n")
Stat="PropnRatio" #Proportion of large fish in gear B compared to in gear A
cat("The observed",Stat,"is",ObsStats[Stat],"\n")
pval=permPval(ObsStats[Stat],PermStats[,Stat])
cat("The permutational p-value for equal propns of large fish is",pval,"\n")
#Read in data and remove zero catch lengths
Stow.df=read.csv("../Data/LgSq.csv",header=T) #343 rows
Stow.df=subset(Stow.df,total>0) #213 rows
#Quick peek at data
head(Stow.df)
v.names=c("lgth","cover","codend")
q.fracs=c("qcover","qcodend")
Tots=Raw2Tots(Stow.df,v.names,q.fracs)
Tots=transform(Tots,n=codend+cover,y=codend/(codend+cover))
Tots
plot(y~lgth,data=Tots) #las=1 gives horizontal y tick values
Logist.fit=SELECT(Stow.df,var.names=v.names,q.names=q.fracs)
plot(Logist.fit, xlab="Carapace length (mm)")
ModelCheck(Logist.fit, xlab="Carapace length (mm)")
Estimates(Logist.fit)
Rich.fit=SELECT(Stow.df,var.names=v.names,q.names=q.fracs,stype="richards")
plot(Rich.fit, xlab="Carapace length (mm)")
ModelCheck(Rich.fit, xlab="Carapace length (mm)")
Estimates(Rich.fit)
HaulCatch=Raw2Tots(Stow.df,v.names,q.fracs,sumHauls=F)
HaulCatch=transform(HaulCatch,n=codend+cover,y=codend/(codend+cover))
require(lattice) #For xyplot
xyplot(y~lgth | Haul,data=HaulCatch)
Rich.fit2=SELECT(Stow.df,var.names=v.names,q.names=q.fracs,stype="richards",
sumHauls=F)
ModelCheck(Rich.fit2, xlab="Carapace length (mm)", minE=5, plots=F)
Estimates(Richfit,OD=10.07)
Estimates(Rich.fit,OD=10.07)
ParFunc=function(data,var.names) {
Rich.fit=SELECT(data,var.names,q.names=q.fracs,stype="richards")
Estimates(Rich.fit)[1:4,"par"]
}
#Check that it works
ParFunc(Stow.df,v.names)
ParFunc=function(data,var.names) {
Rich.fit=SELECT(data,var.names,q.names=q.fracs,stype="richards")
Estimates(Rich.fit)[1:4,"par"]
}
#Check that it works
ParFunc(Stow.df,v.names)
nsim=999 #Use at least 999 in practice
BootPars=bootSELECT(Stow.df,v.names,ParFunc,haul="Haul",paired=T,nsim=100)
ParFunc=function(data,var.names,q.names){ {
Rich.fit=SELECT(data,var.names,q.names=q.fracs,stype="richards")
Estimates(Rich.fit)[1:4,"par"]
}
#Check that it works
ParFunc(Stow.df,v.names)
ParFunc=function(data,var.names,q.names){
Rich.fit=SELECT(data,var.names,q.names=q.fracs,stype="richards")
Estimates(Rich.fit)[1:4,"par"]
}
#Check that it works
ParFunc(Stow.df,v.names)
nsim=999 #Use at least 999 in practice
BootPars=bootSELECT(Stow.df,v.names,ParFunc,haul="Haul",paired=T,nsim=100)
nsim=999 #Use at least 999 in practice
BootPars=bootSELECT(Stow.df,v.names,q.names,ParFunc,haul="Haul",paired=T,nsim=100)
rm(v.names,q.fracs)
vNames=c("lgth","cover","codend")
qNames=c("qcover","qcodend")
Tots=Raw2Tots(Stow.df,vNames,qNames)
Tots=transform(Tots,n=codend+cover,y=codend/(codend+cover))
Tots
plot(y~lgth,data=Tots) #las=1 gives horizontal y tick values
Logist.fit=SELECT(Stow.df,var.names=vNames,q.names=qNames)
plot(Logist.fit, xlab="Carapace length (mm)")
ModelCheck(Logist.fit, xlab="Carapace length (mm)")
Estimates(Logist.fit)
Rich.fit=SELECT(Stow.df,var.names=vNames,q.names=qNames,stype="richards")
plot(Rich.fit, xlab="Carapace length (mm)")
ModelCheck(Rich.fit, xlab="Carapace length (mm)")
Estimates(Rich.fit)
HaulCatch=Raw2Tots(Stow.df,vNames,qNames,sumHauls=F)
HaulCatch=transform(HaulCatch,n=codend+cover,y=codend/(codend+cover))
require(lattice) #For xyplot
xyplot(y~lgth | Haul,data=HaulCatch)
Rich.fit2=SELECT(Stow.df,var.names=vNames,q.names=qNames,stype="richards",
sumHauls=F)
ModelCheck(Rich.fit2, xlab="Carapace length (mm)", minE=5, plots=F)
Estimates(Rich.fit,OD=10.07)
ParFunc=function(data,var.names,q.names){
Rich.fit=SELECT(data,var.names,q.names,stype="richards")
Estimates(Rich.fit)[1:4,"par"]
}
#Check that it works
ParFunc(Stow.df,vNames,qNames)
Rich.fit=SELECT(Stow.df,var.names=vNames,q.names=qNames,stype="richards")
plot(Rich.fit, xlab="Carapace length (mm)")
ModelCheck(Rich.fit, xlab="Carapace length (mm)")
Estimates(Rich.fit)
ParFunc=function(data,var.names,q.names){
Rich.fit=SELECT(data,var.names,q.names,stype="richards")
Estimates(Rich.fit)[1:4,"par"]
}
#Check that it works
ParFunc(Stow.df,vNames,qNames)
var.names=vNames
rm(var.names)
ParFunc=function(data,var.names,q.names){
Rich.fit=SELECT(data,var.names,q.names,stype="richards")
Estimates(Rich.fit)[1:4,"par"]
}
#Check that it works
ParFunc(Stow.df,vNames,qNames)
head(Stow.df)
vNames
qNames
SELECT(Stow.df,vNames,qNames,stype="richards")
ParFunc=function(data,var.names,q.names){
Rich.fit=SELECT(data,var.names,q.names=q.names,stype="richards")
Estimates(Rich.fit)[1:4,"par"]
}
#Check that it works
ParFunc(Stow.df,vNames,qNames)
ParFunc=function(data,var.names,q.names){
Rich.fit=SELECT(data,var.names,q.names=q.names,stype="richards")
Estimates(Rich.fit)[1:4,"par"]
}
#Check that it works
ParFunc(Stow.df,vNames,qNames)
nsim=99 #Use at least 999 in practice
BootPars=bootSELECT(Stow.df,v.names,q.names,ParFunc,haul="Haul",paired=T,nsim=100)
nsim=99 #Use at least 999 in practice
BootPars=bootSELECT(Stow.df,vNames,qNames,ParFunc,haul="Haul",paired=T,nsim=100)
cat("Bootstrap estimated standard errors are",apply(BootPars,2,sd))
Estimates(Rich.fit,OD=10.07)[1:4,]
Estimates
ModelCheck
Rich.fit2=SELECT(Stow.df,var.names=vNames,q.names=qNames,stype="richards",
sumHauls=F)
ModelCheck(Rich.fit2, xlab="Carapace length (mm)", minE=1, plots=F)
Rich.fit2=SELECT(Stow.df,var.names=vNames,q.names=qNames,stype="richards",
sumHauls=F)
ModelCheck(Rich.fit2, xlab="Carapace length (mm)", minE=5, plots=F)
Rich.fit2=SELECT(Stow.df,var.names=vNames,q.names=qNames,stype="richards",
sumHauls=F)
ModelCheck(Rich.fit2, xlab="Carapace length (mm)", minE=5, plots=F)
Logist.fit=SELECT(Stow.df,var.names=vNames,q.names=qNames)
plot(Logist.fit, xlab="Carapace length (mm)")
ModelCheck(Logist.fit, xlab="Carapace length (mm)")
Estimates(Logist.fit)
Rich.fit=SELECT(Stow.df,var.names=vNames,q.names=qNames,stype="richards")
plot(Rich.fit, xlab="Carapace length (mm)")
ModelCheck(Rich.fit, xlab="Carapace length (mm)")
Estimates(Rich.fit)
ParFunc=function(data,var.names,q.names){
Rich.fit=SELECT(data,var.names,q.names=q.names,stype="richards")
Estimates(Rich.fit)[1:4,"par"]
}
#Check that it works
ParFunc(Stow.df,vNames,qNames)
require(mgcv)
Spline.fit=SplineSELECT(Stow.df,var.names=vNames,q.names=qNames)
plot(Tots$lgth,resid(Spline.fit),type="h")
abline(h=0)
plot(y~lgth,data=Tots,xlab="Carapace length (mm)")
points(Tots$lgth,fitted(Spline.fit),type="l")
AIC(Spline.fit)
require(mgcv)
Spline.fit=SplineSELECT(Stow.df,var.names=vNames,q.names=qNames)
plot(Tots$lgth,resid(Spline.fit),type="h")
abline(h=0)
plot(y~lgth,data=Tots,xlab="Carapace length (mm)")
points(Tots$lgth,fitted(Spline.fit),type="l")
AIC(Spline.fit)
require(mgcv)
Spline.fit=SplineSELECT(Stow.df,var.names=v.names,q.names=q.names,quasi=F)
require(mgcv)
Spline.fit=SplineSELECT(Stow.df,var.names=v.names,q.names=q.names,quasi=F)
knitr::opts_chunk$set(fig.height = 3.5)
knitr::include_graphics("Stownet.jpg")
#devtools::install_github("rbmillar/SELECT")
require(SELECT)
require(dplyr)
#Read in data and remove zero catch lengths
Stow.df=read.csv("../Data/LgSq.csv",header=T) #343 rows
Stow.df=subset(Stow.df,total>0) #213 rows
#Quick peek at data
head(Stow.df)
v.names=c("lgth","cover","codend")
q.names=c("qcover","qcodend")
Tots=Raw2Tots(Stow.df,v.names,q.names)
Tots=transform(Tots,n=codend+cover,y=codend/(codend+cover))
Tots
plot(y~lgth,data=Tots) #las=1 gives horizontal y tick values
Logist.fit=SELECT(Stow.df,var.names=v.names,q.names=q.names)
plot(Logist.fit, xlab="Carapace length (mm)")
ModelCheck(Logist.fit, xlab="Carapace length (mm)")
Estimates(Logist.fit)
Rich.fit=SELECT(Stow.df,var.names=v.names,q.names=q.names,stype="richards")
plot(Rich.fit, xlab="Carapace length (mm)")
ModelCheck(Rich.fit, xlab="Carapace length (mm)")
Estimates(Rich.fit)
HaulCatch=Raw2Tots(Stow.df,v.names,q.names,sumHauls=F)
HaulCatch=transform(HaulCatch,n=codend+cover,y=codend/(codend+cover))
require(lattice) #For xyplot
xyplot(y~lgth | Haul,data=HaulCatch)
Rich.fit2=SELECT(Stow.df,var.names=v.names,q.names=q.names,stype="richards",
sumHauls=F)
ModelCheck(Rich.fit2, xlab="Carapace length (mm)", minE=5, plots=F)
ParFunc=function(data,var.names,q.names){
Rich.fit=SELECT(data,var.names,q.names=q.names,stype="richards")
Estimates(Rich.fit)[1:4,"par"]
}
#Check that it works
ParFunc(Stow.df,v.names,q.names)
nsim=99 #Use at least 999 in practice
BootPars=bootSELECT(Stow.df,v.names,q.names,ParFunc,haul="Haul",paired=T,
nsim=nsim,verbose=F) #Use verbose=T to see progress
cat("Bootstrap estimated standard errors are",apply(BootPars,2,sd))
require(mgcv)
Spline.fit=SplineSELECT(Stow.df,var.names=v.names,q.names=q.names,quasi=F)
plot(Tots$lgth,resid(Spline.fit),type="h")
abline(h=0)
plot(y~lgth,data=Tots,xlab="Carapace length (mm)")
points(Tots$lgth,fitted(Spline.fit),type="l")
AIC(Spline.fit)
require(mgcv)
Spline.fit=SplineSELECT(Stow.df,var.names=v.names,q.names=q.names,
k=5,quasi=F)
plot(Tots$lgth,resid(Spline.fit),type="h")
abline(h=0)
plot(y~lgth,data=Tots,xlab="Carapace length (mm)")
points(Tots$lgth,fitted(Spline.fit),type="l")
AIC(Spline.fit)
require(mgcv)
Spline.fit=SplineSELECT(Stow.df,var.names=v.names,q.names=q.names,
k=3,quasi=F)
plot(Tots$lgth,resid(Spline.fit),type="h")
abline(h=0)
plot(y~lgth,data=Tots,xlab="Carapace length (mm)")
points(Tots$lgth,fitted(Spline.fit),type="l")
AIC(Spline.fit)
require(mgcv)
Spline.fit=SplineSELECT(Stow.df,var.names=v.names,q.names=q.names,
k=4,quasi=F)
plot(Tots$lgth,resid(Spline.fit),type="h")
abline(h=0)
plot(y~lgth,data=Tots,xlab="Carapace length (mm)")
points(Tots$lgth,fitted(Spline.fit),type="l")
AIC(Spline.fit)
require(mgcv)
Spline.fit=SplineSELECT(Stow.df,var.names=v.names,q.names=q.names,
k=5,quasi=F)
plot(Tots$lgth,resid(Spline.fit),type="h")
abline(h=0)
plot(y~lgth,data=Tots,xlab="Carapace length (mm)")
points(Tots$lgth,fitted(Spline.fit),type="l")
AIC(Spline.fit)
require(mgcv)
Spline.fit=SplineSELECT(Stow.df,var.names=v.names,q.names=q.names,
k=6,quasi=F)
plot(Tots$lgth,resid(Spline.fit),type="h")
abline(h=0)
plot(y~lgth,data=Tots,xlab="Carapace length (mm)")
points(Tots$lgth,fitted(Spline.fit),type="l")
AIC(Spline.fit)
require(mgcv)
Spline.fit=SplineSELECT(Stow.df,var.names=v.names,q.names=q.names,
k=5,quasi=F)
plot(Tots$lgth,resid(Spline.fit),type="h")
abline(h=0)
plot(y~lgth,data=Tots,xlab="Carapace length (mm)")
points(Tots$lgth,fitted(Spline.fit),type="l")
AIC(Spline.fit)
SELECT::PlotCurves()
SELECT::PlotCurves
knitr::opts_chunk$set(fig.height = 3.5)
#devtools::install_github("rbmillar/SELECT")
require(SELECT)
require(tidyverse)
data(Pope)
Pope
v.names=c("Lengths","nfine","nwide")
Pope=transform(Pope,n=nfine+nwide,y=nwide/(nfine+nwide))
plot(y~Lengths,data=Pope)
abline(h=0.5,lty=3)
Logist.fit=SELECT(Pope,var.names=v.names,dtype="ph")
plot(Logist.fit)
ModelCheck(Logist.fit)
Estimates(Logist.fit)
Rich.fit=SELECT(Pope,var.names=v.names,dtype="ph",stype="richards")
plot(Rich.fit)
ModelCheck(Rich.fit)
Estimates(Rich.fit)
#50/50 split
EqualPower.fit=SELECT(Pope,var.names=v.names,dtype="dc",Meshsize=c(35,87))
plot(EqualPower.fit)
ModelCheck(EqualPower.fit)
Estimates(EqualPower.fit)
#40/60 split
UnEqualPower.fit=SELECT(Pope,var.names=v.names,dtype="dc",
Meshsize=c(35,87), rel.power=c(0.4,0.6))
plot(UnEqualPower.fit)
ModelCheck(UnEqualPower.fit)
Estimates(UnEqualPower.fit)
plot(UnEqualPower.fit)
plot(UnEqualPower.fit,plotlens=20:30)
plot(UnEqualPower.fit,plotlens=20:30)
#50/50 split
EqualPower.fit=SELECT(Pope,var.names=v.names,dtype="dc",Meshsize=c(3.5,8.7))
plot(EqualPower.fit)
ModelCheck(EqualPower.fit)
Estimates(EqualPower.fit)
#40/60 split
UnEqualPower.fit=SELECT(Pope,var.names=v.names,dtype="dc",
Meshsize=c(3.5,8.7), rel.power=c(0.4,0.6))
plot(UnEqualPower.fit)
ModelCheck(UnEqualPower.fit)
Estimates(UnEqualPower.fit)
#50/50 split
EqualPower.fit=SELECT(Pope,var.names=v.names,dtype="dc",Meshsize=c(3.5,8.7))
plot(EqualPower.fit)
ModelCheck(EqualPower.fit)
Estimates(EqualPower.fit)
#40/60 split
UnEqualPower.fit=SELECT(Pope,var.names=v.names,dtype="dc",
Meshsize=c(3.5,8.7), rel.power=c(0.4,0.6))
plot(UnEqualPower.fit)
ModelCheck(UnEqualPower.fit)
Estimates(UnEqualPower.fit)
#50/50 split
EqualPower.fit=SELECT(Pope,var.names=v.names,dtype="dc",
Meshsize=c(3.5,8.7),rel.power=c(0.5,0.5))
plot(EqualPower.fit)
ModelCheck(EqualPower.fit)
Estimates(EqualPower.fit)
#40/60 split
UnEqualPower.fit=SELECT(Pope,var.names=v.names,dtype="dc",
Meshsize=c(3.5,8.7), rel.power=c(0.4,0.6))
plot(UnEqualPower.fit)
ModelCheck(UnEqualPower.fit)
Estimates(UnEqualPower.fit)
#50/50 split
EqualPower.fit=SELECT(Pope,var.names=v.names,dtype="dc",
Meshsize=c(3.5,8.7),rel.power=c(0.55,0.45))
plot(EqualPower.fit)
ModelCheck(EqualPower.fit)
Estimates(EqualPower.fit)
#50/50 split
EqualPower.fit=SELECT(Pope,var.names=v.names,dtype="dc",
Meshsize=c(3.5,8.7),rel.power=c(5,5))
plot(EqualPower.fit)
ModelCheck(EqualPower.fit)
Estimates(EqualPower.fit)
#50/50 split
EqualPower.fit=SELECT(Pope,var.names=v.names,dtype="dc",
Meshsize=c(3.5,8.7),rel.power=c(0.51,49))
plot(EqualPower.fit)
ModelCheck(EqualPower.fit)
Estimates(EqualPower.fit)
#50/50 split
EqualPower.fit=SELECT(Pope,var.names=v.names,dtype="dc",
Meshsize=c(3.5,8.7),rel.power=c(0.5,4))
plot(EqualPower.fit)
ModelCheck(EqualPower.fit)
Estimates(EqualPower.fit)
#50/50 split
EqualPower.fit=SELECT(Pope,var.names=v.names,dtype="dc",
Meshsize=c(3.5,8.7),rel.power=c(0.5,0.5))
plot(EqualPower.fit)
ModelCheck(EqualPower.fit)
Estimates(EqualPower.fit)
#50/50 split
EqualPower.fit=SELECT(Pope,var.names=v.names,dtype="dc",
Meshsize=c(3.5,8.7),rel.power=c(0.5,0.51))
plot(EqualPower.fit)
ModelCheck(EqualPower.fit)
Estimates(EqualPower.fit)
#50/50 split
EqualPower.fit=SELECT(Pope,var.names=v.names,dtype="dc",
Meshsize=c(3.5,8.7),rel.power=c(0.5,0.5))
plot(EqualPower.fit)
ModelCheck(EqualPower.fit)
Estimates(EqualPower.fit)

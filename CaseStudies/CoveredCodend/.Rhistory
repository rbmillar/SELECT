ModelCheck(Logist.fit, xlab="Carapace length (mm)")
source("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R/FIT_FUNCTIONS.R")
#Debugging
data=Stow.df; var.names=v.names; dtype="cc"; stype="logistic"; useTots=TRUE;
q.names=q.fracs; Meshsize=NULL; x0=NULL; rel.power=NULL; penalty.func=NULL;
verbose=FALSE; control=list(maxit=10000,reltol=1e-8); Fit=TRUE
Logist.fit=SELECT(Stow.df,var.names=v.names,q.names=q.fracs,useTots=F)
plot(Logist.fit, xlab="Carapace length (mm)")
ModelCheck(Logist.fit, xlab="Carapace length (mm)")
source("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R/FIT_FUNCTIONS.R")
#Debugging
data=Stow.df; var.names=v.names; dtype="cc"; stype="logistic"; useTots=TRUE;
q.names=q.fracs; Meshsize=NULL; x0=NULL; rel.power=NULL; penalty.func=NULL;
verbose=FALSE; control=list(maxit=10000,reltol=1e-8); Fit=TRUE
Logist.fit=SELECT(Stow.df,var.names=v.names,q.names=q.fracs,useTots=F)
plot(Logist.fit, xlab="Carapace length (mm)")
ModelCheck(Logist.fit, xlab="Carapace length (mm)")
source("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R/FIT_FUNCTIONS.R")
#Debugging
data=Stow.df; var.names=v.names; dtype="cc"; stype="logistic"; useTots=TRUE;
q.names=q.fracs; Meshsize=NULL; x0=NULL; rel.power=NULL; penalty.func=NULL;
verbose=FALSE; control=list(maxit=10000,reltol=1e-8); Fit=TRUE
Logist.fit=SELECT(Stow.df,var.names=v.names,q.names=q.fracs,useTots=F)
plot(Logist.fit, xlab="Carapace length (mm)")
ModelCheck(Logist.fit, xlab="Carapace length (mm)")
source("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R/FIT_FUNCTIONS.R")
#Debugging
data=Stow.df; var.names=v.names; dtype="cc"; stype="logistic"; useTots=TRUE;
q.names=q.fracs; Meshsize=NULL; x0=NULL; rel.power=NULL; penalty.func=NULL;
verbose=FALSE; control=list(maxit=10000,reltol=1e-8); Fit=TRUE
Logist.fit=SELECT(Stow.df,var.names=v.names,q.names=q.fracs,useTots=F)
ll.init
Const
View(Data)
View(data)
plot(Logist.fit, xlab="Carapace length (mm)")
ModelCheck(Logist.fit, xlab="Carapace length (mm)")
#Debugging
data=Stow.df; var.names=v.names; dtype="cc"; stype="logistic"; useTots=F;
q.names=q.fracs; Meshsize=NULL; x0=NULL; rel.power=NULL; penalty.func=NULL;
verbose=FALSE; control=list(maxit=10000,reltol=1e-8); Fit=TRUE
Logist.fit=SELECT(Stow.df,var.names=v.names,q.names=q.fracs,useTots=F)
View(Data)
plot(Logist.fit, xlab="Carapace length (mm)")
ModelCheck(Logist.fit, xlab="Carapace length (mm)")
#Debugging
data=Stow.df; var.names=v.names; dtype="cc"; stype="logistic"; useTots=TRUE;
q.names=q.fracs; Meshsize=NULL; x0=NULL; rel.power=NULL; penalty.func=NULL;
verbose=FALSE; control=list(maxit=10000,reltol=1e-8); Fit=TRUE
Logist.fit=SELECT(Stow.df,var.names=v.names,q.names=q.fracs,useTots=T)
plot(Logist.fit, xlab="Carapace length (mm)")
ModelCheck(Logist.fit, xlab="Carapace length (mm)")
Raw2Tots(Stow.df,v.names,q.fracs)
Raw2Tots(Stow.df,v.names,q.fracs,useTots=F)
head( Raw2Tots(Stow.df,v.names,q.fracs,useTots=F) )
head(Stow.df)
v.names
source("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R/FIT_FUNCTIONS.R")
source("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R/FIT_FUNCTIONS.R")
source("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R/FIT_FUNCTIONS.R")
#Debugging
#data=Stow.df; var.names=v.names; dtype="cc"; stype="logistic"; useTots=TRUE;
#q.names=q.fracs; Meshsize=NULL; x0=NULL; rel.power=NULL; penalty.func=NULL;
#verbose=FALSE; control=list(maxit=10000,reltol=1e-8); Fit=TRUE
Logist.fit=SELECT(Stow.df,var.names=v.names,q.names=q.fracs,useTots=T)
plot(Logist.fit, xlab="Carapace length (mm)")
ModelCheck(Logist.fit, xlab="Carapace length (mm)")
Estimates(Logist.fit)
#Debugging
#data=Stow.df; var.names=v.names; dtype="cc"; stype="logistic"; useTots=TRUE;
#q.names=q.fracs; Meshsize=NULL; x0=NULL; rel.power=NULL; penalty.func=NULL;
#verbose=FALSE; control=list(maxit=10000,reltol=1e-8); Fit=TRUE
Logist.fit=SELECT(Stow.df,var.names=v.names,q.names=q.fracs,useTots=F)
plot(Logist.fit, xlab="Carapace length (mm)")
ModelCheck(Logist.fit, xlab="Carapace length (mm)")
Estimates(Logist.fit)
?ModelCheck
Rich.fit=SELECT(Stow.df,var.names=v.names,q.names=q.fracs,stype="richards",
useTots=F)
plot(Rich.fit, xlab="Carapace length (mm)")
ModelCheck(Rich.fit, xlab="Carapace length (mm)")
Estimates(Rich.fit)
xyplot
HaulCatch=Raw2Tots(Stow.df,v.names,q.fracs,useTots=F)
HaulCatch=transform(HaulCatch,n=codend+cover,y=codend/(codend+cover))
require(lattice) #For xyplot
xyplot(y~lgth | Haul,data=Tots)
xyplot(y~lgth | Haul,data=Tots, h=0.5)
HaulCatch=Raw2Tots(Stow.df,v.names,q.fracs,useTots=F)
HaulCatch=transform(HaulCatch,n=codend+cover,y=codend/(codend+cover))
require(lattice) #For xyplot
xyplot(y~lgth | Haul,data=Tots,
panel=function(panel.abline(h=c(0.25,0.5,0.75),lty=3)))
HaulCatch=Raw2Tots(Stow.df,v.names,q.fracs,useTots=F)
HaulCatch=transform(HaulCatch,n=codend+cover,y=codend/(codend+cover))
require(lattice) #For xyplot
xyplot(y~lgth | Haul,data=Tots,
panel=function() panel.abline(h=c(0.25,0.5,0.75),lty=3))
HaulCatch=Raw2Tots(Stow.df,v.names,q.fracs,useTots=F)
HaulCatch=transform(HaulCatch,n=codend+cover,y=codend/(codend+cover))
require(lattice) #For xyplot
xyplot(y~lgth | Haul,data=Tots)
HaulCatch=Raw2Tots(Stow.df,v.names,q.fracs,useTots=F)
HaulCatch=transform(HaulCatch,n=codend+cover,y=codend/(codend+cover))
require(lattice) #For xyplot
xyplot(y~lgth | Haul,data=Tots)
summary(StowDf)
summary(Stow.df)
#Debugging
#data=Stow.df; var.names=v.names; dtype="cc"; stype="logistic"; useTots=TRUE;
#q.names=q.fracs; Meshsize=NULL; x0=NULL; rel.power=NULL; penalty.func=NULL;
#verbose=FALSE; control=list(maxit=10000,reltol=1e-8); Fit=TRUE
Logist.fit=SELECT(Stow.df,var.names=v.names,q.names=q.fracs,useTots=F)
plot(Logist.fit, xlab="Carapace length (mm)")
ModelCheck(Logist.fit, xlab="Carapace length (mm)")
Estimates(Logist.fit)
devtools::install( paste0("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/",PkgName) )
devtools::install( paste0("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT3") )
devtools::install( paste0("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT") )
require(SELECT)
knitr::opts_chunk$set(fig.height = 3.5)
knitr::include_graphics("Stownet.jpg")
devtools::install( paste0("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT") )
require(SELECT)
require(dplyr)
#Read in data and remove zero catch lengths
Stow.df=read.csv("../Data/LgSq.csv",header=T) #343 rows
Stow.df=subset(Stow.df,total>0) #213 rows
#Quick peek at data
head(Stow.df)
v.names=c("lgth","cover","codend")
q.fracs=c("qcover","qcodend")
Tots=Raw2Tots(Stow.df,v.names,q.fracs,useTots=F)
Tots=transform(Tots,n=codend+cover,y=codend/(codend+cover))
Tots
plot(y~lgth,data=Tots) #las=1 gives horizontal y tick values
Tots=Raw2Tots(Stow.df,v.names,q.fracs)
Tots=transform(Tots,n=codend+cover,y=codend/(codend+cover))
Tots
plot(y~lgth,data=Tots) #las=1 gives horizontal y tick values
Tots=Raw2Tots(Stow.df,v.names,q.fracs)
Tots=transform(Tots,n=codend+cover,y=codend/(codend+cover))
Tots
plot(y~lgth,data=Tots) #las=1 gives horizontal y tick values
sum
combine
Rich.fit=SELECT(Stow.df,var.names=v.names,q.names=q.fracs,stype="richards",
useTots=F)
plot(Rich.fit, xlab="Carapace length (mm)")
ModelCheck(Rich.fit, xlab="Carapace length (mm)")
Estimates(Rich.fit)
ParFunc=function(data,var.names) {
Rich.fit=SELECT(data,var.names,q.names=q.fracs,stype="richards")
Estimates(Rich.fit)[1:4,"par"]
}
#Check that it works
ParFunc(Stow.df,v.names,Stow.df)
ParFunc=function(data,var.names) {
Rich.fit=SELECT(data,var.names,q.names=q.fracs,stype="richards")
Estimates(Rich.fit)[1:4,"par"]
}
#Check that it works
ParFunc(Stow.df,v.names)
BootPars=bootSELECT(Stow.df,v.names,ParFunc,haul="Haul",paired=T,nsim=400)
apply(BootPars,2,sd)
source("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R/FIT_FUNCTIONS.R")
Estimates(Rich.fit)
Estimates(Logist.fit)
Logist.fit=SELECT(Stow.df,var.names=v.names,q.names=q.fracs)
knitr::opts_chunk$set(fig.height = 3.5)
knitr::include_graphics("Stownet.jpg")
devtools::install( paste0("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT") )
require(SELECT)
require(dplyr)
#Read in data and remove zero catch lengths
Stow.df=read.csv("../Data/LgSq.csv",header=T) #343 rows
Stow.df=subset(Stow.df,total>0) #213 rows
#Quick peek at data
head(Stow.df)
v.names=c("lgth","cover","codend")
q.fracs=c("qcover","qcodend")
Tots=Raw2Tots(Stow.df,v.names,q.fracs)
Tots=transform(Tots,n=codend+cover,y=codend/(codend+cover))
Tots
plot(y~lgth,data=Tots) #las=1 gives horizontal y tick values
Logist.fit=SELECT(Stow.df,var.names=v.names,q.names=q.fracs)
plot(Logist.fit, xlab="Carapace length (mm)")
ModelCheck(Logist.fit, xlab="Carapace length (mm)")
Estimates(Logist.fit)
Rich.fit=SELECT(Stow.df,var.names=v.names,q.names=q.fracs,stype="richards",
useTots=F)
Rich.fit=SELECT(Stow.df,var.names=v.names,q.names=q.fracs,stype="richards")
plot(Rich.fit, xlab="Carapace length (mm)")
ModelCheck(Rich.fit, xlab="Carapace length (mm)")
Estimates(Rich.fit)
Rich.fit=SELECT(Stow.df,var.names=v.names,q.names=q.fracs,stype="richards",
sumHauls=F)
plot(Rich.fit, xlab="Carapace length (mm)")
ModelCheck(Rich.fit, xlab="Carapace length (mm)")
Estimates(Rich.fit)
Rich.fit=SELECT(Stow.df,var.names=v.names,q.names=q.fracs,stype="richards",
sumHauls=F)
plot(Rich.fit, xlab="Carapace length (mm)")
ModelCheck(Rich.fit, xlab="Carapace length (mm)", minE=1)
Estimates(Rich.fit)
Rich.fit=SELECT(Stow.df,var.names=v.names,q.names=q.fracs,stype="richards",
sumHauls=F)
plot(Rich.fit, xlab="Carapace length (mm)")
ModelCheck(Rich.fit, xlab="Carapace length (mm)", minE=3)
Estimates(Rich.fit)
source("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R/HELPER_FUNCTIONS.R")
Estimates(Rich.fit)
Rich.fit=SELECT(Stow.df,var.names=v.names,q.names=q.fracs,stype="richards",
sumHauls=F)
plot(Rich.fit, xlab="Carapace length (mm)")
ModelCheck(Rich.fit, xlab="Carapace length (mm)", minE=5)
Estimates(Rich.fit)
Rich.fit=SELECT(Stow.df,var.names=v.names,q.names=q.fracs,stype="richards",
sumHauls=F)
ModelCheck(Rich.fit, xlab="Carapace length (mm)", minE=5)
nsim=400 #Using nsim=400 for demonstration. Set to at least 1000 in practice
BootPars=bootSELECT(Stow.df,v.names,ParFunc,haul="Haul",paired=T,nsim=100)
ParFunc=function(data,var.names) {
Rich.fit=SELECT(data,var.names,q.names=q.fracs,stype="richards")
Estimates(Rich.fit)[1:4,"par"]
}
#Check that it works
ParFunc(Stow.df,v.names)
nsim=400 #Using nsim=400 for demonstration. Set to at least 1000 in practice
BootPars=bootSELECT(Stow.df,v.names,ParFunc,haul="Haul",paired=T,nsim=100)
apply(BootPars,2,sd)
cat("Bootstrap estimated standard errors are")
apply(BootPars,2,sd)
cat("Bootstrap estimated standard errors are",apply(BootPars,2,sd))
head(BootPars)
Estimates(Rich.fit)[1:4,"par"]
ParFunc(Stow.df,v.names)
source("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R/FIT_FUNCTIONS.R")
source("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R/FIT_FUNCTIONS.R")
?ModelCheck
sqKP.df=read.csv("../Data/SqNorKP.csv",header=T) #500 by 4
dim(sqKP.df)
#Read in data and remove zero catch lengths
sqKP.df=read.csv("../Data/SqNorKP.csv",header=T) #500 by 4
sqKP.df=subset(sqKP.df,control+codend>0)
#Quick peek at data
head(sqKP.df)
dim(sqKP.df)
Tots=Raw2Tots(sqKP.df,v.names)
knitr::opts_chunk$set(fig.height = 3.5)
knitr::include_graphics("TwinTrawl.jpg")
devtools::install( paste0("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT") )
require(SELECT)
require(dplyr)
#Read in data and remove zero catch lengths
sqKP.df=read.csv("../Data/SqNorKP.csv",header=T) #500 by 4
sqKP.df=subset(sqKP.df,control+codend>0) #192 by 4
#Quick peek at data
head(sqKP.df)
v.names=c("lgth","control","codend")
Tots=Raw2Tots(sqKP.df,v.names)
Tots=transform(Tots,n=codend+control,y=codend/(codend+control))
Tots
plot(y~lgth,data=Tots,las=1)
abline(h=c(1/3,0.5),lty=3)
Tots=Raw2Tots(sqKP.df,v.names)
Tots=transform(Tots,n=codend+control,y=codend/(codend+control))
Tots
plot(y~lgth,data=Tots,las=1)
abline(h=0.5,lty=3)
Logist.fit=SELECT(Tots,var.names=v.names,dtype="ph")
plot(Logist.fit)
ModelCheck(Logist.fit)
summary(Logist.fit)
Rich.fit=SELECT(Tots,var.names=v.names,dtype="ph",stype="richards")
plot(Rich.fit)
ModelCheck(Rich.fit)
summary(Rich.fit)
HaulCatch=Raw2Tots(sqKP.df,v.names,sumHauls=F)
HaulCatch=transform(HaulCatch,n=codend+cover,y=codend/(codend+cover))
head(HaulCatch)
HaulCatch=Raw2Tots(sqKP.df,v.names,sumHauls=F)
HaulCatch=transform(HaulCatch,n=codend+control,y=codend/(codend+cover))
HaulCatch=Raw2Tots(sqKP.df,v.names,sumHauls=F)
HaulCatch=transform(HaulCatch,n=codend+control,y=codend/(codend+control))
require(lattice) #For xyplot
xyplot(y~lgth | Haul,data=HaulCatch)
HaulCatch=Raw2Tots(sqKP.df,v.names,sumHauls=F)
HaulCatch=transform(HaulCatch,n=codend+control,y=codend/(codend+control))
require(lattice) #For xyplot
xyplot(y~lgth | PairID,data=HaulCatch)
Logist.fit=SELECT(Tots,var.names=v.names,dtype="ph")
plot(Logist.fit)
ModelCheck(Logist.fit)
summary(Logist.fit)
Logist.fit=SELECT(Tots,var.names=v.names,dtype="ph")
plot(Logist.fit)
ModelCheck(Logist.fit)
Estimates(Logist.fit)
Logist.fit=SELECT(Tots,var.names=v.names,dtype="ph")
ModelCheck(Logist.fit, minE=5, plots=F)
Logist.fit=SELECT(Tots,var.names=v.names,dtype="ph")
ModelCheck(Logist.fit, minE=3, plots=F)
Logist.fit=SELECT(Tots,var.names=v.names,dtype="ph",sumHauls=F)
ModelCheck(Logist.fit, minE=3, plots=F)
Logist.fit=SELECT(sqKP.df,var.names=v.names,dtype="ph",sumHauls=F)
ModelCheck(Logist.fit, minE=3, plots=F)
View(sqKP.df)
Logist.fit=SELECT(sqKP.df,var.names=v.names,dtype="ph",sumHauls=F)
ModelCheck(Logist.fit, minE=5, plots=F)
Logist.fit2=SELECT(sqKP.df,var.names=v.names,dtype="ph",sumHauls=F)
ModelCheck(Logist.fit2, minE=5, plots=F)
Logist.fit=SELECT(Tots,var.names=v.names,dtype="ph")
plot(Logist.fit)
ModelCheck(Logist.fit)
Estimates(Logist.fit)
Estimates(Logist.fit)
Estimates(Logist.fit2)
source("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R/HELPER_FUNCTIONS.R")
is.null
OD=5.4
is.numeric(OD)
OD=T
is.numeric(OD)
is.numeric(NULL)
a=1:2
names(a)=c("a","b")
a
pars=c(1.4,0.5)
std.errors=c(0.4,0.1)
cbind(par,std.errors)
cbind(pars,std.errors)
cbind(par=pars,std.errors)
cbind(par=pars,raw s.e.=std.errors)
cbind(par=pars,raw_s.e.=std.errors)
OD=NULL
estimates=cbind(pars,std.errors)
colnames(estimates)=c("par","raw s.e.")
if(!is.null(OD)) {
estimates=cbind(estimates,sqrt(OD)*std.errors)
colnames(estimates)=c(colnames(estimates),"adj s.e.") }
rownames(estimates)=names
estimates=cbind(pars,std.errors)
colnames(estimates)=c("par","raw s.e.")
if(!is.null(OD)) {
estimates=cbind(estimates,sqrt(OD)*std.errors)
colnames(estimates)=c(colnames(estimates),"adj s.e.") }
estimates
OD=4
estimates=cbind(pars,std.errors)
colnames(estimates)=c("par","raw s.e.")
if(!is.null(OD)) {
estimates=cbind(estimates,sqrt(OD)*std.errors)
colnames(estimates)=c(colnames(estimates),"adj s.e.") }
estimates=cbind(pars,std.errors)
colnames(estimates)=c("par","raw s.e.")
if(!is.null(OD)) {
estimates=cbind(estimates,sqrt(OD)*std.errors)
colnames(estimates)=c(colnames(estimates),"adj s.e.") }
estimates
estimates=cbind(pars,std.errors)
colnames(estimates)=c("par","raw s.e.")
estimates=cbind(estimates,sqrt(OD)*std.errors)
estimates
colnames(estimates)=c(colnames(estimates),"adj s.e.")
colnames(estimates)
estimates=cbind(pars,std.errors)
colnames(estimates)=c("par","raw s.e.")
estimates=cbind(estimates,sqrt(OD)*std.errors)
dim(estimates)
colnames(estimates)
estimates=cbind(pars,std.errors)
colnames(estimates)=c("par","raw s.e.")
if(!is.null(OD)) {
estimates=cbind(estimates,sqrt(OD)*std.errors)
colnames(estimates)[3]="adj s.e." }
estimates
source("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R/HELPER_FUNCTIONS.R")
Estimates(Logist.fit,OD=2.08)
Pope
data(Pope)
Pope
?Pope
require(SELECT)
require(dplyr)
data(Pope)
Pope
v.names=c("Lengths","nfine","nwide")
Pope=transform(Pope,n=nfine+nwide,y=nwide/(nfine+nwide))
Pope
plot(y~Lengths,data=Pope)
abline(h=0.5,lty=3)
Logist.fit=SELECT(Pope,var.names=v.names,dtype="ph")
plot(Logist.fit)
ModelCheck(Logist.fit)
Estimates(Logist.fit)
Rich.fit=SELECT(Pope,var.names=v.names,,dtype="ph",stype="richards")
plot(Rich.fit)
ModelCheck(Rich.fit)
Estimates(Rich.fit)
Rich.fit=SELECT(Pope,var.names=v.names,dtype="ph",stype="richards")
plot(Rich.fit)
ModelCheck(Rich.fit)
Estimates(Rich.fit)
summary(Rich.fit)
Logist.fit=SELECT(Tots,var.names=v.names,dtype="ph")
v.names=c("lgth","control","codend")
Logist.fit=SELECT(Tots,var.names=v.names,dtype="ph")
plot(Logist.fit)
ModelCheck(Logist.fit)
Estimates(Logist.fit)
Rich.fit=SELECT(Tots,var.names=v.names,dtype="ph",stype="richards")
plot(Rich.fit)
Logist.fit=SELECT(Tots,var.names=v.names,dtype="ph")
plot(Logist.fit)
ModelCheck(Logist.fit)
Estimates(Logist.fit)
Rich.fit=SELECT(Tots,var.names=v.names,dtype="ph",stype="richards")
plot(Rich.fit)
ModelCheck(Rich.fit)
Estimates(Rich.fit)
Logist.fit=SELECT(Pope,var.names=v.names,dtype="ph")
v.names=c("Lengths","nfine","nwide")
Logist.fit=SELECT(Pope,var.names=v.names,dtype="ph")
plot(Logist.fit)
ModelCheck(Logist.fit)
Estimates(Logist.fit)
Rich.fit=SELECT(Pope,var.names=v.names,dtype="ph",stype="richards")
plot(Rich.fit)
ModelCheck(Rich.fit)
Estimates(Rich.fit)
SELECT
Pope
EqualPower.fit=SELECT(Pope,var.names=v.names,dtype="re",Meshsize=c(0,1))
EqualPower.fit=SELECT(Pope,var.names=v.names,dtype="re",
Meshsize=c(0,1),x0=c(-10,0.3))
plot(EqualPower.fit)
ModelCheck(EqualPower.fit)
Estimates(EqualPower.fit)
EqualPower.fit=SELECT(Pope,var.names=v.names,dtype="re",
Meshsize=c(0,1),x0=c(-10,0.5))
plot(EqualPower.fit)
ModelCheck(EqualPower.fit)
Estimates(EqualPower.fit)
EqualPower.fit=SELECT(Pope,var.names=v.names,dtype="re",
Meshsize=c(0,1),x0=c(-30,1))
plot(EqualPower.fit)
ModelCheck(EqualPower.fit)
Estimates(EqualPower.fit)
EqualPower.fit=SELECT(Pope,var.names=v.names,dtype="re",
Meshsize=c(35,87),x0=c(-30,1))
plot(EqualPower.fit)
ModelCheck(EqualPower.fit)
Estimates(EqualPower.fit)
EqualPower.fit=SELECT(Pope,var.names=v.names,dtype="re",
Meshsize=c(35,87))
Logist.fit
Logist.fit[]
Logist.fit$par
#Get reasonable start values
Logist.fit$par
EqualPower.fit=SELECT(Pope,var.names=v.names,dtype="re",
Meshsize=c(35,87), x0=c(-27.6,0.92))
plot(EqualPower.fit)
ModelCheck(EqualPower.fit)
Estimates(EqualPower.fit)
#Get reasonable start values
Logist.fit$par
EqualPower.fit=SELECT(Pope,var.names=v.names,dtype="re",
Meshsize=c(35,87), x0=c(-30,1))
plot(EqualPower.fit)
ModelCheck(EqualPower.fit)
Estimates(EqualPower.fit)
#Get reasonable start values, x0
Logist.fit$par
EqualPower.fit=SELECT(Pope,var.names=v.names,dtype="re",
Meshsize=c(35,87), x0=c(-27.6,0.92))
plot(EqualPower.fit)
ModelCheck(EqualPower.fit)
Estimates(EqualPower.fit)
install.packages("xfun")
install.packages(c("AICcmodavg", "bayestestR", "collapse", "commonmark", "datawizard", "diffobj", "directlabels", "doBy", "effectsize"))
install.packages(c("fs", "mime", "purrr", "rlang"))
knitr::opts_chunk$set(fig.height = 3.5)
knitr::include_graphics("Stownet.jpg")
devtools::install( paste0("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT") )
devtools::install( paste0("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT") )
require(SELECT)
require(dplyr)
#Read in data and remove zero catch lengths
Stow.df=read.csv("../Data/LgSq.csv",header=T) #343 rows
Stow.df=subset(Stow.df,total>0) #213 rows
#Quick peek at data
head(Stow.df)
v.names=c("lgth","cover","codend")
q.fracs=c("qcover","qcodend")
Tots=Raw2Tots(Stow.df,v.names,q.fracs)
Tots=transform(Tots,n=codend+cover,y=codend/(codend+cover))
Tots
plot(y~lgth,data=Tots) #las=1 gives horizontal y tick values
Logist.fit=SELECT(Stow.df,var.names=v.names,q.names=q.fracs)
plot(Logist.fit, xlab="Carapace length (mm)")
ModelCheck(Logist.fit, xlab="Carapace length (mm)")
Estimates(Logist.fit)
?bootSELECT
devtools::install( paste0("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT") )
#devtools::install( paste0("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT") )
require(SELECT)
require(dplyr)
devtools::install( paste0("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT") )
devtools::install( paste0("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT") )
devtools::install( paste0("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT") )

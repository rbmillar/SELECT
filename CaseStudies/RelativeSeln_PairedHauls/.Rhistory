N=Catch$nConv+Catch$n32
O=Catch[,c("nConv","n32")]; E=N*cbind(yhat,1-yhat)
CalcOD(O,E,5)
yhat=fitted(T32.spline)
Catch=Raw2Tots(Conv32.df,var.names,q.names,sumHauls=F)
N=Catch$nConv+Catch$n32
O=Catch[,c("nConv","n32")]; E=N*cbind(yhat,1-yhat)
SELECT::CalcOD(O,E,5)
yhat=fitted(T32.spline)
Catch=Raw2Tots(Conv32.df,var.names,q.names,sumHauls=F)
N=Catch$nConv+Catch$n32
O=Catch[,c("nConv","n32")]; E=N*cbind(yhat,1-yhat)
calcOD(O,E,5)
yhat=fitted(T32.spline)
Catch=Raw2Tots(Conv32.df,var.names,q.names,sumHauls=F)
N=Catch$nConv+Catch$n32
O=Catch.df[,c("nConv","n32")]; E=N*cbind(yhat,1-yhat)
yhat=fitted(T32.spline)
Catch=Raw2Tots(Conv32.df,var.names,q.names,sumHauls=F)
N=Catch$nConv+Catch$n32
O=Catch[,c("nConv","n32")]; E=N*cbind(yhat,1-yhat)
calcOD(O,E,5)
var.names=c("CL","nConv","n32")
q.names=c("qConv","q32")
T32.spline=SplineSELECT(Conv32.df,var.names,q.names,bs="cr",quasi=F,sumHauls=F,
k=5,q.ODadjust = T)
summary(T32.spline)
var.names=c("CL","nConv","n32")
q.names=c("qConv","q32")
T32.spline=SplineSELECT(Conv32.df,var.names,q.names,bs="cr",quasi=T,sumHauls=F,
k=5,q.ODadjust = T)
summary(T32.spline)
Conv.df=read_excel("Exp 18 LenFreqs.xlsx", sheet = "Conventional trawl", na="NA")
T32.df=read_excel("Exp 18 LenFreqs.xlsx", sheet = "32 square trawl", na="NA")
T34.df=read_excel("Exp 18 LenFreqs.xlsx", sheet = "34 square trawl", na="NA")
Conv.df = Conv.df |> rename(Haul=Day, nConv=No.school, sfConv=Sf.school)
T32.df = T32.df |> rename(Haul=Day, n32=No.school, sf32=Sf.school)
T34.df = T34.df |> rename(Haul=Day, n34=No.school, sf34=Sf.school)
#Conv.df = Conv.df |> rename(Haul=Day, nConv=No.king, sfConv=Sf.king)
#T32.df = T32.df |> rename(Haul=Day, n32=No.king, sf32=Sf.king)
#T34.df = T34.df |> rename(Haul=Day, n34=No.king, sf34=Sf.king)
#The D6H4 haul pair of Conv vs T34 has missing counts for the conventional gear.
#Remove haul pair D6H4 for these two gears.
Conv.df = Conv.df |> filter(Haul != "D6H4")
T34.df = T34.df |> filter(Haul != "D6H4")
#Conventional and 32mm side gears
Conv32.df = inner_join(Conv.df,T32.df,by=c("Haul","CL"))
#Convert scaling factors to sampling fractions
Conv32.df = Conv32.df |>
transform(qConv=1/sfConv,q32=1/sf32) |> filter(CL>5 & CL<28)
#Conventional and 35mm side gears
Conv34.df = inner_join(Conv.df,T34.df,by=c("Haul","CL"))
#Convert scaling factors to sampling fractions
Conv34.df = Conv34.df |>
transform(qConv=1/sfConv,q34=1/sf34) |> filter(CL>5 & CL<28)
var.names=c("CL","nConv","n32")
q.names=c("qConv","q32")
T32.spline=SplineSELECT(Conv32.df,var.names,q.names,bs="cr",quasi=T,sumHauls=F,
k=5,q.ODadjust = T)
summary(T32.spline)
View(Conv32.df)
var.names=c("CL","nConv","n32")
q.names=c("qConv","q32")
T32.spline=SplineSELECT(Conv32.df,var.names,q.names,bs="cr",quasi=T,sumHauls=T,
k=5,q.ODadjust = T)
summary(T32.spline)
q.ODadjust
Raw2Tots
source("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R/HELPER_FUNCTIONS.R")
var.names=c("CL","nConv","n32")
q.names=c("qConv","q32")
T32.spline=SplineSELECT(Conv32.df,var.names,q.names,bs="cr",quasi=T,sumHauls=T,
k=5,q.ODadjust = T)
summary(T32.spline)
var.names=c("CL","nConv","n32")
q.names=c("qConv","q32")
T32.spline=SplineSELECT(Conv32.df,var.names,q.names,bs="cr",quasi=T,sumHauls=T,
k=5,q.ODadjust = F)
summary(T32.spline)
var.names=c("CL","nConv","n32")
q.names=c("qConv","q32")
T32.spline=SplineSELECT(Conv32.df,var.names,q.names,bs="cr",quasi=T,sumHauls=T,
k=5,q.ODadjust = T)
summary(T32.spline)
Raw2Tots
Raw2Tots( Conv32.df,var.names,q.names, q.ODadjust=TRUE)
Raw2Tots( Conv32.df,var.names,q.names, q.ODadjust=F)
SplineSELECT
knitr::opts_chunk$set(fig.height = 3.5)
devtools::install( paste0("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT") )
require(tidyverse)
require(mgcv)
require(SELECT)
require(readxl) #This package is installed with tidyverse
Raw2Tots
source("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT/R/HELPER_FUNCTIONS.R")
devtools::install( paste0("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT") )
require(tidyverse)
require(mgcv)
require(SELECT)
require(readxl) #This package is installed with tidyvers
Raw2Tots
devtools::install( paste0("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT") )
Raw2Tots
require(tidyverse)
require(mgcv)
require(SELECT)
require(readxl) #This package is installed with tidyverse
Raw2Tots
devtools::install( paste0("T:/Russell_SSD/ACTIVE/CurrentWork/RPackages/SELECT") )
require(tidyverse)
require(mgcv)
require(SELECT)
require(readxl) #This package is installed with tidyverse
Raw2Tots
Conv.df=read_excel("Exp 18 LenFreqs.xlsx", sheet = "Conventional trawl", na="NA")
T32.df=read_excel("Exp 18 LenFreqs.xlsx", sheet = "32 square trawl", na="NA")
T34.df=read_excel("Exp 18 LenFreqs.xlsx", sheet = "34 square trawl", na="NA")
Conv.df = Conv.df |> rename(Haul=Day, nConv=No.school, sfConv=Sf.school)
T32.df = T32.df |> rename(Haul=Day, n32=No.school, sf32=Sf.school)
T34.df = T34.df |> rename(Haul=Day, n34=No.school, sf34=Sf.school)
#Conv.df = Conv.df |> rename(Haul=Day, nConv=No.king, sfConv=Sf.king)
#T32.df = T32.df |> rename(Haul=Day, n32=No.king, sf32=Sf.king)
#T34.df = T34.df |> rename(Haul=Day, n34=No.king, sf34=Sf.king)
#The D6H4 haul pair of Conv vs T34 has missing counts for the conventional gear.
#Remove haul pair D6H4 for these two gears.
Conv.df = Conv.df |> filter(Haul != "D6H4")
T34.df = T34.df |> filter(Haul != "D6H4")
#Conventional and 32mm side gears
Conv32.df = inner_join(Conv.df,T32.df,by=c("Haul","CL"))
#Convert scaling factors to sampling fractions
Conv32.df = Conv32.df |>
transform(qConv=1/sfConv,q32=1/sf32) |> filter(CL>5 & CL<28)
#Conventional and 35mm side gears
Conv34.df = inner_join(Conv.df,T34.df,by=c("Haul","CL"))
#Convert scaling factors to sampling fractions
Conv34.df = Conv34.df |>
transform(qConv=1/sfConv,q34=1/sf34) |> filter(CL>5 & CL<28)
var.names=c("CL","nConv","n32")
q.names=c("qConv","q32")
T32.spline=SplineSELECT(Conv32.df,var.names,q.names,bs="cr",quasi=T,sumHauls=T,
k=5,q.ODadjust = F)
summary(T32.spline)
var.names=c("CL","nConv","n32")
q.names=c("qConv","q32")
T32.spline=SplineSELECT(Conv32.df,var.names,q.names,bs="cr",quasi=T,sumHauls=F,
k=5,q.ODadjust = F)
summary(T32.spline)
var.names=c("CL","nConv","n32")
q.names=c("qConv","q32")
T32.spline=SplineSELECT(Conv32.df,var.names,q.names,bs="cr",quasi=T,sumHauls=T,
k=5,q.ODadjust = T)
summary(T32.spline)
var.names=c("CL","nConv","n32")
q.names=c("qConv","q32")
T32.spline=SplineSELECT(Conv32.df,var.names,q.names,bs="cr",quasi=T,sumHauls=T,
k=5,q.ODadjust = T)
summary(T32.spline)
var.names=c("CL","nConv","n32")
q.names=c("qConv","q32")
T32.spline=SplineSELECT(Conv32.df,var.names,q.names,bs="cr",quasi=T,sumHauls=T,
k=5,q.ODadjust = F)
summary(T32.spline)
var.names=c("CL","nConv","n32")
q.names=c("qConv","q32")
T32.spline=SplineSELECT(Conv32.df,var.names,q.names,bs="cr",quasi=T,sumHauls=F,
k=5,q.ODadjust = F)
summary(T32.spline)
var.names=c("CL","nConv","n32")
q.names=c("qConv","q32")
T32.spline=SplineSELECT(Conv32.df,var.names,q.names,bs="cr",quasi=T,sumHauls=F,
k=5,q.ODadjust = T)
summary(T32.spline)
var.names=c("CL","nConv","n32")
q.names=c("qConv","q32")
T32.spline=SplineSELECT(Conv32.df,var.names,q.names,bs="cr",quasi=T,sumHauls=T,
k=5,q.ODadjust = T)
summary(T32.spline)
yhat=fitted(T32.spline)
Catch=Raw2Tots(Conv32.df,var.names,q.names,sumHauls=F)
N=Catch$nConv+Catch$n32
O=Catch[,c("nConv","n32")]; E=N*cbind(yhat,1-yhat)
var.names=c("CL","nConv","n32")
q.names=c("qConv","q32")
T32.spline=SplineSELECT(Conv32.df,var.names,q.names,bs="cr",quasi=T,sumHauls=F,
k=5,q.ODadjust = T)
summary(T32.spline)
yhat=fitted(T32.spline)
Catch=Raw2Tots(Conv32.df,var.names,q.names,sumHauls=F)
N=Catch$nConv+Catch$n32
O=Catch[,c("nConv","n32")]; E=N*cbind(yhat,1-yhat)
calcOD(O,E,5)
calcOD(O,E,0)
calcOD(O,E,5,minE=0)
yhat=fitted(T32.spline)
Catch=Raw2Tots(Conv32.df,var.names,q.names,sumHauls=F)
N=Catch$nConv+Catch$n32
O=Catch[,c("nConv","n32")]; E=N*cbind(yhat,1-yhat)
calcOD(O,E,4.384,minE=0)
yhat=fitted(T32.spline)
Catch=Raw2Tots(Conv32.df,var.names,q.names,sumHauls=F)
N=Catch$nConv+Catch$n32
O=Catch[,c("nConv","n32")]; E=N*cbind(yhat,1-yhat)
calcOD(O,E,4.384,minE=5)
var.names=c("CL","nConv","n32")
q.names=c("qConv","q32")
T32.spline=SplineSELECT(Conv32.df,var.names,q.names,bs="cr",quasi=T,sumHauls=F,
k=5,q.ODadjust = T)
summary(T32.spline)
yhat=fitted(T32.spline)
Catch=Raw2Tots(Conv32.df,var.names,q.names,sumHauls=F)
N=Catch$nConv+Catch$n32
O=Catch[,c("nConv","n32")]; E=N*cbind(yhat,1-yhat)
calcOD(O,E,4.384,minE=20)
yhat=fitted(T32.spline)
Catch=Raw2Tots(Conv32.df,var.names,q.names,sumHauls=F)
N=Catch$nConv+Catch$n32
O=Catch[,c("nConv","n32")]; E=N*cbind(yhat,1-yhat)
calcOD(O,E,4.384,minE=50)
yhat=fitted(T32.spline)
Catch=Raw2Tots(Conv32.df,var.names,q.names,sumHauls=F)
N=Catch$nConv+Catch$n32
O=Catch[,c("nConv","n32")]; E=N*cbind(yhat,1-yhat)
calcOD(O,E,4.384,minE=30)
yhat=fitted(T32.spline)
Catch=Raw2Tots(Conv32.df,var.names,q.names,sumHauls=F)
N=Catch$nConv+Catch$n32
O=Catch[,c("nConv","n32")]; E=N*cbind(yhat,1-yhat)
calcOD(O,E,4.384,minE=5)
var.names=c("CL","nConv","n32")
q.names=c("qConv","q32")
T32.spline=SplineSELECT(Conv32.df,var.names,q.names,bs="cr",quasi=T,sumHauls=F,
k=5,q.ODadjust = T)
summary(T32.spline)
yhat=fitted(T32.spline)
Catch=Raw2Tots(Conv32.df,var.names,q.names,sumHauls=F)
N=Catch$nConv+Catch$n32
O=Catch[,c("nConv","n32")]; E=N*cbind(yhat,1-yhat)
calcOD(O,E,4.384,minE=0)
Raw2Tots
yhat=fitted(T32.spline)
Catch=Raw2Tots(Conv32.df,var.names,q.names,sumHauls=F,q.ODadjust = F)
N=Catch$nConv+Catch$n32
O=Catch[,c("nConv","n32")]; E=N*cbind(yhat,1-yhat)
calcOD(O,E,4.384,minE=0)
N
yhat=fitted(T32.spline)
Catch=Raw2Tots(Conv32.df,var.names,q.names,sumHauls=F,q.ODadjust = F)
N=Catch$nConv+Catch$n32
O=Catch[,c("nConv","n32")]; E=N*cbind(yhat,1-yhat)
calcOD(O,E,4.384,minE=0)
N
yhat=fitted(T32.spline)
Catch=Raw2Tots(Conv32.df,var.names,q.names,sumHauls=F,q.ODadjust = T)
N=Catch$nConv+Catch$n32
O=Catch[,c("nConv","n32")]; E=N*cbind(yhat,1-yhat)
calcOD(O,E,4.384,minE=0)
N
var.names=c("CL","nConv","n32")
q.names=c("qConv","q32")
T32.spline=SplineSELECT(Conv32.df,var.names,q.names,bs="cr",quasi=T,sumHauls=T,
k=5,q.ODadjust = T)
summary(T32.spline)
yhat=fitted(T32.spline)
Catch=Raw2Tots(Conv32.df,var.names,q.names,sumHauls=T,q.ODadjust = T)
N=Catch$nConv+Catch$n32
O=Catch[,c("nConv","n32")]; E=N*cbind(yhat,1-yhat)
calcOD(O,E,4.384,minE=0)
var.names=c("CL","nConv","n32")
q.names=c("qConv","q32")
T32.spline=SplineSELECT(Conv32.df,var.names,q.names,bs="cr",quasi=T,sumHauls=T,
k=5,q.ODadjust = T)
summary(T32.spline)
yhat=fitted(T32.spline)
Catch=Raw2Tots(Conv32.df,var.names,q.names,sumHauls=T,q.ODadjust = T)
N=Catch$nConv+Catch$n32
O=Catch[,c("nConv","n32")]; E=N*cbind(yhat,1-yhat)
calcOD(O,E,4.384,minE=0)
yhat
N
#Conventional and 32mm side gears
Conv32.df = inner_join(Conv.df,T32.df,by=c("Haul","CL"))
#Convert scaling factors to sampling fractions
Conv32.df = Conv32.df |>
transform(qConv=1/sfConv,q32=1/sf32) |> filter(CL>5 & CL<26)
#Conventional and 35mm side gears
Conv34.df = inner_join(Conv.df,T34.df,by=c("Haul","CL"))
#Convert scaling factors to sampling fractions
Conv34.df = Conv34.df |>
transform(qConv=1/sfConv,q34=1/sf34) |> filter(CL>5 & CL<26)
var.names=c("CL","nConv","n32")
q.names=c("qConv","q32")
T32.spline=SplineSELECT(Conv32.df,var.names,q.names,bs="cr",quasi=T,sumHauls=T,
k=5,q.ODadjust = T)
summary(T32.spline)
yhat=fitted(T32.spline)
Catch=Raw2Tots(Conv32.df,var.names,q.names,sumHauls=T,q.ODadjust = T)
N=Catch$nConv+Catch$n32
O=Catch[,c("nConv","n32")]; E=N*cbind(yhat,1-yhat)
calcOD(O,E,4.384,minE=0)
var.names=c("CL","nConv","n32")
q.names=c("qConv","q32")
T32.spline=SplineSELECT(Conv32.df,var.names,q.names,bs="cr",quasi=T,sumHauls=T,
k=5,q.ODadjust = F)
summary(T32.spline)
yhat=fitted(T32.spline)
Catch=Raw2Tots(Conv32.df,var.names,q.names,sumHauls=T,q.ODadjust = F)
N=Catch$nConv+Catch$n32
O=Catch[,c("nConv","n32")]; E=N*cbind(yhat,1-yhat)
calcOD(O,E,4.384,minE=0)
1.7^2
summary(T32.spline)$scale
resid(T32.spline)
resid(T32.spline,type="pearson")
sum(resid(T32.spline)^2)
yhat=fitted(T32.spline)
Catch=Raw2Tots(Conv32.df,var.names,q.names,sumHauls=T,q.ODadjust = F)
N=Catch$nConv+Catch$n32
O=Catch[,c("nConv","n32")]; E=N*cbind(1-yhat,yhat)
calcOD(O,E,4.384,minE=0)
var.names=c("CL","nConv","n32")
q.names=c("qConv","q32")
T32.spline=SplineSELECT(Conv32.df,var.names,q.names,bs="cr",quasi=T,sumHauls=T,
k=5,q.ODadjust = F)
summary(T32.spline)
#sum(resid(T32.spline)^2)
yhat=fitted(T32.spline)
Catch=Raw2Tots(Conv32.df,var.names,q.names,sumHauls=T,q.ODadjust = F)
N=Catch$nConv+Catch$n32
O=Catch[,c("nConv","n32")]; E=N*cbind(1-yhat,yhat)
calcOD(O,E,4.384,minE=0)
yhat=fitted(T32.spline)
Catch=Raw2Tots(Conv32.df,var.names,q.names,sumHauls=T,q.ODadjust = F)
N=Catch$nConv+Catch$n32
O=Catch[,c("nConv","n32")]; E=N*cbind(1-yhat,yhat)
calcOD(O,E,3.473,minE=0)
calcOD(O,E,4.473,minE=0)
calcOD(O,E,5.473,minE=0)
T32.spline$df.residual
var.names=c("CL","nConv","n32")
q.names=c("qConv","q32")
T32.spline=SplineSELECT(Conv32.df,var.names,q.names,bs="cr",quasi=T,sumHauls=F,
k=5,q.ODadjust = F)
summary(T32.spline)
sum(resid(T32.spline)^2)
yhat=fitted(T32.spline)
Catch=Raw2Tots(Conv32.df,var.names,q.names,sumHauls=F,q.ODadjust = F)
N=Catch$nConv+Catch$n32
O=Catch[,c("nConv","n32")]; E=N*cbind(1-yhat,yhat)
calcOD(O,E,5.473,minE=0)
T32.spline$df.residual
calcOD(O,E,5.473,minE=3)
pF(10.15,3.44,3.819)
pf(10.15,3.44,3.819)
?pf
pf(10.15*3.44,3.44,3.819)
pf(10.15.1.1)
pf(10.15,1,1)
?pf
pf(10.15,3.44,1)
mgcv:::testStat
Conv.df=read_excel("Exp 18 LenFreqs.xlsx", sheet = "Conventional trawl", na="NA")
T35.df=read_excel("Exp 18 LenFreqs.xlsx", sheet = "35 square trawl", na="NA")
Conv.df = Conv.df |> rename(Haul=Day, nConv=No.school, sfConv=Sf.school)
T35.df = T35.df |> rename(Haul=Day, n35=No.school, sf35=Sf.school)
Conv.df = Conv.df |> filter(Haul != "D6H4")
T35.df = T35.df |> filter(Haul != "D6H4")
#Merge conventional and 35mm side gears
Conv35.df = inner_join(Conv.df,T35.df,by=c("Haul","CL"))
#Convert scaling factors to sampling fractions
Conv35.df = Conv35.df |>
transform(qConv=1/sfConv,q35=1/sf35) |> filter(CL>5 & CL<26)
var.names=c("CL","nConv","n35")
q.names=c("qConv","q35")
T35.spline=SplineSELECT(Conv35.df,var.names,q.names,bs="cr",quasi=T,sumHauls=F,
k=5,q.ODadjust = F)
ls()
rm(T32.df)
rm(list=ls())
Conv.df=read_excel("Exp 18 LenFreqs.xlsx", sheet = "Conventional trawl", na="NA")
T35.df=read_excel("Exp 18 LenFreqs.xlsx", sheet = "35 square trawl", na="NA")
Conv.df = Conv.df |> rename(Haul=Day, nConv=No.school, sfConv=Sf.school)
T35.df = T35.df |> rename(Haul=Day, n35=No.school, sf35=Sf.school)
Conv.df = Conv.df |> filter(Haul != "D6H4")
T35.df = T35.df |> filter(Haul != "D6H4")
#Merge conventional and 35mm side gears
Conv35.df = inner_join(Conv.df,T35.df,by=c("Haul","CL"))
#Convert scaling factors to sampling fractions
Conv35.df = Conv35.df |>
transform(qConv=1/sfConv,q35=1/sf35) |> filter(CL>5 & CL<26)
var.names=c("CL","nConv","n35")
q.names=c("qConv","q35")
T35.spline=SplineSELECT(Conv35.df,var.names,q.names,bs="cr",quasi=T,sumHauls=F,
k=5,q.ODadjust = F)
#Define the bootstrap prediction function
CLseq=seq(5,25,0.5) #Carapace lengths to use for predn
Predn=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names,q.names,bs="cr",quasi=T,sumHauls=F,k=5,
q.ODadjust = T)
predict(SplineFit,newdata=data.frame(CL=CLseq),type="response") }
#Check it works
Tot35.df=Raw2Tots(Conv35.df,var.names,q.names) |>
transform(lgth=CL, y=n35/(nConv+n35))
plot(y~CL,data=Tot32.df,ylim=c(0,1),xlab="Carapace length (mm)",
ylab="T32 catch share",main="32 mm T45")
#Define the bootstrap prediction function
CLseq=seq(5,25,0.5) #Carapace lengths to use for predn
Predn=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names,q.names,bs="cr",quasi=T,sumHauls=F,k=5,
q.ODadjust = T)
predict(SplineFit,newdata=data.frame(CL=CLseq),type="response") }
#Check it works
Tot35.df=Raw2Tots(Conv35.df,var.names,q.names) |>
transform(lgth=CL, y=n35/(nConv+n35))
plot(y~CL,data=Tot35.df,ylim=c(0,1),xlab="Carapace length (mm)",
ylab="T35 catch share",main="35 mm T45")
points(CLseq,yhat,type="l")
var.names=c("CL","nConv","n35")
q.names=c("qConv","q35")
T35.spline=SplineSELECT(Conv35.df,var.names,q.names,bs="cr",quasi=T,sumHauls=F,
k=5,q.ODadjust = F)
yhat=fitted(T32.spline)
var.names=c("CL","nConv","n35")
q.names=c("qConv","q35")
T35.spline=SplineSELECT(Conv35.df,var.names,q.names,bs="cr",quasi=T,sumHauls=F,
k=5,q.ODadjust = F)
yhat=fitted(T35.spline)
#Define the bootstrap prediction function
CLseq=seq(5,25,0.5) #Carapace lengths to use for predn
Predn=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names,q.names,bs="cr",quasi=T,sumHauls=F,k=5,
q.ODadjust = T)
predict(SplineFit,newdata=data.frame(CL=CLseq),type="response") }
#Check it works
Tot35.df=Raw2Tots(Conv35.df,var.names,q.names) |>
transform(lgth=CL, y=n35/(nConv+n35))
plot(y~CL,data=Tot35.df,ylim=c(0,1),xlab="Carapace length (mm)",
ylab="T35 catch share",main="35 mm T45")
points(CLseq,yhat,type="l")
#Define the bootstrap prediction function
CLseq=seq(5,25,0.5) #Carapace lengths to use for predn
Predn=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names,q.names,bs="cr",quasi=T,sumHauls=F,k=5,
q.ODadjust = T)
predict(SplineFit,newdata=data.frame(CL=CLseq),type="response") }
#Check it works
Tot35.df=Raw2Tots(Conv35.df,var.names,q.names) |>
transform(lgth=CL, y=n35/(nConv+n35))
plot(y~CL,data=Tot35.df,ylim=c(0,1),xlab="Carapace length (mm)",
ylab="T35 catch share",main="35 mm T45")
predn=Predn(Tot35.df,var.names)
names(T35.df)
#Define the bootstrap prediction function
CLseq=seq(5,25,0.5) #Carapace lengths to use for predn
Predn=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names,q.names,bs="cr",quasi=T,sumHauls=F,k=5,
q.ODadjust = T)
predict(SplineFit,newdata=data.frame(CL=CLseq),type="response") }
#Check it works
Tot35.df=Raw2Tots(Conv35.df,var.names,q.names) |>
transform(lgth=CL, y=n35/(nConv+n35))
plot(y~CL,data=Tot35.df,ylim=c(0,1),xlab="Carapace length (mm)",
ylab="T35 catch share",main="35 mm T45")
predn=Predn(Conv35.df,var.names)
points(CLseq,yhat,type="l")
#Define the bootstrap prediction function
CLseq=seq(5,25,0.5) #Carapace lengths to use for predn
Predn=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names,q.names,bs="cr",quasi=T,sumHauls=F,k=5,
q.ODadjust = T)
predict(SplineFit,newdata=data.frame(CL=CLseq),type="response") }
#Check it works
Tot35.df=Raw2Tots(Conv35.df,var.names,q.names) |>
transform(lgth=CL, y=n35/(nConv+n35))
plot(y~CL,data=Tot35.df,ylim=c(0,1),xlab="Carapace length (mm)",
ylab="T35 catch share",main="35 mm T45")
predn=Predn(Conv35.df,var.names)
points(CLseq,predn,type="l")
abline(h=0.5,lty=3)
nboot=1000 #Increase to at least 1000 in practice
Boot35=bootSELECT(Conv35.df,var.names,Predn,haul="Haul",nsim=nboot,paired=T)
BootPlot(Boot35,CLseq,yhat,Data=Tot35.df)
yhat
var.names=c("CL","nConv","n35")
q.names=c("qConv","q35")
T35.spline=SplineSELECT(Conv35.df,var.names,q.names,bs="cr",quasi=T,sumHauls=T,
k=5,q.ODadjust = F)
yhat=fitted(T35.spline)
BootPlot(Boot35,CLseq,yhat,Data=Tot35.df)
BootPlot(Boot35,CLseq,predn,Data=Tot35.df)
nboot=1000 #Increase to at least 1000 in practice
Boot35=bootSELECT(Conv35.df,var.names,Predn,haul="Haul",nsim=nboot,paired=T)
BootPlot(Boot35,CLseq,predn,Data=Tot35.df)
#Define the spline r-squared function
permRsq=function(data,var.names) {
SplineFit=SplineSELECT(data,var.names,q.names,bs="ts",quasi=T,sumHauls=F,k=5,
q.ODadjust = T)
summary(SplineFit)$r.sq }
#Check it works
T35.rsq=permRsq(Conv35.df,var.names)
nperm=1000 #Increase to at least 1000 in practice
Perm35=permSELECT(Conv35.df,var.names,permRsq,haul="Haul",nsim=nperm,paired=T)
mean(Perm35>T35.rsq) #Proportion of permuted r-squared values greater than the observed
cat("The p-value for a CL effect is",mean(Perm35>T35.rsq))
nperm=1000 #Increase to at least 1000 in practice
Perm35=permSELECT(Conv35.df,var.names,permRsq,haul="Haul",nsim=nperm,paired=T)
#Proportion of permuted r-squared values greater than the observed
cat("The p-value for a CL effect is",mean(Perm35>T35.rsq),"\n")
require(SELECT)
Trout
data(Trout)
Trout
